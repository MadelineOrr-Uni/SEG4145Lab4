
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007590  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea0  08007760  08007760  00008760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008600  08008600  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008600  08008600  00009600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008608  08008608  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008608  08008608  00009608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800860c  0800860c  0000960c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008610  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ff0  2000006c  0800867c  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000505c  0800867c  0000b05c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b17a  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b69  00000000  00000000  00025216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  00028d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000130e  00000000  00000000  0002a5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002464d  00000000  00000000  0002b8de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc4f  00000000  00000000  0004ff2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de413  00000000  00000000  0006cb7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014af8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c38  00000000  00000000  0014afd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00151c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007748 	.word	0x08007748

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08007748 	.word	0x08007748

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
	int done=1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
	while(done)
 80005aa:	e19b      	b.n	80008e4 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005b2:	48b3      	ldr	r0, [pc, #716]	@ (8000880 <Get_Key+0x2e0>)
 80005b4:	f001 fce2 	bl	8001f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80005b8:	2200      	movs	r2, #0
 80005ba:	2110      	movs	r1, #16
 80005bc:	48b0      	ldr	r0, [pc, #704]	@ (8000880 <Get_Key+0x2e0>)
 80005be:	f001 fcdd 	bl	8001f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005c2:	2200      	movs	r2, #0
 80005c4:	2120      	movs	r1, #32
 80005c6:	48ae      	ldr	r0, [pc, #696]	@ (8000880 <Get_Key+0x2e0>)
 80005c8:	f001 fcd8 	bl	8001f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80005cc:	2200      	movs	r2, #0
 80005ce:	2108      	movs	r1, #8
 80005d0:	48ab      	ldr	r0, [pc, #684]	@ (8000880 <Get_Key+0x2e0>)
 80005d2:	f001 fcd3 	bl	8001f7c <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80005d6:	2140      	movs	r1, #64	@ 0x40
 80005d8:	48a9      	ldr	r0, [pc, #676]	@ (8000880 <Get_Key+0x2e0>)
 80005da:	f001 fcb7 	bl	8001f4c <HAL_GPIO_ReadPin>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d00b      	beq.n	80005fc <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80005e4:	bf00      	nop
 80005e6:	2140      	movs	r1, #64	@ 0x40
 80005e8:	48a5      	ldr	r0, [pc, #660]	@ (8000880 <Get_Key+0x2e0>)
 80005ea:	f001 fcaf 	bl	8001f4c <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1f8      	bne.n	80005e6 <Get_Key+0x46>
		key='1';
 80005f4:	4ba3      	ldr	r3, [pc, #652]	@ (8000884 <Get_Key+0x2e4>)
 80005f6:	2231      	movs	r2, #49	@ 0x31
 80005f8:	701a      	strb	r2, [r3, #0]
		break;
 80005fa:	e177      	b.n	80008ec <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80005fc:	2180      	movs	r1, #128	@ 0x80
 80005fe:	48a2      	ldr	r0, [pc, #648]	@ (8000888 <Get_Key+0x2e8>)
 8000600:	f001 fca4 	bl	8001f4c <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d00b      	beq.n	8000622 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800060a:	bf00      	nop
 800060c:	2180      	movs	r1, #128	@ 0x80
 800060e:	489e      	ldr	r0, [pc, #632]	@ (8000888 <Get_Key+0x2e8>)
 8000610:	f001 fc9c 	bl	8001f4c <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f8      	bne.n	800060c <Get_Key+0x6c>
		key='4';
 800061a:	4b9a      	ldr	r3, [pc, #616]	@ (8000884 <Get_Key+0x2e4>)
 800061c:	2234      	movs	r2, #52	@ 0x34
 800061e:	701a      	strb	r2, [r3, #0]
		break;
 8000620:	e164      	b.n	80008ec <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000622:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000626:	4899      	ldr	r0, [pc, #612]	@ (800088c <Get_Key+0x2ec>)
 8000628:	f001 fc90 	bl	8001f4c <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d00c      	beq.n	800064c <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000632:	bf00      	nop
 8000634:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000638:	4894      	ldr	r0, [pc, #592]	@ (800088c <Get_Key+0x2ec>)
 800063a:	f001 fc87 	bl	8001f4c <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1f7      	bne.n	8000634 <Get_Key+0x94>
		key='7';
 8000644:	4b8f      	ldr	r3, [pc, #572]	@ (8000884 <Get_Key+0x2e4>)
 8000646:	2237      	movs	r2, #55	@ 0x37
 8000648:	701a      	strb	r2, [r3, #0]
		break;
 800064a:	e14f      	b.n	80008ec <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800064c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000650:	488e      	ldr	r0, [pc, #568]	@ (800088c <Get_Key+0x2ec>)
 8000652:	f001 fc7b 	bl	8001f4c <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00c      	beq.n	8000676 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800065c:	bf00      	nop
 800065e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000662:	488a      	ldr	r0, [pc, #552]	@ (800088c <Get_Key+0x2ec>)
 8000664:	f001 fc72 	bl	8001f4c <HAL_GPIO_ReadPin>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d1f7      	bne.n	800065e <Get_Key+0xbe>
		key='*';
 800066e:	4b85      	ldr	r3, [pc, #532]	@ (8000884 <Get_Key+0x2e4>)
 8000670:	222a      	movs	r2, #42	@ 0x2a
 8000672:	701a      	strb	r2, [r3, #0]
		break;
 8000674:	e13a      	b.n	80008ec <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800067c:	4880      	ldr	r0, [pc, #512]	@ (8000880 <Get_Key+0x2e0>)
 800067e:	f001 fc7d 	bl	8001f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8000682:	2201      	movs	r2, #1
 8000684:	2110      	movs	r1, #16
 8000686:	487e      	ldr	r0, [pc, #504]	@ (8000880 <Get_Key+0x2e0>)
 8000688:	f001 fc78 	bl	8001f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800068c:	2200      	movs	r2, #0
 800068e:	2120      	movs	r1, #32
 8000690:	487b      	ldr	r0, [pc, #492]	@ (8000880 <Get_Key+0x2e0>)
 8000692:	f001 fc73 	bl	8001f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000696:	2200      	movs	r2, #0
 8000698:	2108      	movs	r1, #8
 800069a:	4879      	ldr	r0, [pc, #484]	@ (8000880 <Get_Key+0x2e0>)
 800069c:	f001 fc6e 	bl	8001f7c <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006a0:	2140      	movs	r1, #64	@ 0x40
 80006a2:	4877      	ldr	r0, [pc, #476]	@ (8000880 <Get_Key+0x2e0>)
 80006a4:	f001 fc52 	bl	8001f4c <HAL_GPIO_ReadPin>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d00b      	beq.n	80006c6 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006ae:	bf00      	nop
 80006b0:	2140      	movs	r1, #64	@ 0x40
 80006b2:	4873      	ldr	r0, [pc, #460]	@ (8000880 <Get_Key+0x2e0>)
 80006b4:	f001 fc4a 	bl	8001f4c <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d1f8      	bne.n	80006b0 <Get_Key+0x110>
		key='2';
 80006be:	4b71      	ldr	r3, [pc, #452]	@ (8000884 <Get_Key+0x2e4>)
 80006c0:	2232      	movs	r2, #50	@ 0x32
 80006c2:	701a      	strb	r2, [r3, #0]
		break;
 80006c4:	e112      	b.n	80008ec <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80006c6:	2180      	movs	r1, #128	@ 0x80
 80006c8:	486f      	ldr	r0, [pc, #444]	@ (8000888 <Get_Key+0x2e8>)
 80006ca:	f001 fc3f 	bl	8001f4c <HAL_GPIO_ReadPin>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d00b      	beq.n	80006ec <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80006d4:	bf00      	nop
 80006d6:	2180      	movs	r1, #128	@ 0x80
 80006d8:	486b      	ldr	r0, [pc, #428]	@ (8000888 <Get_Key+0x2e8>)
 80006da:	f001 fc37 	bl	8001f4c <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1f8      	bne.n	80006d6 <Get_Key+0x136>
		key='5';
 80006e4:	4b67      	ldr	r3, [pc, #412]	@ (8000884 <Get_Key+0x2e4>)
 80006e6:	2235      	movs	r2, #53	@ 0x35
 80006e8:	701a      	strb	r2, [r3, #0]
		break;
 80006ea:	e0ff      	b.n	80008ec <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80006ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006f0:	4866      	ldr	r0, [pc, #408]	@ (800088c <Get_Key+0x2ec>)
 80006f2:	f001 fc2b 	bl	8001f4c <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00c      	beq.n	8000716 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80006fc:	bf00      	nop
 80006fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000702:	4862      	ldr	r0, [pc, #392]	@ (800088c <Get_Key+0x2ec>)
 8000704:	f001 fc22 	bl	8001f4c <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1f7      	bne.n	80006fe <Get_Key+0x15e>
		key='8';
 800070e:	4b5d      	ldr	r3, [pc, #372]	@ (8000884 <Get_Key+0x2e4>)
 8000710:	2238      	movs	r2, #56	@ 0x38
 8000712:	701a      	strb	r2, [r3, #0]
		break;
 8000714:	e0ea      	b.n	80008ec <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000716:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800071a:	485c      	ldr	r0, [pc, #368]	@ (800088c <Get_Key+0x2ec>)
 800071c:	f001 fc16 	bl	8001f4c <HAL_GPIO_ReadPin>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d00c      	beq.n	8000740 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000726:	bf00      	nop
 8000728:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800072c:	4857      	ldr	r0, [pc, #348]	@ (800088c <Get_Key+0x2ec>)
 800072e:	f001 fc0d 	bl	8001f4c <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1f7      	bne.n	8000728 <Get_Key+0x188>
		key='0';
 8000738:	4b52      	ldr	r3, [pc, #328]	@ (8000884 <Get_Key+0x2e4>)
 800073a:	2230      	movs	r2, #48	@ 0x30
 800073c:	701a      	strb	r2, [r3, #0]
		break;
 800073e:	e0d5      	b.n	80008ec <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000746:	484e      	ldr	r0, [pc, #312]	@ (8000880 <Get_Key+0x2e0>)
 8000748:	f001 fc18 	bl	8001f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 800074c:	2200      	movs	r2, #0
 800074e:	2110      	movs	r1, #16
 8000750:	484b      	ldr	r0, [pc, #300]	@ (8000880 <Get_Key+0x2e0>)
 8000752:	f001 fc13 	bl	8001f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 8000756:	2201      	movs	r2, #1
 8000758:	2120      	movs	r1, #32
 800075a:	4849      	ldr	r0, [pc, #292]	@ (8000880 <Get_Key+0x2e0>)
 800075c:	f001 fc0e 	bl	8001f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 8000760:	2200      	movs	r2, #0
 8000762:	2108      	movs	r1, #8
 8000764:	4846      	ldr	r0, [pc, #280]	@ (8000880 <Get_Key+0x2e0>)
 8000766:	f001 fc09 	bl	8001f7c <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 800076a:	2140      	movs	r1, #64	@ 0x40
 800076c:	4844      	ldr	r0, [pc, #272]	@ (8000880 <Get_Key+0x2e0>)
 800076e:	f001 fbed 	bl	8001f4c <HAL_GPIO_ReadPin>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00b      	beq.n	8000790 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000778:	bf00      	nop
 800077a:	2140      	movs	r1, #64	@ 0x40
 800077c:	4840      	ldr	r0, [pc, #256]	@ (8000880 <Get_Key+0x2e0>)
 800077e:	f001 fbe5 	bl	8001f4c <HAL_GPIO_ReadPin>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1f8      	bne.n	800077a <Get_Key+0x1da>
		key='3';
 8000788:	4b3e      	ldr	r3, [pc, #248]	@ (8000884 <Get_Key+0x2e4>)
 800078a:	2233      	movs	r2, #51	@ 0x33
 800078c:	701a      	strb	r2, [r3, #0]
		break;
 800078e:	e0ad      	b.n	80008ec <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000790:	2180      	movs	r1, #128	@ 0x80
 8000792:	483d      	ldr	r0, [pc, #244]	@ (8000888 <Get_Key+0x2e8>)
 8000794:	f001 fbda 	bl	8001f4c <HAL_GPIO_ReadPin>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d00b      	beq.n	80007b6 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800079e:	bf00      	nop
 80007a0:	2180      	movs	r1, #128	@ 0x80
 80007a2:	4839      	ldr	r0, [pc, #228]	@ (8000888 <Get_Key+0x2e8>)
 80007a4:	f001 fbd2 	bl	8001f4c <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1f8      	bne.n	80007a0 <Get_Key+0x200>
		key='6';
 80007ae:	4b35      	ldr	r3, [pc, #212]	@ (8000884 <Get_Key+0x2e4>)
 80007b0:	2236      	movs	r2, #54	@ 0x36
 80007b2:	701a      	strb	r2, [r3, #0]
		break;
 80007b4:	e09a      	b.n	80008ec <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ba:	4834      	ldr	r0, [pc, #208]	@ (800088c <Get_Key+0x2ec>)
 80007bc:	f001 fbc6 	bl	8001f4c <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00c      	beq.n	80007e0 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80007c6:	bf00      	nop
 80007c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007cc:	482f      	ldr	r0, [pc, #188]	@ (800088c <Get_Key+0x2ec>)
 80007ce:	f001 fbbd 	bl	8001f4c <HAL_GPIO_ReadPin>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d1f7      	bne.n	80007c8 <Get_Key+0x228>
		key='9';
 80007d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <Get_Key+0x2e4>)
 80007da:	2239      	movs	r2, #57	@ 0x39
 80007dc:	701a      	strb	r2, [r3, #0]
		break;
 80007de:	e085      	b.n	80008ec <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80007e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e4:	4829      	ldr	r0, [pc, #164]	@ (800088c <Get_Key+0x2ec>)
 80007e6:	f001 fbb1 	bl	8001f4c <HAL_GPIO_ReadPin>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d00c      	beq.n	800080a <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80007f0:	bf00      	nop
 80007f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007f6:	4825      	ldr	r0, [pc, #148]	@ (800088c <Get_Key+0x2ec>)
 80007f8:	f001 fba8 	bl	8001f4c <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1f7      	bne.n	80007f2 <Get_Key+0x252>
		key='#';
 8000802:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <Get_Key+0x2e4>)
 8000804:	2223      	movs	r2, #35	@ 0x23
 8000806:	701a      	strb	r2, [r3, #0]
		break;
 8000808:	e070      	b.n	80008ec <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000810:	481b      	ldr	r0, [pc, #108]	@ (8000880 <Get_Key+0x2e0>)
 8000812:	f001 fbb3 	bl	8001f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000816:	2200      	movs	r2, #0
 8000818:	2110      	movs	r1, #16
 800081a:	4819      	ldr	r0, [pc, #100]	@ (8000880 <Get_Key+0x2e0>)
 800081c:	f001 fbae 	bl	8001f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000820:	2200      	movs	r2, #0
 8000822:	2120      	movs	r1, #32
 8000824:	4816      	ldr	r0, [pc, #88]	@ (8000880 <Get_Key+0x2e0>)
 8000826:	f001 fba9 	bl	8001f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 800082a:	2201      	movs	r2, #1
 800082c:	2108      	movs	r1, #8
 800082e:	4814      	ldr	r0, [pc, #80]	@ (8000880 <Get_Key+0x2e0>)
 8000830:	f001 fba4 	bl	8001f7c <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000834:	2140      	movs	r1, #64	@ 0x40
 8000836:	4812      	ldr	r0, [pc, #72]	@ (8000880 <Get_Key+0x2e0>)
 8000838:	f001 fb88 	bl	8001f4c <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d00b      	beq.n	800085a <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000842:	bf00      	nop
 8000844:	2140      	movs	r1, #64	@ 0x40
 8000846:	480e      	ldr	r0, [pc, #56]	@ (8000880 <Get_Key+0x2e0>)
 8000848:	f001 fb80 	bl	8001f4c <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1f8      	bne.n	8000844 <Get_Key+0x2a4>
		key='A';
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <Get_Key+0x2e4>)
 8000854:	2241      	movs	r2, #65	@ 0x41
 8000856:	701a      	strb	r2, [r3, #0]
		break;
 8000858:	e048      	b.n	80008ec <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800085a:	2180      	movs	r1, #128	@ 0x80
 800085c:	480a      	ldr	r0, [pc, #40]	@ (8000888 <Get_Key+0x2e8>)
 800085e:	f001 fb75 	bl	8001f4c <HAL_GPIO_ReadPin>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d013      	beq.n	8000890 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000868:	bf00      	nop
 800086a:	2180      	movs	r1, #128	@ 0x80
 800086c:	4806      	ldr	r0, [pc, #24]	@ (8000888 <Get_Key+0x2e8>)
 800086e:	f001 fb6d 	bl	8001f4c <HAL_GPIO_ReadPin>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1f8      	bne.n	800086a <Get_Key+0x2ca>
		key='B';
 8000878:	4b02      	ldr	r3, [pc, #8]	@ (8000884 <Get_Key+0x2e4>)
 800087a:	2242      	movs	r2, #66	@ 0x42
 800087c:	701a      	strb	r2, [r3, #0]
		break;
 800087e:	e035      	b.n	80008ec <Get_Key+0x34c>
 8000880:	40020400 	.word	0x40020400
 8000884:	20000088 	.word	0x20000088
 8000888:	40020800 	.word	0x40020800
 800088c:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000890:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000894:	481a      	ldr	r0, [pc, #104]	@ (8000900 <Get_Key+0x360>)
 8000896:	f001 fb59 	bl	8001f4c <HAL_GPIO_ReadPin>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d00c      	beq.n	80008ba <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80008a0:	bf00      	nop
 80008a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008a6:	4816      	ldr	r0, [pc, #88]	@ (8000900 <Get_Key+0x360>)
 80008a8:	f001 fb50 	bl	8001f4c <HAL_GPIO_ReadPin>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1f7      	bne.n	80008a2 <Get_Key+0x302>
		key='C';
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <Get_Key+0x364>)
 80008b4:	2243      	movs	r2, #67	@ 0x43
 80008b6:	701a      	strb	r2, [r3, #0]
		break;
 80008b8:	e018      	b.n	80008ec <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80008ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008be:	4810      	ldr	r0, [pc, #64]	@ (8000900 <Get_Key+0x360>)
 80008c0:	f001 fb44 	bl	8001f4c <HAL_GPIO_ReadPin>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d00c      	beq.n	80008e4 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80008ca:	bf00      	nop
 80008cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008d0:	480b      	ldr	r0, [pc, #44]	@ (8000900 <Get_Key+0x360>)
 80008d2:	f001 fb3b 	bl	8001f4c <HAL_GPIO_ReadPin>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1f7      	bne.n	80008cc <Get_Key+0x32c>
		key='D';
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <Get_Key+0x364>)
 80008de:	2244      	movs	r2, #68	@ 0x44
 80008e0:	701a      	strb	r2, [r3, #0]
		break;
 80008e2:	e003      	b.n	80008ec <Get_Key+0x34c>
	while(done)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f47f ae60 	bne.w	80005ac <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008ec:	2120      	movs	r1, #32
 80008ee:	4804      	ldr	r0, [pc, #16]	@ (8000900 <Get_Key+0x360>)
 80008f0:	f001 fb5d 	bl	8001fae <HAL_GPIO_TogglePin>
	return(key);
 80008f4:	4b03      	ldr	r3, [pc, #12]	@ (8000904 <Get_Key+0x364>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40020000 	.word	0x40020000
 8000904:	20000088 	.word	0x20000088

08000908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090c:	f001 f842 	bl	8001994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000910:	f000 f85e 	bl	80009d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000914:	f000 f922 	bl	8000b5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000918:	f000 f8f6 	bl	8000b08 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800091c:	f000 f8c6 	bl	8000aac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
    SSD1306_Init();
 8000920:	f000 fba2 	bl	8001068 <SSD1306_Init>
    SSD1306_GotoXY (0,0);
 8000924:	2100      	movs	r1, #0
 8000926:	2000      	movs	r0, #0
 8000928:	f000 fd08 	bl	800133c <SSD1306_GotoXY>
    //SSD1306_Puts ("Voltage:", &Font_11x18, 1);
    SSD1306_Puts ("Lab 4:", &Font_11x18, 1);
 800092c:	2201      	movs	r2, #1
 800092e:	491a      	ldr	r1, [pc, #104]	@ (8000998 <main+0x90>)
 8000930:	481a      	ldr	r0, [pc, #104]	@ (800099c <main+0x94>)
 8000932:	f000 fd97 	bl	8001464 <SSD1306_Puts>
    SSD1306_GotoXY (0, 30);
 8000936:	211e      	movs	r1, #30
 8000938:	2000      	movs	r0, #0
 800093a:	f000 fcff 	bl	800133c <SSD1306_GotoXY>
    SSD1306_UpdateScreen();
 800093e:	f000 fc57 	bl	80011f0 <SSD1306_UpdateScreen>
    HAL_Delay (500);
 8000942:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000946:	f001 f867 	bl	8001a18 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800094a:	f003 fcdb 	bl	8004304 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800094e:	4a14      	ldr	r2, [pc, #80]	@ (80009a0 <main+0x98>)
 8000950:	2100      	movs	r1, #0
 8000952:	4814      	ldr	r0, [pc, #80]	@ (80009a4 <main+0x9c>)
 8000954:	f003 fd20 	bl	8004398 <osThreadNew>
 8000958:	4603      	mov	r3, r0
 800095a:	4a13      	ldr	r2, [pc, #76]	@ (80009a8 <main+0xa0>)
 800095c:	6013      	str	r3, [r2, #0]

  /* creation of keypadTast */
  keypadTastHandle = osThreadNew(StartKeypadTask, NULL, &keypadTast_attributes);
 800095e:	4a13      	ldr	r2, [pc, #76]	@ (80009ac <main+0xa4>)
 8000960:	2100      	movs	r1, #0
 8000962:	4813      	ldr	r0, [pc, #76]	@ (80009b0 <main+0xa8>)
 8000964:	f003 fd18 	bl	8004398 <osThreadNew>
 8000968:	4603      	mov	r3, r0
 800096a:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <main+0xac>)
 800096c:	6013      	str	r3, [r2, #0]

  /* creation of motionTask */
  motionTaskHandle = osThreadNew(StartMotionSensor, NULL, &motionTask_attributes);
 800096e:	4a12      	ldr	r2, [pc, #72]	@ (80009b8 <main+0xb0>)
 8000970:	2100      	movs	r1, #0
 8000972:	4812      	ldr	r0, [pc, #72]	@ (80009bc <main+0xb4>)
 8000974:	f003 fd10 	bl	8004398 <osThreadNew>
 8000978:	4603      	mov	r3, r0
 800097a:	4a11      	ldr	r2, [pc, #68]	@ (80009c0 <main+0xb8>)
 800097c:	6013      	str	r3, [r2, #0]

  /* creation of outputTask */
  outputTaskHandle = osThreadNew(StartOutputTask, NULL, &outputTask_attributes);
 800097e:	4a11      	ldr	r2, [pc, #68]	@ (80009c4 <main+0xbc>)
 8000980:	2100      	movs	r1, #0
 8000982:	4811      	ldr	r0, [pc, #68]	@ (80009c8 <main+0xc0>)
 8000984:	f003 fd08 	bl	8004398 <osThreadNew>
 8000988:	4603      	mov	r3, r0
 800098a:	4a10      	ldr	r2, [pc, #64]	@ (80009cc <main+0xc4>)
 800098c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800098e:	f003 fcdd 	bl	800434c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000992:	bf00      	nop
 8000994:	e7fd      	b.n	8000992 <main+0x8a>
 8000996:	bf00      	nop
 8000998:	20000000 	.word	0x20000000
 800099c:	08007790 	.word	0x08007790
 80009a0:	08008524 	.word	0x08008524
 80009a4:	08000cb1 	.word	0x08000cb1
 80009a8:	20000128 	.word	0x20000128
 80009ac:	08008548 	.word	0x08008548
 80009b0:	08000cc5 	.word	0x08000cc5
 80009b4:	2000012c 	.word	0x2000012c
 80009b8:	0800856c 	.word	0x0800856c
 80009bc:	08000e7d 	.word	0x08000e7d
 80009c0:	20000130 	.word	0x20000130
 80009c4:	08008590 	.word	0x08008590
 80009c8:	08000f41 	.word	0x08000f41
 80009cc:	20000134 	.word	0x20000134

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b094      	sub	sp, #80	@ 0x50
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	2234      	movs	r2, #52	@ 0x34
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f006 fa32 	bl	8006e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <SystemClock_Config+0xd4>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	4a29      	ldr	r2, [pc, #164]	@ (8000aa4 <SystemClock_Config+0xd4>)
 80009fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a04:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <SystemClock_Config+0xd4>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a10:	2300      	movs	r3, #0
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	4b24      	ldr	r3, [pc, #144]	@ (8000aa8 <SystemClock_Config+0xd8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a1c:	4a22      	ldr	r2, [pc, #136]	@ (8000aa8 <SystemClock_Config+0xd8>)
 8000a1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	4b20      	ldr	r3, [pc, #128]	@ (8000aa8 <SystemClock_Config+0xd8>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a34:	2301      	movs	r3, #1
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a38:	2310      	movs	r3, #16
 8000a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a40:	2300      	movs	r3, #0
 8000a42:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a44:	2310      	movs	r3, #16
 8000a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a48:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a4c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 fc08 	bl	8003274 <HAL_RCC_OscConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a6a:	f000 faf7 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6e:	230f      	movs	r3, #15
 8000a70:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a72:	2302      	movs	r3, #2
 8000a74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 f876 	bl	8002b7c <HAL_RCC_ClockConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a96:	f000 fae1 	bl	800105c <Error_Handler>
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	3750      	adds	r7, #80	@ 0x50
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40007000 	.word	0x40007000

08000aac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ab2:	4a13      	ldr	r2, [pc, #76]	@ (8000b00 <MX_I2C1_Init+0x54>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ab8:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <MX_I2C1_Init+0x58>)
 8000aba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000aca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ace:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000adc:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae8:	4804      	ldr	r0, [pc, #16]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000aea:	f001 fa7b 	bl	8001fe4 <HAL_I2C_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af4:	f000 fab2 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000008c 	.word	0x2000008c
 8000b00:	40005400 	.word	0x40005400
 8000b04:	00061a80 	.word	0x00061a80

08000b08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <MX_USART2_UART_Init+0x50>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b14:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3e:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b40:	f003 f8d8 	bl	8003cf4 <HAL_UART_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b4a:	f000 fa87 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200000e0 	.word	0x200000e0
 8000b58:	40004400 	.word	0x40004400

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b4a      	ldr	r3, [pc, #296]	@ (8000ca0 <MX_GPIO_Init+0x144>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a49      	ldr	r2, [pc, #292]	@ (8000ca0 <MX_GPIO_Init+0x144>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b47      	ldr	r3, [pc, #284]	@ (8000ca0 <MX_GPIO_Init+0x144>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b43      	ldr	r3, [pc, #268]	@ (8000ca0 <MX_GPIO_Init+0x144>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a42      	ldr	r2, [pc, #264]	@ (8000ca0 <MX_GPIO_Init+0x144>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b40      	ldr	r3, [pc, #256]	@ (8000ca0 <MX_GPIO_Init+0x144>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b3c      	ldr	r3, [pc, #240]	@ (8000ca0 <MX_GPIO_Init+0x144>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a3b      	ldr	r2, [pc, #236]	@ (8000ca0 <MX_GPIO_Init+0x144>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b39      	ldr	r3, [pc, #228]	@ (8000ca0 <MX_GPIO_Init+0x144>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b35      	ldr	r3, [pc, #212]	@ (8000ca0 <MX_GPIO_Init+0x144>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a34      	ldr	r2, [pc, #208]	@ (8000ca0 <MX_GPIO_Init+0x144>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b32      	ldr	r3, [pc, #200]	@ (8000ca0 <MX_GPIO_Init+0x144>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2120      	movs	r1, #32
 8000be6:	482f      	ldr	r0, [pc, #188]	@ (8000ca4 <MX_GPIO_Init+0x148>)
 8000be8:	f001 f9c8 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|KC0_Pin|GPIO_PIN_13|GPIO_PIN_14
 8000bec:	2200      	movs	r2, #0
 8000bee:	f246 413c 	movw	r1, #25660	@ 0x643c
 8000bf2:	482d      	ldr	r0, [pc, #180]	@ (8000ca8 <MX_GPIO_Init+0x14c>)
 8000bf4:	f001 f9c2 	bl	8001f7c <HAL_GPIO_WritePin>
                          |KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bf8:	2320      	movs	r3, #32
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4825      	ldr	r0, [pc, #148]	@ (8000ca4 <MX_GPIO_Init+0x148>)
 8000c10:	f001 f808 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 KC0_Pin PB13 PB14
                           KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|KC0_Pin|GPIO_PIN_13|GPIO_PIN_14
 8000c14:	f246 433c 	movw	r3, #25660	@ 0x643c
 8000c18:	617b      	str	r3, [r7, #20]
                          |KC3_Pin|KC1_Pin|KC2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481e      	ldr	r0, [pc, #120]	@ (8000ca8 <MX_GPIO_Init+0x14c>)
 8000c2e:	f000 fff9 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4818      	ldr	r0, [pc, #96]	@ (8000ca8 <MX_GPIO_Init+0x14c>)
 8000c48:	f000 ffec 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000c4c:	2380      	movs	r3, #128	@ 0x80
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c54:	2302      	movs	r3, #2
 8000c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4813      	ldr	r0, [pc, #76]	@ (8000cac <MX_GPIO_Init+0x150>)
 8000c60:	f000 ffe0 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000c64:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	480a      	ldr	r0, [pc, #40]	@ (8000ca4 <MX_GPIO_Init+0x148>)
 8000c7a:	f000 ffd3 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000c7e:	2340      	movs	r3, #64	@ 0x40
 8000c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <MX_GPIO_Init+0x14c>)
 8000c92:	f000 ffc7 	bl	8001c24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	@ 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000
 8000ca8:	40020400 	.word	0x40020400
 8000cac:	40020800 	.word	0x40020800

08000cb0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8000cb8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cbc:	f003 fbfe 	bl	80044bc <osDelay>
 8000cc0:	e7fa      	b.n	8000cb8 <StartDefaultTask+0x8>
	...

08000cc4 <StartKeypadTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKeypadTask */
void StartKeypadTask(void *argument)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKeypadTask */
  /* Infinite loop */
  for(;;)
  {
	 key = Get_Key();
 8000ccc:	f7ff fc68 	bl	80005a0 <Get_Key>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b5f      	ldr	r3, [pc, #380]	@ (8000e54 <StartKeypadTask+0x190>)
 8000cd6:	701a      	strb	r2, [r3, #0]


	 if (armed == 0) {
 8000cd8:	4b5f      	ldr	r3, [pc, #380]	@ (8000e58 <StartKeypadTask+0x194>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d12b      	bne.n	8000d38 <StartKeypadTask+0x74>

		 if (key == '*') { // Submitted
 8000ce0:	4b5c      	ldr	r3, [pc, #368]	@ (8000e54 <StartKeypadTask+0x190>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ce6:	d116      	bne.n	8000d16 <StartKeypadTask+0x52>
			 wipescreenflag = 1;
 8000ce8:	4b5c      	ldr	r3, [pc, #368]	@ (8000e5c <StartKeypadTask+0x198>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]
			if (masterlen >= 4 && masterlen <= 6) {
 8000cee:	4b5c      	ldr	r3, [pc, #368]	@ (8000e60 <StartKeypadTask+0x19c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	f340 80ac 	ble.w	8000e50 <StartKeypadTask+0x18c>
 8000cf8:	4b59      	ldr	r3, [pc, #356]	@ (8000e60 <StartKeypadTask+0x19c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b06      	cmp	r3, #6
 8000cfe:	f300 80a7 	bgt.w	8000e50 <StartKeypadTask+0x18c>
				armed = 1; // arm the system
 8000d02:	4b55      	ldr	r3, [pc, #340]	@ (8000e58 <StartKeypadTask+0x194>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	601a      	str	r2, [r3, #0]

				//Allow grace period for user to walk away
				alarmgraceperiod = 5;
 8000d08:	4b56      	ldr	r3, [pc, #344]	@ (8000e64 <StartKeypadTask+0x1a0>)
 8000d0a:	2205      	movs	r2, #5
 8000d0c:	601a      	str	r2, [r3, #0]
				alarmgraceflag = 1;
 8000d0e:	4b56      	ldr	r3, [pc, #344]	@ (8000e68 <StartKeypadTask+0x1a4>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	e098      	b.n	8000e48 <StartKeypadTask+0x184>
			} else {
				continue;
			}
		 } else if (masterlen < 6) {
 8000d16:	4b52      	ldr	r3, [pc, #328]	@ (8000e60 <StartKeypadTask+0x19c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b05      	cmp	r3, #5
 8000d1c:	f300 8094 	bgt.w	8000e48 <StartKeypadTask+0x184>
			masterkey[masterlen] = key;
 8000d20:	4b4f      	ldr	r3, [pc, #316]	@ (8000e60 <StartKeypadTask+0x19c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a4b      	ldr	r2, [pc, #300]	@ (8000e54 <StartKeypadTask+0x190>)
 8000d26:	7811      	ldrb	r1, [r2, #0]
 8000d28:	4a50      	ldr	r2, [pc, #320]	@ (8000e6c <StartKeypadTask+0x1a8>)
 8000d2a:	54d1      	strb	r1, [r2, r3]
			masterlen++;
 8000d2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000e60 <StartKeypadTask+0x19c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	4a4b      	ldr	r2, [pc, #300]	@ (8000e60 <StartKeypadTask+0x19c>)
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e087      	b.n	8000e48 <StartKeypadTask+0x184>
		 }

	 } else {

		 if (key == '*') { // Submitted
 8000d38:	4b46      	ldr	r3, [pc, #280]	@ (8000e54 <StartKeypadTask+0x190>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d3e:	d16f      	bne.n	8000e20 <StartKeypadTask+0x15c>
			 wipescreenflag = 1;
 8000d40:	4b46      	ldr	r3, [pc, #280]	@ (8000e5c <StartKeypadTask+0x198>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
			 int match = 1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	61fb      	str	r3, [r7, #28]
			 if (masterlen != holdlen) {
 8000d4a:	4b45      	ldr	r3, [pc, #276]	@ (8000e60 <StartKeypadTask+0x19c>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4b48      	ldr	r3, [pc, #288]	@ (8000e70 <StartKeypadTask+0x1ac>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d002      	beq.n	8000d5c <StartKeypadTask+0x98>
				 match = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
 8000d5a:	e016      	b.n	8000d8a <StartKeypadTask+0xc6>
			 } else {
				 for (int i=0;i<masterlen;i++){
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
 8000d60:	e00e      	b.n	8000d80 <StartKeypadTask+0xbc>
					 if (masterkey[i] != hold[i]) {
 8000d62:	4a42      	ldr	r2, [pc, #264]	@ (8000e6c <StartKeypadTask+0x1a8>)
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	4413      	add	r3, r2
 8000d68:	781a      	ldrb	r2, [r3, #0]
 8000d6a:	4942      	ldr	r1, [pc, #264]	@ (8000e74 <StartKeypadTask+0x1b0>)
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	440b      	add	r3, r1
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d001      	beq.n	8000d7a <StartKeypadTask+0xb6>
						 match = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
				 for (int i=0;i<masterlen;i++){
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	61bb      	str	r3, [r7, #24]
 8000d80:	4b37      	ldr	r3, [pc, #220]	@ (8000e60 <StartKeypadTask+0x19c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	dbeb      	blt.n	8000d62 <StartKeypadTask+0x9e>
					 }
				 }
			 }

			 if (match == 1) {
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d12e      	bne.n	8000dee <StartKeypadTask+0x12a>
				 armed = 0;
 8000d90:	4b31      	ldr	r3, [pc, #196]	@ (8000e58 <StartKeypadTask+0x194>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
				 //Clear master
				 for (int i=0;i<masterlen;i++){
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	e007      	b.n	8000dac <StartKeypadTask+0xe8>
					 masterkey[i] = ' ';
 8000d9c:	4a33      	ldr	r2, [pc, #204]	@ (8000e6c <StartKeypadTask+0x1a8>)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	4413      	add	r3, r2
 8000da2:	2220      	movs	r2, #32
 8000da4:	701a      	strb	r2, [r3, #0]
				 for (int i=0;i<masterlen;i++){
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <StartKeypadTask+0x19c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	dbf2      	blt.n	8000d9c <StartKeypadTask+0xd8>
				 }
				 masterlen = 0;
 8000db6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e60 <StartKeypadTask+0x19c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
				 //Clear hold
				 for (int i=0;i<holdlen;i++){
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	e00c      	b.n	8000ddc <StartKeypadTask+0x118>
					 hold[i] = ' ';
 8000dc2:	4a2c      	ldr	r2, [pc, #176]	@ (8000e74 <StartKeypadTask+0x1b0>)
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	2220      	movs	r2, #32
 8000dca:	701a      	strb	r2, [r3, #0]
					 asterisk[i] = ' ';
 8000dcc:	4a2a      	ldr	r2, [pc, #168]	@ (8000e78 <StartKeypadTask+0x1b4>)
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	2220      	movs	r2, #32
 8000dd4:	701a      	strb	r2, [r3, #0]
				 for (int i=0;i<holdlen;i++){
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	4b24      	ldr	r3, [pc, #144]	@ (8000e70 <StartKeypadTask+0x1ac>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	dbed      	blt.n	8000dc2 <StartKeypadTask+0xfe>
				 }
				 holdlen = 0;
 8000de6:	4b22      	ldr	r3, [pc, #136]	@ (8000e70 <StartKeypadTask+0x1ac>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	e02c      	b.n	8000e48 <StartKeypadTask+0x184>

			 } else {
				 //Clear hold
				 for (int i=0;i<holdlen;i++){
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	e00c      	b.n	8000e0e <StartKeypadTask+0x14a>
					 hold[i] = ' ';
 8000df4:	4a1f      	ldr	r2, [pc, #124]	@ (8000e74 <StartKeypadTask+0x1b0>)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4413      	add	r3, r2
 8000dfa:	2220      	movs	r2, #32
 8000dfc:	701a      	strb	r2, [r3, #0]
					 asterisk[i] = ' ';
 8000dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8000e78 <StartKeypadTask+0x1b4>)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	2220      	movs	r2, #32
 8000e06:	701a      	strb	r2, [r3, #0]
				 for (int i=0;i<holdlen;i++){
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <StartKeypadTask+0x1ac>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbed      	blt.n	8000df4 <StartKeypadTask+0x130>
				 }
				 holdlen = 0;
 8000e18:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <StartKeypadTask+0x1ac>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e013      	b.n	8000e48 <StartKeypadTask+0x184>
			 }
		 } else if (holdlen < 6) {
 8000e20:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <StartKeypadTask+0x1ac>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b05      	cmp	r3, #5
 8000e26:	dc0f      	bgt.n	8000e48 <StartKeypadTask+0x184>
			 hold[holdlen] = key;
 8000e28:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <StartKeypadTask+0x1ac>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a09      	ldr	r2, [pc, #36]	@ (8000e54 <StartKeypadTask+0x190>)
 8000e2e:	7811      	ldrb	r1, [r2, #0]
 8000e30:	4a10      	ldr	r2, [pc, #64]	@ (8000e74 <StartKeypadTask+0x1b0>)
 8000e32:	54d1      	strb	r1, [r2, r3]
			 asterisk[holdlen] = '*';
 8000e34:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <StartKeypadTask+0x1ac>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0f      	ldr	r2, [pc, #60]	@ (8000e78 <StartKeypadTask+0x1b4>)
 8000e3a:	212a      	movs	r1, #42	@ 0x2a
 8000e3c:	54d1      	strb	r1, [r2, r3]
			 holdlen++;
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <StartKeypadTask+0x1ac>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <StartKeypadTask+0x1ac>)
 8000e46:	6013      	str	r3, [r2, #0]
		 }
	 }

	 HAL_Delay(100);
 8000e48:	2064      	movs	r0, #100	@ 0x64
 8000e4a:	f000 fde5 	bl	8001a18 <HAL_Delay>
 8000e4e:	e73d      	b.n	8000ccc <StartKeypadTask+0x8>
				continue;
 8000e50:	bf00      	nop
	 key = Get_Key();
 8000e52:	e73b      	b.n	8000ccc <StartKeypadTask+0x8>
 8000e54:	20000088 	.word	0x20000088
 8000e58:	20000168 	.word	0x20000168
 8000e5c:	20000164 	.word	0x20000164
 8000e60:	20000140 	.word	0x20000140
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000160 	.word	0x20000160
 8000e6c:	20000138 	.word	0x20000138
 8000e70:	20000154 	.word	0x20000154
 8000e74:	2000014c 	.word	0x2000014c
 8000e78:	20000144 	.word	0x20000144

08000e7c <StartMotionSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotionSensor */
void StartMotionSensor(void *argument)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotionSensor */
  /* Infinite loop */
  for(;;)
  {

	  if (armed == 1) {
 8000e84:	4b29      	ldr	r3, [pc, #164]	@ (8000f2c <StartMotionSensor+0xb0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d144      	bne.n	8000f16 <StartMotionSensor+0x9a>

		 //Arming grace period
		 if (alarmgraceflag == 1) {
 8000e8c:	4b28      	ldr	r3, [pc, #160]	@ (8000f30 <StartMotionSensor+0xb4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d111      	bne.n	8000eb8 <StartMotionSensor+0x3c>
			if (alarmgraceperiod == 0) {
 8000e94:	4b27      	ldr	r3, [pc, #156]	@ (8000f34 <StartMotionSensor+0xb8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d103      	bne.n	8000ea4 <StartMotionSensor+0x28>
				alarmgraceflag = 0;
 8000e9c:	4b24      	ldr	r3, [pc, #144]	@ (8000f30 <StartMotionSensor+0xb4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
			} else {
				HAL_Delay(1000);
				alarmgraceperiod--;
			}

			continue;
 8000ea2:	e041      	b.n	8000f28 <StartMotionSensor+0xac>
				HAL_Delay(1000);
 8000ea4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ea8:	f000 fdb6 	bl	8001a18 <HAL_Delay>
				alarmgraceperiod--;
 8000eac:	4b21      	ldr	r3, [pc, #132]	@ (8000f34 <StartMotionSensor+0xb8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	4a20      	ldr	r2, [pc, #128]	@ (8000f34 <StartMotionSensor+0xb8>)
 8000eb4:	6013      	str	r3, [r2, #0]
			continue;
 8000eb6:	e037      	b.n	8000f28 <StartMotionSensor+0xac>
		}

		if (alarmgraceflag == 0) {
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <StartMotionSensor+0xb4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d112      	bne.n	8000ee6 <StartMotionSensor+0x6a>
			motion = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8000ec0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ec4:	481c      	ldr	r0, [pc, #112]	@ (8000f38 <StartMotionSensor+0xbc>)
 8000ec6:	f001 f841 	bl	8001f4c <HAL_GPIO_ReadPin>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <StartMotionSensor+0xc0>)
 8000ed0:	601a      	str	r2, [r3, #0]
			if (motion == 1) { // Detected motion
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <StartMotionSensor+0xc0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d105      	bne.n	8000ee6 <StartMotionSensor+0x6a>
				alarmgraceperiod = 5;
 8000eda:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <StartMotionSensor+0xb8>)
 8000edc:	2205      	movs	r2, #5
 8000ede:	601a      	str	r2, [r3, #0]
				alarmgraceflag = 2;
 8000ee0:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <StartMotionSensor+0xb4>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	601a      	str	r2, [r3, #0]
			}

		}

		if (alarmgraceflag == 2) {
 8000ee6:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <StartMotionSensor+0xb4>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d113      	bne.n	8000f16 <StartMotionSensor+0x9a>
			//Detection grace period
			if (alarmgraceperiod == 0) {
 8000eee:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <StartMotionSensor+0xb8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d105      	bne.n	8000f02 <StartMotionSensor+0x86>
				//Activate buzzer
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2104      	movs	r1, #4
 8000efa:	480f      	ldr	r0, [pc, #60]	@ (8000f38 <StartMotionSensor+0xbc>)
 8000efc:	f001 f83e 	bl	8001f7c <HAL_GPIO_WritePin>
			} else {
				HAL_Delay(1000);
				alarmgraceperiod--;
			}

			continue;
 8000f00:	e012      	b.n	8000f28 <StartMotionSensor+0xac>
				HAL_Delay(1000);
 8000f02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f06:	f000 fd87 	bl	8001a18 <HAL_Delay>
				alarmgraceperiod--;
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <StartMotionSensor+0xb8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	4a08      	ldr	r2, [pc, #32]	@ (8000f34 <StartMotionSensor+0xb8>)
 8000f12:	6013      	str	r3, [r2, #0]
			continue;
 8000f14:	e008      	b.n	8000f28 <StartMotionSensor+0xac>
		}

    }

    //Deactivate buzzer
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2104      	movs	r1, #4
 8000f1a:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <StartMotionSensor+0xbc>)
 8000f1c:	f001 f82e 	bl	8001f7c <HAL_GPIO_WritePin>

	HAL_Delay(500);
 8000f20:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f24:	f000 fd78 	bl	8001a18 <HAL_Delay>
	  if (armed == 1) {
 8000f28:	e7ac      	b.n	8000e84 <StartMotionSensor+0x8>
 8000f2a:	bf00      	nop
 8000f2c:	20000168 	.word	0x20000168
 8000f30:	20000160 	.word	0x20000160
 8000f34:	20000008 	.word	0x20000008
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	20000158 	.word	0x20000158

08000f40 <StartOutputTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOutputTask */
void StartOutputTask(void *argument)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOutputTask */
  /* Infinite loop */
  for(;;)
  {

	  if (wipescreenflag == 1) {
 8000f48:	4b30      	ldr	r3, [pc, #192]	@ (800100c <StartOutputTask+0xcc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d104      	bne.n	8000f5a <StartOutputTask+0x1a>
		  SSD1306_Clear();
 8000f50:	f000 faad 	bl	80014ae <SSD1306_Clear>
		  wipescreenflag = 0;
 8000f54:	4b2d      	ldr	r3, [pc, #180]	@ (800100c <StartOutputTask+0xcc>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
	  }

	if (armed == 0) {
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <StartOutputTask+0xd0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d120      	bne.n	8000fa4 <StartOutputTask+0x64>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f68:	482a      	ldr	r0, [pc, #168]	@ (8001014 <StartOutputTask+0xd4>)
 8000f6a:	f001 f807 	bl	8001f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f74:	4827      	ldr	r0, [pc, #156]	@ (8001014 <StartOutputTask+0xd4>)
 8000f76:	f001 f801 	bl	8001f7c <HAL_GPIO_WritePin>

		SSD1306_GotoXY(0,0);
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 f9dd 	bl	800133c <SSD1306_GotoXY>
		SSD1306_Puts("NOT ARMED", &Font_11x18,1);
 8000f82:	2201      	movs	r2, #1
 8000f84:	4924      	ldr	r1, [pc, #144]	@ (8001018 <StartOutputTask+0xd8>)
 8000f86:	4825      	ldr	r0, [pc, #148]	@ (800101c <StartOutputTask+0xdc>)
 8000f88:	f000 fa6c 	bl	8001464 <SSD1306_Puts>
		SSD1306_GotoXY(0,30);
 8000f8c:	211e      	movs	r1, #30
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f000 f9d4 	bl	800133c <SSD1306_GotoXY>
		SSD1306_Puts(masterkey, &Font_11x18,1);
 8000f94:	2201      	movs	r2, #1
 8000f96:	4920      	ldr	r1, [pc, #128]	@ (8001018 <StartOutputTask+0xd8>)
 8000f98:	4821      	ldr	r0, [pc, #132]	@ (8001020 <StartOutputTask+0xe0>)
 8000f9a:	f000 fa63 	bl	8001464 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000f9e:	f000 f927 	bl	80011f0 <SSD1306_UpdateScreen>
 8000fa2:	e02f      	b.n	8001004 <StartOutputTask+0xc4>

	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000faa:	481a      	ldr	r0, [pc, #104]	@ (8001014 <StartOutputTask+0xd4>)
 8000fac:	f000 ffe6 	bl	8001f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fb6:	4817      	ldr	r0, [pc, #92]	@ (8001014 <StartOutputTask+0xd4>)
 8000fb8:	f000 ffe0 	bl	8001f7c <HAL_GPIO_WritePin>

		SSD1306_GotoXY(0,0);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 f9bc 	bl	800133c <SSD1306_GotoXY>
		SSD1306_Puts("ARMED", &Font_11x18,1);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	4914      	ldr	r1, [pc, #80]	@ (8001018 <StartOutputTask+0xd8>)
 8000fc8:	4816      	ldr	r0, [pc, #88]	@ (8001024 <StartOutputTask+0xe4>)
 8000fca:	f000 fa4b 	bl	8001464 <SSD1306_Puts>
		SSD1306_GotoXY(0,30);
 8000fce:	211e      	movs	r1, #30
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f000 f9b3 	bl	800133c <SSD1306_GotoXY>
		SSD1306_Puts(asterisk, &Font_11x18,1);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	490f      	ldr	r1, [pc, #60]	@ (8001018 <StartOutputTask+0xd8>)
 8000fda:	4813      	ldr	r0, [pc, #76]	@ (8001028 <StartOutputTask+0xe8>)
 8000fdc:	f000 fa42 	bl	8001464 <SSD1306_Puts>
		SSD1306_GotoXY(100,30);
 8000fe0:	211e      	movs	r1, #30
 8000fe2:	2064      	movs	r0, #100	@ 0x64
 8000fe4:	f000 f9aa 	bl	800133c <SSD1306_GotoXY>
		sprintf(alarmgracestring,"%d", alarmgraceperiod);
 8000fe8:	4b10      	ldr	r3, [pc, #64]	@ (800102c <StartOutputTask+0xec>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4910      	ldr	r1, [pc, #64]	@ (8001030 <StartOutputTask+0xf0>)
 8000ff0:	4810      	ldr	r0, [pc, #64]	@ (8001034 <StartOutputTask+0xf4>)
 8000ff2:	f005 ff09 	bl	8006e08 <siprintf>
		SSD1306_Puts(alarmgracestring, &Font_11x18,1);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4907      	ldr	r1, [pc, #28]	@ (8001018 <StartOutputTask+0xd8>)
 8000ffa:	480e      	ldr	r0, [pc, #56]	@ (8001034 <StartOutputTask+0xf4>)
 8000ffc:	f000 fa32 	bl	8001464 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001000:	f000 f8f6 	bl	80011f0 <SSD1306_UpdateScreen>

	}

	HAL_Delay(250);
 8001004:	20fa      	movs	r0, #250	@ 0xfa
 8001006:	f000 fd07 	bl	8001a18 <HAL_Delay>
	  if (wipescreenflag == 1) {
 800100a:	e79d      	b.n	8000f48 <StartOutputTask+0x8>
 800100c:	20000164 	.word	0x20000164
 8001010:	20000168 	.word	0x20000168
 8001014:	40020400 	.word	0x40020400
 8001018:	20000000 	.word	0x20000000
 800101c:	08007798 	.word	0x08007798
 8001020:	20000138 	.word	0x20000138
 8001024:	080077a4 	.word	0x080077a4
 8001028:	20000144 	.word	0x20000144
 800102c:	20000008 	.word	0x20000008
 8001030:	080077ac 	.word	0x080077ac
 8001034:	2000015c 	.word	0x2000015c

08001038 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d101      	bne.n	800104e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800104a:	f000 fcc5 	bl	80019d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40001000 	.word	0x40001000

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <Error_Handler+0x8>

08001068 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800106e:	f000 fa27 	bl	80014c0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001072:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001076:	2201      	movs	r2, #1
 8001078:	2178      	movs	r1, #120	@ 0x78
 800107a:	485b      	ldr	r0, [pc, #364]	@ (80011e8 <SSD1306_Init+0x180>)
 800107c:	f001 f9f4 	bl	8002468 <HAL_I2C_IsDeviceReady>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001086:	2300      	movs	r3, #0
 8001088:	e0a9      	b.n	80011de <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800108a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800108e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001090:	e002      	b.n	8001098 <SSD1306_Init+0x30>
		p--;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3b01      	subs	r3, #1
 8001096:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f9      	bne.n	8001092 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800109e:	22ae      	movs	r2, #174	@ 0xae
 80010a0:	2100      	movs	r1, #0
 80010a2:	2078      	movs	r0, #120	@ 0x78
 80010a4:	f000 fa88 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80010a8:	2220      	movs	r2, #32
 80010aa:	2100      	movs	r1, #0
 80010ac:	2078      	movs	r0, #120	@ 0x78
 80010ae:	f000 fa83 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80010b2:	2210      	movs	r2, #16
 80010b4:	2100      	movs	r1, #0
 80010b6:	2078      	movs	r0, #120	@ 0x78
 80010b8:	f000 fa7e 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010bc:	22b0      	movs	r2, #176	@ 0xb0
 80010be:	2100      	movs	r1, #0
 80010c0:	2078      	movs	r0, #120	@ 0x78
 80010c2:	f000 fa79 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80010c6:	22c8      	movs	r2, #200	@ 0xc8
 80010c8:	2100      	movs	r1, #0
 80010ca:	2078      	movs	r0, #120	@ 0x78
 80010cc:	f000 fa74 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80010d0:	2200      	movs	r2, #0
 80010d2:	2100      	movs	r1, #0
 80010d4:	2078      	movs	r0, #120	@ 0x78
 80010d6:	f000 fa6f 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80010da:	2210      	movs	r2, #16
 80010dc:	2100      	movs	r1, #0
 80010de:	2078      	movs	r0, #120	@ 0x78
 80010e0:	f000 fa6a 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80010e4:	2240      	movs	r2, #64	@ 0x40
 80010e6:	2100      	movs	r1, #0
 80010e8:	2078      	movs	r0, #120	@ 0x78
 80010ea:	f000 fa65 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80010ee:	2281      	movs	r2, #129	@ 0x81
 80010f0:	2100      	movs	r1, #0
 80010f2:	2078      	movs	r0, #120	@ 0x78
 80010f4:	f000 fa60 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80010f8:	22ff      	movs	r2, #255	@ 0xff
 80010fa:	2100      	movs	r1, #0
 80010fc:	2078      	movs	r0, #120	@ 0x78
 80010fe:	f000 fa5b 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001102:	22a1      	movs	r2, #161	@ 0xa1
 8001104:	2100      	movs	r1, #0
 8001106:	2078      	movs	r0, #120	@ 0x78
 8001108:	f000 fa56 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800110c:	22a6      	movs	r2, #166	@ 0xa6
 800110e:	2100      	movs	r1, #0
 8001110:	2078      	movs	r0, #120	@ 0x78
 8001112:	f000 fa51 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001116:	22a8      	movs	r2, #168	@ 0xa8
 8001118:	2100      	movs	r1, #0
 800111a:	2078      	movs	r0, #120	@ 0x78
 800111c:	f000 fa4c 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001120:	223f      	movs	r2, #63	@ 0x3f
 8001122:	2100      	movs	r1, #0
 8001124:	2078      	movs	r0, #120	@ 0x78
 8001126:	f000 fa47 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800112a:	22a4      	movs	r2, #164	@ 0xa4
 800112c:	2100      	movs	r1, #0
 800112e:	2078      	movs	r0, #120	@ 0x78
 8001130:	f000 fa42 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001134:	22d3      	movs	r2, #211	@ 0xd3
 8001136:	2100      	movs	r1, #0
 8001138:	2078      	movs	r0, #120	@ 0x78
 800113a:	f000 fa3d 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	2078      	movs	r0, #120	@ 0x78
 8001144:	f000 fa38 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001148:	22d5      	movs	r2, #213	@ 0xd5
 800114a:	2100      	movs	r1, #0
 800114c:	2078      	movs	r0, #120	@ 0x78
 800114e:	f000 fa33 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001152:	22f0      	movs	r2, #240	@ 0xf0
 8001154:	2100      	movs	r1, #0
 8001156:	2078      	movs	r0, #120	@ 0x78
 8001158:	f000 fa2e 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800115c:	22d9      	movs	r2, #217	@ 0xd9
 800115e:	2100      	movs	r1, #0
 8001160:	2078      	movs	r0, #120	@ 0x78
 8001162:	f000 fa29 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001166:	2222      	movs	r2, #34	@ 0x22
 8001168:	2100      	movs	r1, #0
 800116a:	2078      	movs	r0, #120	@ 0x78
 800116c:	f000 fa24 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001170:	22da      	movs	r2, #218	@ 0xda
 8001172:	2100      	movs	r1, #0
 8001174:	2078      	movs	r0, #120	@ 0x78
 8001176:	f000 fa1f 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800117a:	2212      	movs	r2, #18
 800117c:	2100      	movs	r1, #0
 800117e:	2078      	movs	r0, #120	@ 0x78
 8001180:	f000 fa1a 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001184:	22db      	movs	r2, #219	@ 0xdb
 8001186:	2100      	movs	r1, #0
 8001188:	2078      	movs	r0, #120	@ 0x78
 800118a:	f000 fa15 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800118e:	2220      	movs	r2, #32
 8001190:	2100      	movs	r1, #0
 8001192:	2078      	movs	r0, #120	@ 0x78
 8001194:	f000 fa10 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001198:	228d      	movs	r2, #141	@ 0x8d
 800119a:	2100      	movs	r1, #0
 800119c:	2078      	movs	r0, #120	@ 0x78
 800119e:	f000 fa0b 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80011a2:	2214      	movs	r2, #20
 80011a4:	2100      	movs	r1, #0
 80011a6:	2078      	movs	r0, #120	@ 0x78
 80011a8:	f000 fa06 	bl	80015b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80011ac:	22af      	movs	r2, #175	@ 0xaf
 80011ae:	2100      	movs	r1, #0
 80011b0:	2078      	movs	r0, #120	@ 0x78
 80011b2:	f000 fa01 	bl	80015b8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80011b6:	222e      	movs	r2, #46	@ 0x2e
 80011b8:	2100      	movs	r1, #0
 80011ba:	2078      	movs	r0, #120	@ 0x78
 80011bc:	f000 f9fc 	bl	80015b8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 f843 	bl	800124c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80011c6:	f000 f813 	bl	80011f0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80011ca:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <SSD1306_Init+0x184>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <SSD1306_Init+0x184>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80011d6:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <SSD1306_Init+0x184>)
 80011d8:	2201      	movs	r2, #1
 80011da:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80011dc:	2301      	movs	r3, #1
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000008c 	.word	0x2000008c
 80011ec:	2000056c 	.word	0x2000056c

080011f0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	e01d      	b.n	8001238 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	3b50      	subs	r3, #80	@ 0x50
 8001200:	b2db      	uxtb	r3, r3
 8001202:	461a      	mov	r2, r3
 8001204:	2100      	movs	r1, #0
 8001206:	2078      	movs	r0, #120	@ 0x78
 8001208:	f000 f9d6 	bl	80015b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2078      	movs	r0, #120	@ 0x78
 8001212:	f000 f9d1 	bl	80015b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001216:	2210      	movs	r2, #16
 8001218:	2100      	movs	r1, #0
 800121a:	2078      	movs	r0, #120	@ 0x78
 800121c:	f000 f9cc 	bl	80015b8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	01db      	lsls	r3, r3, #7
 8001224:	4a08      	ldr	r2, [pc, #32]	@ (8001248 <SSD1306_UpdateScreen+0x58>)
 8001226:	441a      	add	r2, r3
 8001228:	2380      	movs	r3, #128	@ 0x80
 800122a:	2140      	movs	r1, #64	@ 0x40
 800122c:	2078      	movs	r0, #120	@ 0x78
 800122e:	f000 f95d 	bl	80014ec <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	3301      	adds	r3, #1
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b07      	cmp	r3, #7
 800123c:	d9de      	bls.n	80011fc <SSD1306_UpdateScreen+0xc>
	}
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000016c 	.word	0x2000016c

0800124c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <SSD1306_Fill+0x14>
 800125c:	2300      	movs	r3, #0
 800125e:	e000      	b.n	8001262 <SSD1306_Fill+0x16>
 8001260:	23ff      	movs	r3, #255	@ 0xff
 8001262:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001266:	4619      	mov	r1, r3
 8001268:	4803      	ldr	r0, [pc, #12]	@ (8001278 <SSD1306_Fill+0x2c>)
 800126a:	f005 fded 	bl	8006e48 <memset>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000016c 	.word	0x2000016c

0800127c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	80fb      	strh	r3, [r7, #6]
 8001286:	460b      	mov	r3, r1
 8001288:	80bb      	strh	r3, [r7, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	70fb      	strb	r3, [r7, #3]
	if (
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	2b7f      	cmp	r3, #127	@ 0x7f
 8001292:	d848      	bhi.n	8001326 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001294:	88bb      	ldrh	r3, [r7, #4]
 8001296:	2b3f      	cmp	r3, #63	@ 0x3f
 8001298:	d845      	bhi.n	8001326 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800129a:	4b26      	ldr	r3, [pc, #152]	@ (8001334 <SSD1306_DrawPixel+0xb8>)
 800129c:	791b      	ldrb	r3, [r3, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d006      	beq.n	80012b0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bf0c      	ite	eq
 80012a8:	2301      	moveq	r3, #1
 80012aa:	2300      	movne	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d11a      	bne.n	80012ec <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012b6:	88fa      	ldrh	r2, [r7, #6]
 80012b8:	88bb      	ldrh	r3, [r7, #4]
 80012ba:	08db      	lsrs	r3, r3, #3
 80012bc:	b298      	uxth	r0, r3
 80012be:	4603      	mov	r3, r0
 80012c0:	01db      	lsls	r3, r3, #7
 80012c2:	4413      	add	r3, r2
 80012c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001338 <SSD1306_DrawPixel+0xbc>)
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	b25a      	sxtb	r2, r3
 80012ca:	88bb      	ldrh	r3, [r7, #4]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	2101      	movs	r1, #1
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b259      	sxtb	r1, r3
 80012dc:	88fa      	ldrh	r2, [r7, #6]
 80012de:	4603      	mov	r3, r0
 80012e0:	01db      	lsls	r3, r3, #7
 80012e2:	4413      	add	r3, r2
 80012e4:	b2c9      	uxtb	r1, r1
 80012e6:	4a14      	ldr	r2, [pc, #80]	@ (8001338 <SSD1306_DrawPixel+0xbc>)
 80012e8:	54d1      	strb	r1, [r2, r3]
 80012ea:	e01d      	b.n	8001328 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012ec:	88fa      	ldrh	r2, [r7, #6]
 80012ee:	88bb      	ldrh	r3, [r7, #4]
 80012f0:	08db      	lsrs	r3, r3, #3
 80012f2:	b298      	uxth	r0, r3
 80012f4:	4603      	mov	r3, r0
 80012f6:	01db      	lsls	r3, r3, #7
 80012f8:	4413      	add	r3, r2
 80012fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001338 <SSD1306_DrawPixel+0xbc>)
 80012fc:	5cd3      	ldrb	r3, [r2, r3]
 80012fe:	b25a      	sxtb	r2, r3
 8001300:	88bb      	ldrh	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	2101      	movs	r1, #1
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	b25b      	sxtb	r3, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	b25b      	sxtb	r3, r3
 8001312:	4013      	ands	r3, r2
 8001314:	b259      	sxtb	r1, r3
 8001316:	88fa      	ldrh	r2, [r7, #6]
 8001318:	4603      	mov	r3, r0
 800131a:	01db      	lsls	r3, r3, #7
 800131c:	4413      	add	r3, r2
 800131e:	b2c9      	uxtb	r1, r1
 8001320:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <SSD1306_DrawPixel+0xbc>)
 8001322:	54d1      	strb	r1, [r2, r3]
 8001324:	e000      	b.n	8001328 <SSD1306_DrawPixel+0xac>
		return;
 8001326:	bf00      	nop
	}
}
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	2000056c 	.word	0x2000056c
 8001338:	2000016c 	.word	0x2000016c

0800133c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	460a      	mov	r2, r1
 8001346:	80fb      	strh	r3, [r7, #6]
 8001348:	4613      	mov	r3, r2
 800134a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800134c:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <SSD1306_GotoXY+0x28>)
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001352:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <SSD1306_GotoXY+0x28>)
 8001354:	88bb      	ldrh	r3, [r7, #4]
 8001356:	8053      	strh	r3, [r2, #2]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	2000056c 	.word	0x2000056c

08001368 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	4613      	mov	r3, r2
 8001376:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001378:	4b39      	ldr	r3, [pc, #228]	@ (8001460 <SSD1306_Putc+0xf8>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
	if (
 8001384:	2b7f      	cmp	r3, #127	@ 0x7f
 8001386:	dc07      	bgt.n	8001398 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001388:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <SSD1306_Putc+0xf8>)
 800138a:	885b      	ldrh	r3, [r3, #2]
 800138c:	461a      	mov	r2, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	785b      	ldrb	r3, [r3, #1]
 8001392:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001394:	2b3f      	cmp	r3, #63	@ 0x3f
 8001396:	dd01      	ble.n	800139c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001398:	2300      	movs	r3, #0
 800139a:	e05d      	b.n	8001458 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e04b      	b.n	800143a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	3b20      	subs	r3, #32
 80013aa:	6839      	ldr	r1, [r7, #0]
 80013ac:	7849      	ldrb	r1, [r1, #1]
 80013ae:	fb01 f303 	mul.w	r3, r1, r3
 80013b2:	4619      	mov	r1, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	440b      	add	r3, r1
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	e030      	b.n	8001428 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d010      	beq.n	80013f8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013d6:	4b22      	ldr	r3, [pc, #136]	@ (8001460 <SSD1306_Putc+0xf8>)
 80013d8:	881a      	ldrh	r2, [r3, #0]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	4413      	add	r3, r2
 80013e0:	b298      	uxth	r0, r3
 80013e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <SSD1306_Putc+0xf8>)
 80013e4:	885a      	ldrh	r2, [r3, #2]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4413      	add	r3, r2
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	79ba      	ldrb	r2, [r7, #6]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7ff ff43 	bl	800127c <SSD1306_DrawPixel>
 80013f6:	e014      	b.n	8001422 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80013f8:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <SSD1306_Putc+0xf8>)
 80013fa:	881a      	ldrh	r2, [r3, #0]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4413      	add	r3, r2
 8001402:	b298      	uxth	r0, r3
 8001404:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <SSD1306_Putc+0xf8>)
 8001406:	885a      	ldrh	r2, [r3, #2]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	b29b      	uxth	r3, r3
 800140c:	4413      	add	r3, r2
 800140e:	b299      	uxth	r1, r3
 8001410:	79bb      	ldrb	r3, [r7, #6]
 8001412:	2b00      	cmp	r3, #0
 8001414:	bf0c      	ite	eq
 8001416:	2301      	moveq	r3, #1
 8001418:	2300      	movne	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	f7ff ff2d 	bl	800127c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	3301      	adds	r3, #1
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4293      	cmp	r3, r2
 8001432:	d3c8      	bcc.n	80013c6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3301      	adds	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	785b      	ldrb	r3, [r3, #1]
 800143e:	461a      	mov	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	4293      	cmp	r3, r2
 8001444:	d3ad      	bcc.n	80013a2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <SSD1306_Putc+0xf8>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	7812      	ldrb	r2, [r2, #0]
 800144e:	4413      	add	r3, r2
 8001450:	b29a      	uxth	r2, r3
 8001452:	4b03      	ldr	r3, [pc, #12]	@ (8001460 <SSD1306_Putc+0xf8>)
 8001454:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001456:	79fb      	ldrb	r3, [r7, #7]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000056c 	.word	0x2000056c

08001464 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	4613      	mov	r3, r2
 8001470:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001472:	e012      	b.n	800149a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	79fa      	ldrb	r2, [r7, #7]
 800147a:	68b9      	ldr	r1, [r7, #8]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff73 	bl	8001368 <SSD1306_Putc>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	d002      	beq.n	8001494 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	e008      	b.n	80014a6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3301      	adds	r3, #1
 8001498:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1e8      	bne.n	8001474 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	781b      	ldrb	r3, [r3, #0]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff feca 	bl	800124c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80014b8:	f7ff fe9a 	bl	80011f0 <SSD1306_UpdateScreen>
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80014c6:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <ssd1306_I2C_Init+0x28>)
 80014c8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014ca:	e002      	b.n	80014d2 <ssd1306_I2C_Init+0x12>
		p--;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f9      	bne.n	80014cc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	0003d090 	.word	0x0003d090

080014ec <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b0c7      	sub	sp, #284	@ 0x11c
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	4604      	mov	r4, r0
 80014f4:	4608      	mov	r0, r1
 80014f6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80014fa:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80014fe:	600a      	str	r2, [r1, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001506:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800150a:	4622      	mov	r2, r4
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001512:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001516:	4602      	mov	r2, r0
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800151e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001522:	460a      	mov	r2, r1
 8001524:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001526:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800152a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800152e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001532:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001536:	7812      	ldrb	r2, [r2, #0]
 8001538:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800153a:	2300      	movs	r3, #0
 800153c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001540:	e015      	b.n	800156e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001542:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001546:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800154a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	441a      	add	r2, r3
 8001552:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001556:	3301      	adds	r3, #1
 8001558:	7811      	ldrb	r1, [r2, #0]
 800155a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800155e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001562:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001564:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001568:	3301      	adds	r3, #1
 800156a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800156e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001572:	b29b      	uxth	r3, r3
 8001574:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001578:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800157c:	8812      	ldrh	r2, [r2, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d8df      	bhi.n	8001542 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001582:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001586:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b299      	uxth	r1, r3
 800158e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001592:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	b29b      	uxth	r3, r3
 800159c:	f107 020c 	add.w	r2, r7, #12
 80015a0:	200a      	movs	r0, #10
 80015a2:	9000      	str	r0, [sp, #0]
 80015a4:	4803      	ldr	r0, [pc, #12]	@ (80015b4 <ssd1306_I2C_WriteMulti+0xc8>)
 80015a6:	f000 fe61 	bl	800226c <HAL_I2C_Master_Transmit>
}
 80015aa:	bf00      	nop
 80015ac:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd90      	pop	{r4, r7, pc}
 80015b4:	2000008c 	.word	0x2000008c

080015b8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af02      	add	r7, sp, #8
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
 80015c2:	460b      	mov	r3, r1
 80015c4:	71bb      	strb	r3, [r7, #6]
 80015c6:	4613      	mov	r3, r2
 80015c8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80015ca:	79bb      	ldrb	r3, [r7, #6]
 80015cc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80015ce:	797b      	ldrb	r3, [r7, #5]
 80015d0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	b299      	uxth	r1, r3
 80015d6:	f107 020c 	add.w	r2, r7, #12
 80015da:	230a      	movs	r3, #10
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2302      	movs	r3, #2
 80015e0:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <ssd1306_I2C_Write+0x38>)
 80015e2:	f000 fe43 	bl	800226c <HAL_I2C_Master_Transmit>
}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000008c 	.word	0x2000008c

080015f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <HAL_MspInit+0x54>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	4a11      	ldr	r2, [pc, #68]	@ (8001648 <HAL_MspInit+0x54>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001608:	6453      	str	r3, [r2, #68]	@ 0x44
 800160a:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <HAL_MspInit+0x54>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <HAL_MspInit+0x54>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <HAL_MspInit+0x54>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	@ 0x40
 8001626:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <HAL_MspInit+0x54>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	210f      	movs	r1, #15
 8001636:	f06f 0001 	mvn.w	r0, #1
 800163a:	f000 fac9 	bl	8001bd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800

0800164c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	@ 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a19      	ldr	r2, [pc, #100]	@ (80016d0 <HAL_I2C_MspInit+0x84>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d12c      	bne.n	80016c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b18      	ldr	r3, [pc, #96]	@ (80016d4 <HAL_I2C_MspInit+0x88>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a17      	ldr	r2, [pc, #92]	@ (80016d4 <HAL_I2C_MspInit+0x88>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <HAL_I2C_MspInit+0x88>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800168a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800168e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001690:	2312      	movs	r3, #18
 8001692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800169c:	2304      	movs	r3, #4
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	480c      	ldr	r0, [pc, #48]	@ (80016d8 <HAL_I2C_MspInit+0x8c>)
 80016a8:	f000 fabc 	bl	8001c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <HAL_I2C_MspInit+0x88>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b4:	4a07      	ldr	r2, [pc, #28]	@ (80016d4 <HAL_I2C_MspInit+0x88>)
 80016b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80016bc:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <HAL_I2C_MspInit+0x88>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	@ 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40005400 	.word	0x40005400
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020400 	.word	0x40020400

080016dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	@ 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a19      	ldr	r2, [pc, #100]	@ (8001760 <HAL_UART_MspInit+0x84>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d12b      	bne.n	8001756 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <HAL_UART_MspInit+0x88>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	4a17      	ldr	r2, [pc, #92]	@ (8001764 <HAL_UART_MspInit+0x88>)
 8001708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800170c:	6413      	str	r3, [r2, #64]	@ 0x40
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <HAL_UART_MspInit+0x88>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <HAL_UART_MspInit+0x88>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a10      	ldr	r2, [pc, #64]	@ (8001764 <HAL_UART_MspInit+0x88>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <HAL_UART_MspInit+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001736:	230c      	movs	r3, #12
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001746:	2307      	movs	r3, #7
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4805      	ldr	r0, [pc, #20]	@ (8001768 <HAL_UART_MspInit+0x8c>)
 8001752:	f000 fa67 	bl	8001c24 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	@ 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40004400 	.word	0x40004400
 8001764:	40023800 	.word	0x40023800
 8001768:	40020000 	.word	0x40020000

0800176c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08e      	sub	sp, #56	@ 0x38
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	4b33      	ldr	r3, [pc, #204]	@ (8001850 <HAL_InitTick+0xe4>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	4a32      	ldr	r2, [pc, #200]	@ (8001850 <HAL_InitTick+0xe4>)
 8001786:	f043 0310 	orr.w	r3, r3, #16
 800178a:	6413      	str	r3, [r2, #64]	@ 0x40
 800178c:	4b30      	ldr	r3, [pc, #192]	@ (8001850 <HAL_InitTick+0xe4>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001798:	f107 0210 	add.w	r2, r7, #16
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 fb04 	bl	8002db0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d103      	bne.n	80017ba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017b2:	f001 fad5 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 80017b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80017b8:	e004      	b.n	80017c4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017ba:	f001 fad1 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 80017be:	4603      	mov	r3, r0
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017c6:	4a23      	ldr	r2, [pc, #140]	@ (8001854 <HAL_InitTick+0xe8>)
 80017c8:	fba2 2303 	umull	r2, r3, r2, r3
 80017cc:	0c9b      	lsrs	r3, r3, #18
 80017ce:	3b01      	subs	r3, #1
 80017d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017d2:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <HAL_InitTick+0xec>)
 80017d4:	4a21      	ldr	r2, [pc, #132]	@ (800185c <HAL_InitTick+0xf0>)
 80017d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <HAL_InitTick+0xec>)
 80017da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017de:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001858 <HAL_InitTick+0xec>)
 80017e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017e4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001858 <HAL_InitTick+0xec>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <HAL_InitTick+0xec>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f2:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_InitTick+0xec>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80017f8:	4817      	ldr	r0, [pc, #92]	@ (8001858 <HAL_InitTick+0xec>)
 80017fa:	f001 ffd9 	bl	80037b0 <HAL_TIM_Base_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001804:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001808:	2b00      	cmp	r3, #0
 800180a:	d11b      	bne.n	8001844 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800180c:	4812      	ldr	r0, [pc, #72]	@ (8001858 <HAL_InitTick+0xec>)
 800180e:	f002 f829 	bl	8003864 <HAL_TIM_Base_Start_IT>
 8001812:	4603      	mov	r3, r0
 8001814:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001818:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800181c:	2b00      	cmp	r3, #0
 800181e:	d111      	bne.n	8001844 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001820:	2036      	movs	r0, #54	@ 0x36
 8001822:	f000 f9f1 	bl	8001c08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d808      	bhi.n	800183e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	2036      	movs	r0, #54	@ 0x36
 8001832:	f000 f9cd 	bl	8001bd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001836:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <HAL_InitTick+0xf4>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	e002      	b.n	8001844 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001844:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001848:	4618      	mov	r0, r3
 800184a:	3738      	adds	r7, #56	@ 0x38
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	431bde83 	.word	0x431bde83
 8001858:	20000574 	.word	0x20000574
 800185c:	40001000 	.word	0x40001000
 8001860:	20000010 	.word	0x20000010

08001864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <NMI_Handler+0x4>

0800186c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <HardFault_Handler+0x4>

08001874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <MemManage_Handler+0x4>

0800187c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <UsageFault_Handler+0x4>

0800188c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018a0:	4802      	ldr	r0, [pc, #8]	@ (80018ac <TIM6_DAC_IRQHandler+0x10>)
 80018a2:	f002 f84f 	bl	8003944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000574 	.word	0x20000574

080018b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b8:	4a14      	ldr	r2, [pc, #80]	@ (800190c <_sbrk+0x5c>)
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <_sbrk+0x60>)
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c4:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <_sbrk+0x64>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	@ (8001918 <_sbrk+0x68>)
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d207      	bcs.n	80018f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e0:	f005 faba 	bl	8006e58 <__errno>
 80018e4:	4603      	mov	r3, r0
 80018e6:	220c      	movs	r2, #12
 80018e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018ee:	e009      	b.n	8001904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f0:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f6:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	4a05      	ldr	r2, [pc, #20]	@ (8001914 <_sbrk+0x64>)
 8001900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20020000 	.word	0x20020000
 8001910:	00000400 	.word	0x00000400
 8001914:	200005bc 	.word	0x200005bc
 8001918:	20005060 	.word	0x20005060

0800191c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001920:	4b06      	ldr	r3, [pc, #24]	@ (800193c <SystemInit+0x20>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001926:	4a05      	ldr	r2, [pc, #20]	@ (800193c <SystemInit+0x20>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001940:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001978 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001944:	f7ff ffea 	bl	800191c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001948:	480c      	ldr	r0, [pc, #48]	@ (800197c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800194a:	490d      	ldr	r1, [pc, #52]	@ (8001980 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800194c:	4a0d      	ldr	r2, [pc, #52]	@ (8001984 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001960:	4c0a      	ldr	r4, [pc, #40]	@ (800198c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800196e:	f005 fa79 	bl	8006e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001972:	f7fe ffc9 	bl	8000908 <main>
  bx  lr    
 8001976:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001978:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001984:	08008610 	.word	0x08008610
  ldr r2, =_sbss
 8001988:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800198c:	2000505c 	.word	0x2000505c

08001990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC_IRQHandler>
	...

08001994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001998:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0d      	ldr	r2, [pc, #52]	@ (80019d4 <HAL_Init+0x40>)
 800199e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <HAL_Init+0x40>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <HAL_Init+0x40>)
 80019aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <HAL_Init+0x40>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a07      	ldr	r2, [pc, #28]	@ (80019d4 <HAL_Init+0x40>)
 80019b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019bc:	2003      	movs	r0, #3
 80019be:	f000 f8fc 	bl	8001bba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff fed2 	bl	800176c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c8:	f7ff fe14 	bl	80015f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023c00 	.word	0x40023c00

080019d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_IncTick+0x20>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_IncTick+0x24>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a04      	ldr	r2, [pc, #16]	@ (80019fc <HAL_IncTick+0x24>)
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000014 	.word	0x20000014
 80019fc:	200005c0 	.word	0x200005c0

08001a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <HAL_GetTick+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	200005c0 	.word	0x200005c0

08001a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff ffee 	bl	8001a00 <HAL_GetTick>
 8001a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a30:	d005      	beq.n	8001a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a32:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <HAL_Delay+0x44>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a3e:	bf00      	nop
 8001a40:	f7ff ffde 	bl	8001a00 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d8f7      	bhi.n	8001a40 <HAL_Delay+0x28>
  {
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000014 	.word	0x20000014

08001a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a70:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a92:	4a04      	ldr	r2, [pc, #16]	@ (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	60d3      	str	r3, [r2, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aac:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0307 	and.w	r3, r3, #7
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	db0b      	blt.n	8001aee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	4907      	ldr	r1, [pc, #28]	@ (8001afc <__NVIC_EnableIRQ+0x38>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000e100 	.word	0xe000e100

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	@ (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	@ (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	@ 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	@ 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ff4c 	bl	8001a60 <__NVIC_SetPriorityGrouping>
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be2:	f7ff ff61 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001be6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	68b9      	ldr	r1, [r7, #8]
 8001bec:	6978      	ldr	r0, [r7, #20]
 8001bee:	f7ff ffb1 	bl	8001b54 <NVIC_EncodePriority>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff80 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff54 	bl	8001ac4 <__NVIC_EnableIRQ>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	@ 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	e165      	b.n	8001f0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c40:	2201      	movs	r2, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	f040 8154 	bne.w	8001f06 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d005      	beq.n	8001c76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d130      	bne.n	8001cd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	2203      	movs	r2, #3
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cac:	2201      	movs	r2, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 0201 	and.w	r2, r3, #1
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d017      	beq.n	8001d14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d123      	bne.n	8001d68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	08da      	lsrs	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3208      	adds	r2, #8
 8001d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	08da      	lsrs	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3208      	adds	r2, #8
 8001d62:	69b9      	ldr	r1, [r7, #24]
 8001d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0203 	and.w	r2, r3, #3
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80ae 	beq.w	8001f06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b5d      	ldr	r3, [pc, #372]	@ (8001f24 <HAL_GPIO_Init+0x300>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	4a5c      	ldr	r2, [pc, #368]	@ (8001f24 <HAL_GPIO_Init+0x300>)
 8001db4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dba:	4b5a      	ldr	r3, [pc, #360]	@ (8001f24 <HAL_GPIO_Init+0x300>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc6:	4a58      	ldr	r2, [pc, #352]	@ (8001f28 <HAL_GPIO_Init+0x304>)
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4f      	ldr	r2, [pc, #316]	@ (8001f2c <HAL_GPIO_Init+0x308>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d025      	beq.n	8001e3e <HAL_GPIO_Init+0x21a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4e      	ldr	r2, [pc, #312]	@ (8001f30 <HAL_GPIO_Init+0x30c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01f      	beq.n	8001e3a <HAL_GPIO_Init+0x216>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4d      	ldr	r2, [pc, #308]	@ (8001f34 <HAL_GPIO_Init+0x310>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d019      	beq.n	8001e36 <HAL_GPIO_Init+0x212>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4c      	ldr	r2, [pc, #304]	@ (8001f38 <HAL_GPIO_Init+0x314>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0x20e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f3c <HAL_GPIO_Init+0x318>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00d      	beq.n	8001e2e <HAL_GPIO_Init+0x20a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4a      	ldr	r2, [pc, #296]	@ (8001f40 <HAL_GPIO_Init+0x31c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <HAL_GPIO_Init+0x206>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a49      	ldr	r2, [pc, #292]	@ (8001f44 <HAL_GPIO_Init+0x320>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_GPIO_Init+0x202>
 8001e22:	2306      	movs	r3, #6
 8001e24:	e00c      	b.n	8001e40 <HAL_GPIO_Init+0x21c>
 8001e26:	2307      	movs	r3, #7
 8001e28:	e00a      	b.n	8001e40 <HAL_GPIO_Init+0x21c>
 8001e2a:	2305      	movs	r3, #5
 8001e2c:	e008      	b.n	8001e40 <HAL_GPIO_Init+0x21c>
 8001e2e:	2304      	movs	r3, #4
 8001e30:	e006      	b.n	8001e40 <HAL_GPIO_Init+0x21c>
 8001e32:	2303      	movs	r3, #3
 8001e34:	e004      	b.n	8001e40 <HAL_GPIO_Init+0x21c>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e002      	b.n	8001e40 <HAL_GPIO_Init+0x21c>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_GPIO_Init+0x21c>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	f002 0203 	and.w	r2, r2, #3
 8001e46:	0092      	lsls	r2, r2, #2
 8001e48:	4093      	lsls	r3, r2
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e50:	4935      	ldr	r1, [pc, #212]	@ (8001f28 <HAL_GPIO_Init+0x304>)
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	089b      	lsrs	r3, r3, #2
 8001e56:	3302      	adds	r3, #2
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f48 <HAL_GPIO_Init+0x324>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e82:	4a31      	ldr	r2, [pc, #196]	@ (8001f48 <HAL_GPIO_Init+0x324>)
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e88:	4b2f      	ldr	r3, [pc, #188]	@ (8001f48 <HAL_GPIO_Init+0x324>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eac:	4a26      	ldr	r2, [pc, #152]	@ (8001f48 <HAL_GPIO_Init+0x324>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eb2:	4b25      	ldr	r3, [pc, #148]	@ (8001f48 <HAL_GPIO_Init+0x324>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f48 <HAL_GPIO_Init+0x324>)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001edc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f48 <HAL_GPIO_Init+0x324>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f00:	4a11      	ldr	r2, [pc, #68]	@ (8001f48 <HAL_GPIO_Init+0x324>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	2b0f      	cmp	r3, #15
 8001f10:	f67f ae96 	bls.w	8001c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	3724      	adds	r7, #36	@ 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40013800 	.word	0x40013800
 8001f2c:	40020000 	.word	0x40020000
 8001f30:	40020400 	.word	0x40020400
 8001f34:	40020800 	.word	0x40020800
 8001f38:	40020c00 	.word	0x40020c00
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40021400 	.word	0x40021400
 8001f44:	40021800 	.word	0x40021800
 8001f48:	40013c00 	.word	0x40013c00

08001f4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	887b      	ldrh	r3, [r7, #2]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f64:	2301      	movs	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	e001      	b.n	8001f6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f8c:	787b      	ldrb	r3, [r7, #1]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f98:	e003      	b.n	8001fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	041a      	lsls	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	619a      	str	r2, [r3, #24]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b085      	sub	sp, #20
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fc0:	887a      	ldrh	r2, [r7, #2]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	041a      	lsls	r2, r3, #16
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	887b      	ldrh	r3, [r7, #2]
 8001fce:	400b      	ands	r3, r1
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	619a      	str	r2, [r3, #24]
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e12b      	b.n	800224e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d106      	bne.n	8002010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff fb1e 	bl	800164c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2224      	movs	r2, #36	@ 0x24
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002036:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002046:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002048:	f000 fe8a 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 800204c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4a81      	ldr	r2, [pc, #516]	@ (8002258 <HAL_I2C_Init+0x274>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d807      	bhi.n	8002068 <HAL_I2C_Init+0x84>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4a80      	ldr	r2, [pc, #512]	@ (800225c <HAL_I2C_Init+0x278>)
 800205c:	4293      	cmp	r3, r2
 800205e:	bf94      	ite	ls
 8002060:	2301      	movls	r3, #1
 8002062:	2300      	movhi	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	e006      	b.n	8002076 <HAL_I2C_Init+0x92>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4a7d      	ldr	r2, [pc, #500]	@ (8002260 <HAL_I2C_Init+0x27c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	bf94      	ite	ls
 8002070:	2301      	movls	r3, #1
 8002072:	2300      	movhi	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e0e7      	b.n	800224e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4a78      	ldr	r2, [pc, #480]	@ (8002264 <HAL_I2C_Init+0x280>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	0c9b      	lsrs	r3, r3, #18
 8002088:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	430a      	orrs	r2, r1
 800209c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002258 <HAL_I2C_Init+0x274>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d802      	bhi.n	80020b8 <HAL_I2C_Init+0xd4>
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	3301      	adds	r3, #1
 80020b6:	e009      	b.n	80020cc <HAL_I2C_Init+0xe8>
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020be:	fb02 f303 	mul.w	r3, r2, r3
 80020c2:	4a69      	ldr	r2, [pc, #420]	@ (8002268 <HAL_I2C_Init+0x284>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	099b      	lsrs	r3, r3, #6
 80020ca:	3301      	adds	r3, #1
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	430b      	orrs	r3, r1
 80020d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	495c      	ldr	r1, [pc, #368]	@ (8002258 <HAL_I2C_Init+0x274>)
 80020e8:	428b      	cmp	r3, r1
 80020ea:	d819      	bhi.n	8002120 <HAL_I2C_Init+0x13c>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1e59      	subs	r1, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80020fa:	1c59      	adds	r1, r3, #1
 80020fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002100:	400b      	ands	r3, r1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_I2C_Init+0x138>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1e59      	subs	r1, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fbb1 f3f3 	udiv	r3, r1, r3
 8002114:	3301      	adds	r3, #1
 8002116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211a:	e051      	b.n	80021c0 <HAL_I2C_Init+0x1dc>
 800211c:	2304      	movs	r3, #4
 800211e:	e04f      	b.n	80021c0 <HAL_I2C_Init+0x1dc>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d111      	bne.n	800214c <HAL_I2C_Init+0x168>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1e58      	subs	r0, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6859      	ldr	r1, [r3, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	440b      	add	r3, r1
 8002136:	fbb0 f3f3 	udiv	r3, r0, r3
 800213a:	3301      	adds	r3, #1
 800213c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	e012      	b.n	8002172 <HAL_I2C_Init+0x18e>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1e58      	subs	r0, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6859      	ldr	r1, [r3, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	0099      	lsls	r1, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002162:	3301      	adds	r3, #1
 8002164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_I2C_Init+0x196>
 8002176:	2301      	movs	r3, #1
 8002178:	e022      	b.n	80021c0 <HAL_I2C_Init+0x1dc>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10e      	bne.n	80021a0 <HAL_I2C_Init+0x1bc>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1e58      	subs	r0, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6859      	ldr	r1, [r3, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	440b      	add	r3, r1
 8002190:	fbb0 f3f3 	udiv	r3, r0, r3
 8002194:	3301      	adds	r3, #1
 8002196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800219e:	e00f      	b.n	80021c0 <HAL_I2C_Init+0x1dc>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1e58      	subs	r0, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6859      	ldr	r1, [r3, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	0099      	lsls	r1, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b6:	3301      	adds	r3, #1
 80021b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	6809      	ldr	r1, [r1, #0]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69da      	ldr	r2, [r3, #28]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6911      	ldr	r1, [r2, #16]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68d2      	ldr	r2, [r2, #12]
 80021fa:	4311      	orrs	r1, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	430b      	orrs	r3, r1
 8002202:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	000186a0 	.word	0x000186a0
 800225c:	001e847f 	.word	0x001e847f
 8002260:	003d08ff 	.word	0x003d08ff
 8002264:	431bde83 	.word	0x431bde83
 8002268:	10624dd3 	.word	0x10624dd3

0800226c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	461a      	mov	r2, r3
 8002278:	460b      	mov	r3, r1
 800227a:	817b      	strh	r3, [r7, #10]
 800227c:	4613      	mov	r3, r2
 800227e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002280:	f7ff fbbe 	bl	8001a00 <HAL_GetTick>
 8002284:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b20      	cmp	r3, #32
 8002290:	f040 80e0 	bne.w	8002454 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2319      	movs	r3, #25
 800229a:	2201      	movs	r2, #1
 800229c:	4970      	ldr	r1, [pc, #448]	@ (8002460 <HAL_I2C_Master_Transmit+0x1f4>)
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 fa92 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022aa:	2302      	movs	r3, #2
 80022ac:	e0d3      	b.n	8002456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_I2C_Master_Transmit+0x50>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e0cc      	b.n	8002456 <HAL_I2C_Master_Transmit+0x1ea>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d007      	beq.n	80022e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0201 	orr.w	r2, r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2221      	movs	r2, #33	@ 0x21
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2210      	movs	r2, #16
 80022fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	893a      	ldrh	r2, [r7, #8]
 8002312:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4a50      	ldr	r2, [pc, #320]	@ (8002464 <HAL_I2C_Master_Transmit+0x1f8>)
 8002322:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002324:	8979      	ldrh	r1, [r7, #10]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	6a3a      	ldr	r2, [r7, #32]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 f9ca 	bl	80026c4 <I2C_MasterRequestWrite>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e08d      	b.n	8002456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002350:	e066      	b.n	8002420 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	6a39      	ldr	r1, [r7, #32]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 fb50 	bl	80029fc <I2C_WaitOnTXEFlagUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00d      	beq.n	800237e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	2b04      	cmp	r3, #4
 8002368:	d107      	bne.n	800237a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002378:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e06b      	b.n	8002456 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002382:	781a      	ldrb	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d11b      	bne.n	80023f4 <HAL_I2C_Master_Transmit+0x188>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d017      	beq.n	80023f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	6a39      	ldr	r1, [r7, #32]
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fb47 	bl	8002a8c <I2C_WaitOnBTFFlagUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00d      	beq.n	8002420 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002408:	2b04      	cmp	r3, #4
 800240a:	d107      	bne.n	800241c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800241a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e01a      	b.n	8002456 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002424:	2b00      	cmp	r3, #0
 8002426:	d194      	bne.n	8002352 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2220      	movs	r2, #32
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	e000      	b.n	8002456 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002454:	2302      	movs	r3, #2
  }
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	00100002 	.word	0x00100002
 8002464:	ffff0000 	.word	0xffff0000

08002468 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08a      	sub	sp, #40	@ 0x28
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	460b      	mov	r3, r1
 8002476:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff fac2 	bl	8001a00 <HAL_GetTick>
 800247c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b20      	cmp	r3, #32
 800248c:	f040 8111 	bne.w	80026b2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2319      	movs	r3, #25
 8002496:	2201      	movs	r2, #1
 8002498:	4988      	ldr	r1, [pc, #544]	@ (80026bc <HAL_I2C_IsDeviceReady+0x254>)
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 f994 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80024a6:	2302      	movs	r3, #2
 80024a8:	e104      	b.n	80026b4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_I2C_IsDeviceReady+0x50>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e0fd      	b.n	80026b4 <HAL_I2C_IsDeviceReady+0x24c>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d007      	beq.n	80024de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0201 	orr.w	r2, r2, #1
 80024dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2224      	movs	r2, #36	@ 0x24
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4a70      	ldr	r2, [pc, #448]	@ (80026c0 <HAL_I2C_IsDeviceReady+0x258>)
 8002500:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002510:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2200      	movs	r2, #0
 800251a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 f952 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00d      	beq.n	8002546 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002534:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002538:	d103      	bne.n	8002542 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002540:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e0b6      	b.n	80026b4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002546:	897b      	ldrh	r3, [r7, #10]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002554:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002556:	f7ff fa53 	bl	8001a00 <HAL_GetTick>
 800255a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b02      	cmp	r3, #2
 8002568:	bf0c      	ite	eq
 800256a:	2301      	moveq	r3, #1
 800256c:	2300      	movne	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800257c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002580:	bf0c      	ite	eq
 8002582:	2301      	moveq	r3, #1
 8002584:	2300      	movne	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800258a:	e025      	b.n	80025d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800258c:	f7ff fa38 	bl	8001a00 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d302      	bcc.n	80025a2 <HAL_I2C_IsDeviceReady+0x13a>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d103      	bne.n	80025aa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	22a0      	movs	r2, #160	@ 0xa0
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ce:	bf0c      	ite	eq
 80025d0:	2301      	moveq	r3, #1
 80025d2:	2300      	movne	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2ba0      	cmp	r3, #160	@ 0xa0
 80025e2:	d005      	beq.n	80025f0 <HAL_I2C_IsDeviceReady+0x188>
 80025e4:	7dfb      	ldrb	r3, [r7, #23]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d102      	bne.n	80025f0 <HAL_I2C_IsDeviceReady+0x188>
 80025ea:	7dbb      	ldrb	r3, [r7, #22]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0cd      	beq.n	800258c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b02      	cmp	r3, #2
 8002604:	d129      	bne.n	800265a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002614:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2319      	movs	r3, #25
 8002632:	2201      	movs	r2, #1
 8002634:	4921      	ldr	r1, [pc, #132]	@ (80026bc <HAL_I2C_IsDeviceReady+0x254>)
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f8c6 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e036      	b.n	80026b4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2220      	movs	r2, #32
 800264a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	e02c      	b.n	80026b4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002668:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002672:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2319      	movs	r3, #25
 800267a:	2201      	movs	r2, #1
 800267c:	490f      	ldr	r1, [pc, #60]	@ (80026bc <HAL_I2C_IsDeviceReady+0x254>)
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 f8a2 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e012      	b.n	80026b4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	3301      	adds	r3, #1
 8002692:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	429a      	cmp	r2, r3
 800269a:	f4ff af32 	bcc.w	8002502 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80026b2:	2302      	movs	r3, #2
  }
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3720      	adds	r7, #32
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	00100002 	.word	0x00100002
 80026c0:	ffff0000 	.word	0xffff0000

080026c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	460b      	mov	r3, r1
 80026d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d006      	beq.n	80026ee <I2C_MasterRequestWrite+0x2a>
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d003      	beq.n	80026ee <I2C_MasterRequestWrite+0x2a>
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026ec:	d108      	bne.n	8002700 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	e00b      	b.n	8002718 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	2b12      	cmp	r3, #18
 8002706:	d107      	bne.n	8002718 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002716:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f84f 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00d      	beq.n	800274c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800273e:	d103      	bne.n	8002748 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002746:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e035      	b.n	80027b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002754:	d108      	bne.n	8002768 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002756:	897b      	ldrh	r3, [r7, #10]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002764:	611a      	str	r2, [r3, #16]
 8002766:	e01b      	b.n	80027a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002768:	897b      	ldrh	r3, [r7, #10]
 800276a:	11db      	asrs	r3, r3, #7
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f003 0306 	and.w	r3, r3, #6
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f063 030f 	orn	r3, r3, #15
 8002778:	b2da      	uxtb	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	490e      	ldr	r1, [pc, #56]	@ (80027c0 <I2C_MasterRequestWrite+0xfc>)
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f898 	bl	80028bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e010      	b.n	80027b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002796:	897b      	ldrh	r3, [r7, #10]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4907      	ldr	r1, [pc, #28]	@ (80027c4 <I2C_MasterRequestWrite+0x100>)
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f888 	bl	80028bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	00010008 	.word	0x00010008
 80027c4:	00010002 	.word	0x00010002

080027c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d8:	e048      	b.n	800286c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027e0:	d044      	beq.n	800286c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e2:	f7ff f90d 	bl	8001a00 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d302      	bcc.n	80027f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d139      	bne.n	800286c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	0c1b      	lsrs	r3, r3, #16
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d10d      	bne.n	800281e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	43da      	mvns	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	4013      	ands	r3, r2
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf0c      	ite	eq
 8002814:	2301      	moveq	r3, #1
 8002816:	2300      	movne	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	e00c      	b.n	8002838 <I2C_WaitOnFlagUntilTimeout+0x70>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	43da      	mvns	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	4013      	ands	r3, r2
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	429a      	cmp	r2, r3
 800283c:	d116      	bne.n	800286c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	f043 0220 	orr.w	r2, r3, #32
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e023      	b.n	80028b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	0c1b      	lsrs	r3, r3, #16
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d10d      	bne.n	8002892 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	43da      	mvns	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	4013      	ands	r3, r2
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf0c      	ite	eq
 8002888:	2301      	moveq	r3, #1
 800288a:	2300      	movne	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	e00c      	b.n	80028ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	43da      	mvns	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	4013      	ands	r3, r2
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d093      	beq.n	80027da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ca:	e071      	b.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028da:	d123      	bne.n	8002924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	f043 0204 	orr.w	r2, r3, #4
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e067      	b.n	80029f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800292a:	d041      	beq.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292c:	f7ff f868 	bl	8001a00 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	d302      	bcc.n	8002942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d136      	bne.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	0c1b      	lsrs	r3, r3, #16
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d10c      	bne.n	8002966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	43da      	mvns	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4013      	ands	r3, r2
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	bf14      	ite	ne
 800295e:	2301      	movne	r3, #1
 8002960:	2300      	moveq	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	e00b      	b.n	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	43da      	mvns	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	4013      	ands	r3, r2
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf14      	ite	ne
 8002978:	2301      	movne	r3, #1
 800297a:	2300      	moveq	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d016      	beq.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	f043 0220 	orr.w	r2, r3, #32
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e021      	b.n	80029f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	0c1b      	lsrs	r3, r3, #16
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d10c      	bne.n	80029d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	43da      	mvns	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	4013      	ands	r3, r2
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf14      	ite	ne
 80029cc:	2301      	movne	r3, #1
 80029ce:	2300      	moveq	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	e00b      	b.n	80029ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4013      	ands	r3, r2
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	bf14      	ite	ne
 80029e6:	2301      	movne	r3, #1
 80029e8:	2300      	moveq	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f47f af6d 	bne.w	80028cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a08:	e034      	b.n	8002a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f886 	bl	8002b1c <I2C_IsAcknowledgeFailed>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e034      	b.n	8002a84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a20:	d028      	beq.n	8002a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a22:	f7fe ffed 	bl	8001a00 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d302      	bcc.n	8002a38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d11d      	bne.n	8002a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a42:	2b80      	cmp	r3, #128	@ 0x80
 8002a44:	d016      	beq.n	8002a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	f043 0220 	orr.w	r2, r3, #32
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e007      	b.n	8002a84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a7e:	2b80      	cmp	r3, #128	@ 0x80
 8002a80:	d1c3      	bne.n	8002a0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a98:	e034      	b.n	8002b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f83e 	bl	8002b1c <I2C_IsAcknowledgeFailed>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e034      	b.n	8002b14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ab0:	d028      	beq.n	8002b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab2:	f7fe ffa5 	bl	8001a00 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d302      	bcc.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d11d      	bne.n	8002b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d016      	beq.n	8002b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	f043 0220 	orr.w	r2, r3, #32
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e007      	b.n	8002b14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d1c3      	bne.n	8002a9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b32:	d11b      	bne.n	8002b6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	f043 0204 	orr.w	r2, r3, #4
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0cc      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b90:	4b68      	ldr	r3, [pc, #416]	@ (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d90c      	bls.n	8002bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b65      	ldr	r3, [pc, #404]	@ (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b63      	ldr	r3, [pc, #396]	@ (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0b8      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d020      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bd0:	4b59      	ldr	r3, [pc, #356]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a58      	ldr	r2, [pc, #352]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be8:	4b53      	ldr	r3, [pc, #332]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4a52      	ldr	r2, [pc, #328]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf4:	4b50      	ldr	r3, [pc, #320]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	494d      	ldr	r1, [pc, #308]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d044      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	4b47      	ldr	r3, [pc, #284]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d119      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e07f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d003      	beq.n	8002c3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e067      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5a:	4b37      	ldr	r3, [pc, #220]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f023 0203 	bic.w	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4934      	ldr	r1, [pc, #208]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c6c:	f7fe fec8 	bl	8001a00 <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c74:	f7fe fec4 	bl	8001a00 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e04f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 020c 	and.w	r2, r3, #12
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d1eb      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b25      	ldr	r3, [pc, #148]	@ (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d20c      	bcs.n	8002cc4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b22      	ldr	r3, [pc, #136]	@ (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b20      	ldr	r3, [pc, #128]	@ (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e032      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd0:	4b19      	ldr	r3, [pc, #100]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4916      	ldr	r1, [pc, #88]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cee:	4b12      	ldr	r3, [pc, #72]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	490e      	ldr	r1, [pc, #56]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d02:	f000 f887 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8002d06:	4602      	mov	r2, r0
 8002d08:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	490a      	ldr	r1, [pc, #40]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	5ccb      	ldrb	r3, [r1, r3]
 8002d16:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1a:	4a09      	ldr	r2, [pc, #36]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d1e:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe fd22 	bl	800176c <HAL_InitTick>

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023c00 	.word	0x40023c00
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	080085b4 	.word	0x080085b4
 8002d40:	2000000c 	.word	0x2000000c
 8002d44:	20000010 	.word	0x20000010

08002d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d4c:	4b03      	ldr	r3, [pc, #12]	@ (8002d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	2000000c 	.word	0x2000000c

08002d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d64:	f7ff fff0 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	0a9b      	lsrs	r3, r3, #10
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4903      	ldr	r1, [pc, #12]	@ (8002d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40023800 	.word	0x40023800
 8002d84:	080085c4 	.word	0x080085c4

08002d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d8c:	f7ff ffdc 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	0b5b      	lsrs	r3, r3, #13
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4903      	ldr	r1, [pc, #12]	@ (8002dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	080085c4 	.word	0x080085c4

08002db0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	220f      	movs	r2, #15
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002dc0:	4b12      	ldr	r3, [pc, #72]	@ (8002e0c <HAL_RCC_GetClockConfig+0x5c>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0203 	and.w	r2, r3, #3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e0c <HAL_RCC_GetClockConfig+0x5c>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e0c <HAL_RCC_GetClockConfig+0x5c>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002de4:	4b09      	ldr	r3, [pc, #36]	@ (8002e0c <HAL_RCC_GetClockConfig+0x5c>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	08db      	lsrs	r3, r3, #3
 8002dea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002df2:	4b07      	ldr	r3, [pc, #28]	@ (8002e10 <HAL_RCC_GetClockConfig+0x60>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 020f 	and.w	r2, r3, #15
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	601a      	str	r2, [r3, #0]
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40023c00 	.word	0x40023c00

08002e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e18:	b0ae      	sub	sp, #184	@ 0xb8
 8002e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e3a:	4bcb      	ldr	r3, [pc, #812]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	f200 8206 	bhi.w	8003254 <HAL_RCC_GetSysClockFreq+0x440>
 8002e48:	a201      	add	r2, pc, #4	@ (adr r2, 8002e50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4e:	bf00      	nop
 8002e50:	08002e85 	.word	0x08002e85
 8002e54:	08003255 	.word	0x08003255
 8002e58:	08003255 	.word	0x08003255
 8002e5c:	08003255 	.word	0x08003255
 8002e60:	08002e8d 	.word	0x08002e8d
 8002e64:	08003255 	.word	0x08003255
 8002e68:	08003255 	.word	0x08003255
 8002e6c:	08003255 	.word	0x08003255
 8002e70:	08002e95 	.word	0x08002e95
 8002e74:	08003255 	.word	0x08003255
 8002e78:	08003255 	.word	0x08003255
 8002e7c:	08003255 	.word	0x08003255
 8002e80:	08003085 	.word	0x08003085
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e84:	4bb9      	ldr	r3, [pc, #740]	@ (800316c <HAL_RCC_GetSysClockFreq+0x358>)
 8002e86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e8a:	e1e7      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e8c:	4bb8      	ldr	r3, [pc, #736]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e92:	e1e3      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e94:	4bb4      	ldr	r3, [pc, #720]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ea0:	4bb1      	ldr	r3, [pc, #708]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d071      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eac:	4bae      	ldr	r3, [pc, #696]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	099b      	lsrs	r3, r3, #6
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002eb8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002ebc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ece:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002ed2:	4622      	mov	r2, r4
 8002ed4:	462b      	mov	r3, r5
 8002ed6:	f04f 0000 	mov.w	r0, #0
 8002eda:	f04f 0100 	mov.w	r1, #0
 8002ede:	0159      	lsls	r1, r3, #5
 8002ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee4:	0150      	lsls	r0, r2, #5
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4621      	mov	r1, r4
 8002eec:	1a51      	subs	r1, r2, r1
 8002eee:	6439      	str	r1, [r7, #64]	@ 0x40
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002f04:	4649      	mov	r1, r9
 8002f06:	018b      	lsls	r3, r1, #6
 8002f08:	4641      	mov	r1, r8
 8002f0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f0e:	4641      	mov	r1, r8
 8002f10:	018a      	lsls	r2, r1, #6
 8002f12:	4641      	mov	r1, r8
 8002f14:	1a51      	subs	r1, r2, r1
 8002f16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f18:	4649      	mov	r1, r9
 8002f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002f2c:	4649      	mov	r1, r9
 8002f2e:	00cb      	lsls	r3, r1, #3
 8002f30:	4641      	mov	r1, r8
 8002f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f36:	4641      	mov	r1, r8
 8002f38:	00ca      	lsls	r2, r1, #3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4622      	mov	r2, r4
 8002f42:	189b      	adds	r3, r3, r2
 8002f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f46:	462b      	mov	r3, r5
 8002f48:	460a      	mov	r2, r1
 8002f4a:	eb42 0303 	adc.w	r3, r2, r3
 8002f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	024b      	lsls	r3, r1, #9
 8002f60:	4621      	mov	r1, r4
 8002f62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f66:	4621      	mov	r1, r4
 8002f68:	024a      	lsls	r2, r1, #9
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f7c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002f80:	f7fd f996 	bl	80002b0 <__aeabi_uldivmod>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4613      	mov	r3, r2
 8002f8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f8e:	e067      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f90:	4b75      	ldr	r3, [pc, #468]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	099b      	lsrs	r3, r3, #6
 8002f96:	2200      	movs	r2, #0
 8002f98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f9c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002faa:	2300      	movs	r3, #0
 8002fac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002fae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002fb2:	4622      	mov	r2, r4
 8002fb4:	462b      	mov	r3, r5
 8002fb6:	f04f 0000 	mov.w	r0, #0
 8002fba:	f04f 0100 	mov.w	r1, #0
 8002fbe:	0159      	lsls	r1, r3, #5
 8002fc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc4:	0150      	lsls	r0, r2, #5
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4621      	mov	r1, r4
 8002fcc:	1a51      	subs	r1, r2, r1
 8002fce:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002fe4:	4649      	mov	r1, r9
 8002fe6:	018b      	lsls	r3, r1, #6
 8002fe8:	4641      	mov	r1, r8
 8002fea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fee:	4641      	mov	r1, r8
 8002ff0:	018a      	lsls	r2, r1, #6
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800300a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800300e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003012:	4692      	mov	sl, r2
 8003014:	469b      	mov	fp, r3
 8003016:	4623      	mov	r3, r4
 8003018:	eb1a 0303 	adds.w	r3, sl, r3
 800301c:	623b      	str	r3, [r7, #32]
 800301e:	462b      	mov	r3, r5
 8003020:	eb4b 0303 	adc.w	r3, fp, r3
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003032:	4629      	mov	r1, r5
 8003034:	028b      	lsls	r3, r1, #10
 8003036:	4621      	mov	r1, r4
 8003038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800303c:	4621      	mov	r1, r4
 800303e:	028a      	lsls	r2, r1, #10
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003048:	2200      	movs	r2, #0
 800304a:	673b      	str	r3, [r7, #112]	@ 0x70
 800304c:	677a      	str	r2, [r7, #116]	@ 0x74
 800304e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003052:	f7fd f92d 	bl	80002b0 <__aeabi_uldivmod>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4613      	mov	r3, r2
 800305c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003060:	4b41      	ldr	r3, [pc, #260]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x354>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	0c1b      	lsrs	r3, r3, #16
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	3301      	adds	r3, #1
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003072:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003076:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800307a:	fbb2 f3f3 	udiv	r3, r2, r3
 800307e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003082:	e0eb      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003084:	4b38      	ldr	r3, [pc, #224]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x354>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800308c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003090:	4b35      	ldr	r3, [pc, #212]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x354>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d06b      	beq.n	8003174 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309c:	4b32      	ldr	r3, [pc, #200]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x354>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	099b      	lsrs	r3, r3, #6
 80030a2:	2200      	movs	r2, #0
 80030a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80030b0:	2300      	movs	r3, #0
 80030b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80030b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80030b8:	4622      	mov	r2, r4
 80030ba:	462b      	mov	r3, r5
 80030bc:	f04f 0000 	mov.w	r0, #0
 80030c0:	f04f 0100 	mov.w	r1, #0
 80030c4:	0159      	lsls	r1, r3, #5
 80030c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ca:	0150      	lsls	r0, r2, #5
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4621      	mov	r1, r4
 80030d2:	1a51      	subs	r1, r2, r1
 80030d4:	61b9      	str	r1, [r7, #24]
 80030d6:	4629      	mov	r1, r5
 80030d8:	eb63 0301 	sbc.w	r3, r3, r1
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80030ea:	4659      	mov	r1, fp
 80030ec:	018b      	lsls	r3, r1, #6
 80030ee:	4651      	mov	r1, sl
 80030f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030f4:	4651      	mov	r1, sl
 80030f6:	018a      	lsls	r2, r1, #6
 80030f8:	4651      	mov	r1, sl
 80030fa:	ebb2 0801 	subs.w	r8, r2, r1
 80030fe:	4659      	mov	r1, fp
 8003100:	eb63 0901 	sbc.w	r9, r3, r1
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003110:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003114:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003118:	4690      	mov	r8, r2
 800311a:	4699      	mov	r9, r3
 800311c:	4623      	mov	r3, r4
 800311e:	eb18 0303 	adds.w	r3, r8, r3
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	462b      	mov	r3, r5
 8003126:	eb49 0303 	adc.w	r3, r9, r3
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003138:	4629      	mov	r1, r5
 800313a:	024b      	lsls	r3, r1, #9
 800313c:	4621      	mov	r1, r4
 800313e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003142:	4621      	mov	r1, r4
 8003144:	024a      	lsls	r2, r1, #9
 8003146:	4610      	mov	r0, r2
 8003148:	4619      	mov	r1, r3
 800314a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800314e:	2200      	movs	r2, #0
 8003150:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003152:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003154:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003158:	f7fd f8aa 	bl	80002b0 <__aeabi_uldivmod>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4613      	mov	r3, r2
 8003162:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003166:	e065      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x420>
 8003168:	40023800 	.word	0x40023800
 800316c:	00f42400 	.word	0x00f42400
 8003170:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003174:	4b3d      	ldr	r3, [pc, #244]	@ (800326c <HAL_RCC_GetSysClockFreq+0x458>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	099b      	lsrs	r3, r3, #6
 800317a:	2200      	movs	r2, #0
 800317c:	4618      	mov	r0, r3
 800317e:	4611      	mov	r1, r2
 8003180:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003184:	653b      	str	r3, [r7, #80]	@ 0x50
 8003186:	2300      	movs	r3, #0
 8003188:	657b      	str	r3, [r7, #84]	@ 0x54
 800318a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800318e:	4642      	mov	r2, r8
 8003190:	464b      	mov	r3, r9
 8003192:	f04f 0000 	mov.w	r0, #0
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	0159      	lsls	r1, r3, #5
 800319c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031a0:	0150      	lsls	r0, r2, #5
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4641      	mov	r1, r8
 80031a8:	1a51      	subs	r1, r2, r1
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	4649      	mov	r1, r9
 80031ae:	eb63 0301 	sbc.w	r3, r3, r1
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80031c0:	4659      	mov	r1, fp
 80031c2:	018b      	lsls	r3, r1, #6
 80031c4:	4651      	mov	r1, sl
 80031c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ca:	4651      	mov	r1, sl
 80031cc:	018a      	lsls	r2, r1, #6
 80031ce:	4651      	mov	r1, sl
 80031d0:	1a54      	subs	r4, r2, r1
 80031d2:	4659      	mov	r1, fp
 80031d4:	eb63 0501 	sbc.w	r5, r3, r1
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	00eb      	lsls	r3, r5, #3
 80031e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031e6:	00e2      	lsls	r2, r4, #3
 80031e8:	4614      	mov	r4, r2
 80031ea:	461d      	mov	r5, r3
 80031ec:	4643      	mov	r3, r8
 80031ee:	18e3      	adds	r3, r4, r3
 80031f0:	603b      	str	r3, [r7, #0]
 80031f2:	464b      	mov	r3, r9
 80031f4:	eb45 0303 	adc.w	r3, r5, r3
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003206:	4629      	mov	r1, r5
 8003208:	028b      	lsls	r3, r1, #10
 800320a:	4621      	mov	r1, r4
 800320c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003210:	4621      	mov	r1, r4
 8003212:	028a      	lsls	r2, r1, #10
 8003214:	4610      	mov	r0, r2
 8003216:	4619      	mov	r1, r3
 8003218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800321c:	2200      	movs	r2, #0
 800321e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003220:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003222:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003226:	f7fd f843 	bl	80002b0 <__aeabi_uldivmod>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4613      	mov	r3, r2
 8003230:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003234:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <HAL_RCC_GetSysClockFreq+0x458>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	0f1b      	lsrs	r3, r3, #28
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003246:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800324a:	fbb2 f3f3 	udiv	r3, r2, r3
 800324e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003252:	e003      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003254:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003256:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800325a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800325c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003260:	4618      	mov	r0, r3
 8003262:	37b8      	adds	r7, #184	@ 0xb8
 8003264:	46bd      	mov	sp, r7
 8003266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800326a:	bf00      	nop
 800326c:	40023800 	.word	0x40023800
 8003270:	00f42400 	.word	0x00f42400

08003274 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e28d      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 8083 	beq.w	800339a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003294:	4b94      	ldr	r3, [pc, #592]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 030c 	and.w	r3, r3, #12
 800329c:	2b04      	cmp	r3, #4
 800329e:	d019      	beq.n	80032d4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80032a0:	4b91      	ldr	r3, [pc, #580]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 030c 	and.w	r3, r3, #12
        || \
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d106      	bne.n	80032ba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80032ac:	4b8e      	ldr	r3, [pc, #568]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032b8:	d00c      	beq.n	80032d4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ba:	4b8b      	ldr	r3, [pc, #556]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80032c2:	2b0c      	cmp	r3, #12
 80032c4:	d112      	bne.n	80032ec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c6:	4b88      	ldr	r3, [pc, #544]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032d2:	d10b      	bne.n	80032ec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d4:	4b84      	ldr	r3, [pc, #528]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d05b      	beq.n	8003398 <HAL_RCC_OscConfig+0x124>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d157      	bne.n	8003398 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e25a      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f4:	d106      	bne.n	8003304 <HAL_RCC_OscConfig+0x90>
 80032f6:	4b7c      	ldr	r3, [pc, #496]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a7b      	ldr	r2, [pc, #492]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 80032fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	e01d      	b.n	8003340 <HAL_RCC_OscConfig+0xcc>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800330c:	d10c      	bne.n	8003328 <HAL_RCC_OscConfig+0xb4>
 800330e:	4b76      	ldr	r3, [pc, #472]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a75      	ldr	r2, [pc, #468]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 8003314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	4b73      	ldr	r3, [pc, #460]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a72      	ldr	r2, [pc, #456]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e00b      	b.n	8003340 <HAL_RCC_OscConfig+0xcc>
 8003328:	4b6f      	ldr	r3, [pc, #444]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a6e      	ldr	r2, [pc, #440]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 800332e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b6c      	ldr	r3, [pc, #432]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a6b      	ldr	r2, [pc, #428]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 800333a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800333e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe fb5a 	bl	8001a00 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003350:	f7fe fb56 	bl	8001a00 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	@ 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e21f      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003362:	4b61      	ldr	r3, [pc, #388]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0xdc>
 800336e:	e014      	b.n	800339a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fe fb46 	bl	8001a00 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003378:	f7fe fb42 	bl	8001a00 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	@ 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e20b      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338a:	4b57      	ldr	r3, [pc, #348]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x104>
 8003396:	e000      	b.n	800339a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d06f      	beq.n	8003486 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033a6:	4b50      	ldr	r3, [pc, #320]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d017      	beq.n	80033e2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80033b2:	4b4d      	ldr	r3, [pc, #308]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
        || \
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d105      	bne.n	80033ca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80033be:	4b4a      	ldr	r3, [pc, #296]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ca:	4b47      	ldr	r3, [pc, #284]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80033d2:	2b0c      	cmp	r3, #12
 80033d4:	d11c      	bne.n	8003410 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033d6:	4b44      	ldr	r3, [pc, #272]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d116      	bne.n	8003410 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e2:	4b41      	ldr	r3, [pc, #260]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <HAL_RCC_OscConfig+0x186>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e1d3      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fa:	4b3b      	ldr	r3, [pc, #236]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4937      	ldr	r1, [pc, #220]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340e:	e03a      	b.n	8003486 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003418:	4b34      	ldr	r3, [pc, #208]	@ (80034ec <HAL_RCC_OscConfig+0x278>)
 800341a:	2201      	movs	r2, #1
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341e:	f7fe faef 	bl	8001a00 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003426:	f7fe faeb 	bl	8001a00 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e1b4      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003438:	4b2b      	ldr	r3, [pc, #172]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003444:	4b28      	ldr	r3, [pc, #160]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4925      	ldr	r1, [pc, #148]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 8003454:	4313      	orrs	r3, r2
 8003456:	600b      	str	r3, [r1, #0]
 8003458:	e015      	b.n	8003486 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345a:	4b24      	ldr	r3, [pc, #144]	@ (80034ec <HAL_RCC_OscConfig+0x278>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fe face 	bl	8001a00 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003468:	f7fe faca 	bl	8001a00 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e193      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347a:	4b1b      	ldr	r3, [pc, #108]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d036      	beq.n	8003500 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d016      	beq.n	80034c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349a:	4b15      	ldr	r3, [pc, #84]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 800349c:	2201      	movs	r2, #1
 800349e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a0:	f7fe faae 	bl	8001a00 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a8:	f7fe faaa 	bl	8001a00 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e173      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ba:	4b0b      	ldr	r3, [pc, #44]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 80034bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x234>
 80034c6:	e01b      	b.n	8003500 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c8:	4b09      	ldr	r3, [pc, #36]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ce:	f7fe fa97 	bl	8001a00 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d4:	e00e      	b.n	80034f4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d6:	f7fe fa93 	bl	8001a00 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d907      	bls.n	80034f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e15c      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
 80034e8:	40023800 	.word	0x40023800
 80034ec:	42470000 	.word	0x42470000
 80034f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f4:	4b8a      	ldr	r3, [pc, #552]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80034f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1ea      	bne.n	80034d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8097 	beq.w	800363c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003512:	4b83      	ldr	r3, [pc, #524]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10f      	bne.n	800353e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	4b7f      	ldr	r3, [pc, #508]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	4a7e      	ldr	r2, [pc, #504]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800352c:	6413      	str	r3, [r2, #64]	@ 0x40
 800352e:	4b7c      	ldr	r3, [pc, #496]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353a:	2301      	movs	r3, #1
 800353c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353e:	4b79      	ldr	r3, [pc, #484]	@ (8003724 <HAL_RCC_OscConfig+0x4b0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003546:	2b00      	cmp	r3, #0
 8003548:	d118      	bne.n	800357c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354a:	4b76      	ldr	r3, [pc, #472]	@ (8003724 <HAL_RCC_OscConfig+0x4b0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a75      	ldr	r2, [pc, #468]	@ (8003724 <HAL_RCC_OscConfig+0x4b0>)
 8003550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003556:	f7fe fa53 	bl	8001a00 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355e:	f7fe fa4f 	bl	8001a00 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e118      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003570:	4b6c      	ldr	r3, [pc, #432]	@ (8003724 <HAL_RCC_OscConfig+0x4b0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d106      	bne.n	8003592 <HAL_RCC_OscConfig+0x31e>
 8003584:	4b66      	ldr	r3, [pc, #408]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003588:	4a65      	ldr	r2, [pc, #404]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003590:	e01c      	b.n	80035cc <HAL_RCC_OscConfig+0x358>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b05      	cmp	r3, #5
 8003598:	d10c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x340>
 800359a:	4b61      	ldr	r3, [pc, #388]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359e:	4a60      	ldr	r2, [pc, #384]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80035a0:	f043 0304 	orr.w	r3, r3, #4
 80035a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a6:	4b5e      	ldr	r3, [pc, #376]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035aa:	4a5d      	ldr	r2, [pc, #372]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b2:	e00b      	b.n	80035cc <HAL_RCC_OscConfig+0x358>
 80035b4:	4b5a      	ldr	r3, [pc, #360]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b8:	4a59      	ldr	r2, [pc, #356]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	6713      	str	r3, [r2, #112]	@ 0x70
 80035c0:	4b57      	ldr	r3, [pc, #348]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c4:	4a56      	ldr	r2, [pc, #344]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80035c6:	f023 0304 	bic.w	r3, r3, #4
 80035ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d015      	beq.n	8003600 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d4:	f7fe fa14 	bl	8001a00 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035da:	e00a      	b.n	80035f2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035dc:	f7fe fa10 	bl	8001a00 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e0d7      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0ee      	beq.n	80035dc <HAL_RCC_OscConfig+0x368>
 80035fe:	e014      	b.n	800362a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7fe f9fe 	bl	8001a00 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003606:	e00a      	b.n	800361e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003608:	f7fe f9fa 	bl	8001a00 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e0c1      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361e:	4b40      	ldr	r3, [pc, #256]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1ee      	bne.n	8003608 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800362a:	7dfb      	ldrb	r3, [r7, #23]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d105      	bne.n	800363c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003630:	4b3b      	ldr	r3, [pc, #236]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003634:	4a3a      	ldr	r2, [pc, #232]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800363a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80ad 	beq.w	80037a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003646:	4b36      	ldr	r3, [pc, #216]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b08      	cmp	r3, #8
 8003650:	d060      	beq.n	8003714 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d145      	bne.n	80036e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365a:	4b33      	ldr	r3, [pc, #204]	@ (8003728 <HAL_RCC_OscConfig+0x4b4>)
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fe f9ce 	bl	8001a00 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003668:	f7fe f9ca 	bl	8001a00 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e093      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367a:	4b29      	ldr	r3, [pc, #164]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69da      	ldr	r2, [r3, #28]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003694:	019b      	lsls	r3, r3, #6
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369c:	085b      	lsrs	r3, r3, #1
 800369e:	3b01      	subs	r3, #1
 80036a0:	041b      	lsls	r3, r3, #16
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a8:	061b      	lsls	r3, r3, #24
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b0:	071b      	lsls	r3, r3, #28
 80036b2:	491b      	ldr	r1, [pc, #108]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003728 <HAL_RCC_OscConfig+0x4b4>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036be:	f7fe f99f 	bl	8001a00 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c6:	f7fe f99b 	bl	8001a00 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e064      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d8:	4b11      	ldr	r3, [pc, #68]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x452>
 80036e4:	e05c      	b.n	80037a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e6:	4b10      	ldr	r3, [pc, #64]	@ (8003728 <HAL_RCC_OscConfig+0x4b4>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fe f988 	bl	8001a00 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f4:	f7fe f984 	bl	8001a00 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e04d      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003706:	4b06      	ldr	r3, [pc, #24]	@ (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x480>
 8003712:	e045      	b.n	80037a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d107      	bne.n	800372c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e040      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
 8003720:	40023800 	.word	0x40023800
 8003724:	40007000 	.word	0x40007000
 8003728:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800372c:	4b1f      	ldr	r3, [pc, #124]	@ (80037ac <HAL_RCC_OscConfig+0x538>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d030      	beq.n	800379c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003744:	429a      	cmp	r2, r3
 8003746:	d129      	bne.n	800379c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d122      	bne.n	800379c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800375c:	4013      	ands	r3, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003762:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003764:	4293      	cmp	r3, r2
 8003766:	d119      	bne.n	800379c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003772:	085b      	lsrs	r3, r3, #1
 8003774:	3b01      	subs	r3, #1
 8003776:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d10f      	bne.n	800379c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003786:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003788:	429a      	cmp	r2, r3
 800378a:	d107      	bne.n	800379c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003796:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800

080037b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e041      	b.n	8003846 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f839 	bl	800384e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	4619      	mov	r1, r3
 80037ee:	4610      	mov	r0, r2
 80037f0:	f000 f9c0 	bl	8003b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d001      	beq.n	800387c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e04e      	b.n	800391a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a23      	ldr	r2, [pc, #140]	@ (8003928 <HAL_TIM_Base_Start_IT+0xc4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d022      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x80>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a6:	d01d      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x80>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1f      	ldr	r2, [pc, #124]	@ (800392c <HAL_TIM_Base_Start_IT+0xc8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d018      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x80>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003930 <HAL_TIM_Base_Start_IT+0xcc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d013      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x80>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003934 <HAL_TIM_Base_Start_IT+0xd0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00e      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x80>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003938 <HAL_TIM_Base_Start_IT+0xd4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d009      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x80>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a19      	ldr	r2, [pc, #100]	@ (800393c <HAL_TIM_Base_Start_IT+0xd8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d004      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x80>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a18      	ldr	r2, [pc, #96]	@ (8003940 <HAL_TIM_Base_Start_IT+0xdc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d111      	bne.n	8003908 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b06      	cmp	r3, #6
 80038f4:	d010      	beq.n	8003918 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0201 	orr.w	r2, r2, #1
 8003904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003906:	e007      	b.n	8003918 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40010000 	.word	0x40010000
 800392c:	40000400 	.word	0x40000400
 8003930:	40000800 	.word	0x40000800
 8003934:	40000c00 	.word	0x40000c00
 8003938:	40010400 	.word	0x40010400
 800393c:	40014000 	.word	0x40014000
 8003940:	40001800 	.word	0x40001800

08003944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d020      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01b      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0202 	mvn.w	r2, #2
 8003978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f8d2 	bl	8003b38 <HAL_TIM_IC_CaptureCallback>
 8003994:	e005      	b.n	80039a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f8c4 	bl	8003b24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f8d5 	bl	8003b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d020      	beq.n	80039f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01b      	beq.n	80039f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0204 	mvn.w	r2, #4
 80039c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2202      	movs	r2, #2
 80039ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f8ac 	bl	8003b38 <HAL_TIM_IC_CaptureCallback>
 80039e0:	e005      	b.n	80039ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f89e 	bl	8003b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f8af 	bl	8003b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d020      	beq.n	8003a40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01b      	beq.n	8003a40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0208 	mvn.w	r2, #8
 8003a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2204      	movs	r2, #4
 8003a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f886 	bl	8003b38 <HAL_TIM_IC_CaptureCallback>
 8003a2c:	e005      	b.n	8003a3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f878 	bl	8003b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f889 	bl	8003b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d020      	beq.n	8003a8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01b      	beq.n	8003a8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f06f 0210 	mvn.w	r2, #16
 8003a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2208      	movs	r2, #8
 8003a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f860 	bl	8003b38 <HAL_TIM_IC_CaptureCallback>
 8003a78:	e005      	b.n	8003a86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f852 	bl	8003b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f863 	bl	8003b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00c      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d007      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0201 	mvn.w	r2, #1
 8003aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fd fac4 	bl	8001038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00c      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d007      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f906 	bl	8003ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00c      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f834 	bl	8003b60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00c      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0220 	mvn.w	r2, #32
 8003b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f8d8 	bl	8003ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a46      	ldr	r2, [pc, #280]	@ (8003ca0 <TIM_Base_SetConfig+0x12c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d013      	beq.n	8003bb4 <TIM_Base_SetConfig+0x40>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b92:	d00f      	beq.n	8003bb4 <TIM_Base_SetConfig+0x40>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a43      	ldr	r2, [pc, #268]	@ (8003ca4 <TIM_Base_SetConfig+0x130>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d00b      	beq.n	8003bb4 <TIM_Base_SetConfig+0x40>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a42      	ldr	r2, [pc, #264]	@ (8003ca8 <TIM_Base_SetConfig+0x134>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d007      	beq.n	8003bb4 <TIM_Base_SetConfig+0x40>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a41      	ldr	r2, [pc, #260]	@ (8003cac <TIM_Base_SetConfig+0x138>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d003      	beq.n	8003bb4 <TIM_Base_SetConfig+0x40>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a40      	ldr	r2, [pc, #256]	@ (8003cb0 <TIM_Base_SetConfig+0x13c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d108      	bne.n	8003bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a35      	ldr	r2, [pc, #212]	@ (8003ca0 <TIM_Base_SetConfig+0x12c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d02b      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd4:	d027      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a32      	ldr	r2, [pc, #200]	@ (8003ca4 <TIM_Base_SetConfig+0x130>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d023      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a31      	ldr	r2, [pc, #196]	@ (8003ca8 <TIM_Base_SetConfig+0x134>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d01f      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a30      	ldr	r2, [pc, #192]	@ (8003cac <TIM_Base_SetConfig+0x138>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d01b      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a2f      	ldr	r2, [pc, #188]	@ (8003cb0 <TIM_Base_SetConfig+0x13c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d017      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a2e      	ldr	r2, [pc, #184]	@ (8003cb4 <TIM_Base_SetConfig+0x140>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d013      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a2d      	ldr	r2, [pc, #180]	@ (8003cb8 <TIM_Base_SetConfig+0x144>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00f      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a2c      	ldr	r2, [pc, #176]	@ (8003cbc <TIM_Base_SetConfig+0x148>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00b      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a2b      	ldr	r2, [pc, #172]	@ (8003cc0 <TIM_Base_SetConfig+0x14c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d007      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a2a      	ldr	r2, [pc, #168]	@ (8003cc4 <TIM_Base_SetConfig+0x150>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d003      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a29      	ldr	r2, [pc, #164]	@ (8003cc8 <TIM_Base_SetConfig+0x154>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d108      	bne.n	8003c38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a10      	ldr	r2, [pc, #64]	@ (8003ca0 <TIM_Base_SetConfig+0x12c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d003      	beq.n	8003c6c <TIM_Base_SetConfig+0xf8>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a12      	ldr	r2, [pc, #72]	@ (8003cb0 <TIM_Base_SetConfig+0x13c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d103      	bne.n	8003c74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d105      	bne.n	8003c92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f023 0201 	bic.w	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	611a      	str	r2, [r3, #16]
  }
}
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40010000 	.word	0x40010000
 8003ca4:	40000400 	.word	0x40000400
 8003ca8:	40000800 	.word	0x40000800
 8003cac:	40000c00 	.word	0x40000c00
 8003cb0:	40010400 	.word	0x40010400
 8003cb4:	40014000 	.word	0x40014000
 8003cb8:	40014400 	.word	0x40014400
 8003cbc:	40014800 	.word	0x40014800
 8003cc0:	40001800 	.word	0x40001800
 8003cc4:	40001c00 	.word	0x40001c00
 8003cc8:	40002000 	.word	0x40002000

08003ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e042      	b.n	8003d8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fd fcde 	bl	80016dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2224      	movs	r2, #36	@ 0x24
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f82b 	bl	8003d94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695a      	ldr	r2, [r3, #20]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d98:	b0c0      	sub	sp, #256	@ 0x100
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db0:	68d9      	ldr	r1, [r3, #12]
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	ea40 0301 	orr.w	r3, r0, r1
 8003dbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003dec:	f021 010c 	bic.w	r1, r1, #12
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0e:	6999      	ldr	r1, [r3, #24]
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	ea40 0301 	orr.w	r3, r0, r1
 8003e1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	4b8f      	ldr	r3, [pc, #572]	@ (8004060 <UART_SetConfig+0x2cc>)
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d005      	beq.n	8003e34 <UART_SetConfig+0xa0>
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4b8d      	ldr	r3, [pc, #564]	@ (8004064 <UART_SetConfig+0x2d0>)
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d104      	bne.n	8003e3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e34:	f7fe ffa8 	bl	8002d88 <HAL_RCC_GetPCLK2Freq>
 8003e38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e3c:	e003      	b.n	8003e46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e3e:	f7fe ff8f 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 8003e42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e50:	f040 810c 	bne.w	800406c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e66:	4622      	mov	r2, r4
 8003e68:	462b      	mov	r3, r5
 8003e6a:	1891      	adds	r1, r2, r2
 8003e6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e6e:	415b      	adcs	r3, r3
 8003e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e76:	4621      	mov	r1, r4
 8003e78:	eb12 0801 	adds.w	r8, r2, r1
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	eb43 0901 	adc.w	r9, r3, r1
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e96:	4690      	mov	r8, r2
 8003e98:	4699      	mov	r9, r3
 8003e9a:	4623      	mov	r3, r4
 8003e9c:	eb18 0303 	adds.w	r3, r8, r3
 8003ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ea4:	462b      	mov	r3, r5
 8003ea6:	eb49 0303 	adc.w	r3, r9, r3
 8003eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003eba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ebe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	18db      	adds	r3, r3, r3
 8003ec6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ec8:	4613      	mov	r3, r2
 8003eca:	eb42 0303 	adc.w	r3, r2, r3
 8003ece:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ed0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ed4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ed8:	f7fc f9ea 	bl	80002b0 <__aeabi_uldivmod>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4b61      	ldr	r3, [pc, #388]	@ (8004068 <UART_SetConfig+0x2d4>)
 8003ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	011c      	lsls	r4, r3, #4
 8003eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ef4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ef8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003efc:	4642      	mov	r2, r8
 8003efe:	464b      	mov	r3, r9
 8003f00:	1891      	adds	r1, r2, r2
 8003f02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f04:	415b      	adcs	r3, r3
 8003f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f0c:	4641      	mov	r1, r8
 8003f0e:	eb12 0a01 	adds.w	sl, r2, r1
 8003f12:	4649      	mov	r1, r9
 8003f14:	eb43 0b01 	adc.w	fp, r3, r1
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f2c:	4692      	mov	sl, r2
 8003f2e:	469b      	mov	fp, r3
 8003f30:	4643      	mov	r3, r8
 8003f32:	eb1a 0303 	adds.w	r3, sl, r3
 8003f36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f3a:	464b      	mov	r3, r9
 8003f3c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	18db      	adds	r3, r3, r3
 8003f5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f5e:	4613      	mov	r3, r2
 8003f60:	eb42 0303 	adc.w	r3, r2, r3
 8003f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f6e:	f7fc f99f 	bl	80002b0 <__aeabi_uldivmod>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4611      	mov	r1, r2
 8003f78:	4b3b      	ldr	r3, [pc, #236]	@ (8004068 <UART_SetConfig+0x2d4>)
 8003f7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	2264      	movs	r2, #100	@ 0x64
 8003f82:	fb02 f303 	mul.w	r3, r2, r3
 8003f86:	1acb      	subs	r3, r1, r3
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f8e:	4b36      	ldr	r3, [pc, #216]	@ (8004068 <UART_SetConfig+0x2d4>)
 8003f90:	fba3 2302 	umull	r2, r3, r3, r2
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f9c:	441c      	add	r4, r3
 8003f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fa8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003fac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003fb0:	4642      	mov	r2, r8
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	1891      	adds	r1, r2, r2
 8003fb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fb8:	415b      	adcs	r3, r3
 8003fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fc0:	4641      	mov	r1, r8
 8003fc2:	1851      	adds	r1, r2, r1
 8003fc4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fc6:	4649      	mov	r1, r9
 8003fc8:	414b      	adcs	r3, r1
 8003fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003fd8:	4659      	mov	r1, fp
 8003fda:	00cb      	lsls	r3, r1, #3
 8003fdc:	4651      	mov	r1, sl
 8003fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	00ca      	lsls	r2, r1, #3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4603      	mov	r3, r0
 8003fec:	4642      	mov	r2, r8
 8003fee:	189b      	adds	r3, r3, r2
 8003ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ff4:	464b      	mov	r3, r9
 8003ff6:	460a      	mov	r2, r1
 8003ff8:	eb42 0303 	adc.w	r3, r2, r3
 8003ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800400c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004010:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004014:	460b      	mov	r3, r1
 8004016:	18db      	adds	r3, r3, r3
 8004018:	62bb      	str	r3, [r7, #40]	@ 0x28
 800401a:	4613      	mov	r3, r2
 800401c:	eb42 0303 	adc.w	r3, r2, r3
 8004020:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004022:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004026:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800402a:	f7fc f941 	bl	80002b0 <__aeabi_uldivmod>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	4b0d      	ldr	r3, [pc, #52]	@ (8004068 <UART_SetConfig+0x2d4>)
 8004034:	fba3 1302 	umull	r1, r3, r3, r2
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	2164      	movs	r1, #100	@ 0x64
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	3332      	adds	r3, #50	@ 0x32
 8004046:	4a08      	ldr	r2, [pc, #32]	@ (8004068 <UART_SetConfig+0x2d4>)
 8004048:	fba2 2303 	umull	r2, r3, r2, r3
 800404c:	095b      	lsrs	r3, r3, #5
 800404e:	f003 0207 	and.w	r2, r3, #7
 8004052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4422      	add	r2, r4
 800405a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800405c:	e106      	b.n	800426c <UART_SetConfig+0x4d8>
 800405e:	bf00      	nop
 8004060:	40011000 	.word	0x40011000
 8004064:	40011400 	.word	0x40011400
 8004068:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800406c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004070:	2200      	movs	r2, #0
 8004072:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004076:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800407a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800407e:	4642      	mov	r2, r8
 8004080:	464b      	mov	r3, r9
 8004082:	1891      	adds	r1, r2, r2
 8004084:	6239      	str	r1, [r7, #32]
 8004086:	415b      	adcs	r3, r3
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
 800408a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800408e:	4641      	mov	r1, r8
 8004090:	1854      	adds	r4, r2, r1
 8004092:	4649      	mov	r1, r9
 8004094:	eb43 0501 	adc.w	r5, r3, r1
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	00eb      	lsls	r3, r5, #3
 80040a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040a6:	00e2      	lsls	r2, r4, #3
 80040a8:	4614      	mov	r4, r2
 80040aa:	461d      	mov	r5, r3
 80040ac:	4643      	mov	r3, r8
 80040ae:	18e3      	adds	r3, r4, r3
 80040b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040b4:	464b      	mov	r3, r9
 80040b6:	eb45 0303 	adc.w	r3, r5, r3
 80040ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040da:	4629      	mov	r1, r5
 80040dc:	008b      	lsls	r3, r1, #2
 80040de:	4621      	mov	r1, r4
 80040e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040e4:	4621      	mov	r1, r4
 80040e6:	008a      	lsls	r2, r1, #2
 80040e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040ec:	f7fc f8e0 	bl	80002b0 <__aeabi_uldivmod>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4b60      	ldr	r3, [pc, #384]	@ (8004278 <UART_SetConfig+0x4e4>)
 80040f6:	fba3 2302 	umull	r2, r3, r3, r2
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	011c      	lsls	r4, r3, #4
 80040fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004102:	2200      	movs	r2, #0
 8004104:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004108:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800410c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004110:	4642      	mov	r2, r8
 8004112:	464b      	mov	r3, r9
 8004114:	1891      	adds	r1, r2, r2
 8004116:	61b9      	str	r1, [r7, #24]
 8004118:	415b      	adcs	r3, r3
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004120:	4641      	mov	r1, r8
 8004122:	1851      	adds	r1, r2, r1
 8004124:	6139      	str	r1, [r7, #16]
 8004126:	4649      	mov	r1, r9
 8004128:	414b      	adcs	r3, r1
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004138:	4659      	mov	r1, fp
 800413a:	00cb      	lsls	r3, r1, #3
 800413c:	4651      	mov	r1, sl
 800413e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004142:	4651      	mov	r1, sl
 8004144:	00ca      	lsls	r2, r1, #3
 8004146:	4610      	mov	r0, r2
 8004148:	4619      	mov	r1, r3
 800414a:	4603      	mov	r3, r0
 800414c:	4642      	mov	r2, r8
 800414e:	189b      	adds	r3, r3, r2
 8004150:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004154:	464b      	mov	r3, r9
 8004156:	460a      	mov	r2, r1
 8004158:	eb42 0303 	adc.w	r3, r2, r3
 800415c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	67bb      	str	r3, [r7, #120]	@ 0x78
 800416a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004178:	4649      	mov	r1, r9
 800417a:	008b      	lsls	r3, r1, #2
 800417c:	4641      	mov	r1, r8
 800417e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004182:	4641      	mov	r1, r8
 8004184:	008a      	lsls	r2, r1, #2
 8004186:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800418a:	f7fc f891 	bl	80002b0 <__aeabi_uldivmod>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4611      	mov	r1, r2
 8004194:	4b38      	ldr	r3, [pc, #224]	@ (8004278 <UART_SetConfig+0x4e4>)
 8004196:	fba3 2301 	umull	r2, r3, r3, r1
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2264      	movs	r2, #100	@ 0x64
 800419e:	fb02 f303 	mul.w	r3, r2, r3
 80041a2:	1acb      	subs	r3, r1, r3
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	3332      	adds	r3, #50	@ 0x32
 80041a8:	4a33      	ldr	r2, [pc, #204]	@ (8004278 <UART_SetConfig+0x4e4>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041b4:	441c      	add	r4, r3
 80041b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ba:	2200      	movs	r2, #0
 80041bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80041be:	677a      	str	r2, [r7, #116]	@ 0x74
 80041c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041c4:	4642      	mov	r2, r8
 80041c6:	464b      	mov	r3, r9
 80041c8:	1891      	adds	r1, r2, r2
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	415b      	adcs	r3, r3
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041d4:	4641      	mov	r1, r8
 80041d6:	1851      	adds	r1, r2, r1
 80041d8:	6039      	str	r1, [r7, #0]
 80041da:	4649      	mov	r1, r9
 80041dc:	414b      	adcs	r3, r1
 80041de:	607b      	str	r3, [r7, #4]
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041ec:	4659      	mov	r1, fp
 80041ee:	00cb      	lsls	r3, r1, #3
 80041f0:	4651      	mov	r1, sl
 80041f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041f6:	4651      	mov	r1, sl
 80041f8:	00ca      	lsls	r2, r1, #3
 80041fa:	4610      	mov	r0, r2
 80041fc:	4619      	mov	r1, r3
 80041fe:	4603      	mov	r3, r0
 8004200:	4642      	mov	r2, r8
 8004202:	189b      	adds	r3, r3, r2
 8004204:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004206:	464b      	mov	r3, r9
 8004208:	460a      	mov	r2, r1
 800420a:	eb42 0303 	adc.w	r3, r2, r3
 800420e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	663b      	str	r3, [r7, #96]	@ 0x60
 800421a:	667a      	str	r2, [r7, #100]	@ 0x64
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004228:	4649      	mov	r1, r9
 800422a:	008b      	lsls	r3, r1, #2
 800422c:	4641      	mov	r1, r8
 800422e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004232:	4641      	mov	r1, r8
 8004234:	008a      	lsls	r2, r1, #2
 8004236:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800423a:	f7fc f839 	bl	80002b0 <__aeabi_uldivmod>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4b0d      	ldr	r3, [pc, #52]	@ (8004278 <UART_SetConfig+0x4e4>)
 8004244:	fba3 1302 	umull	r1, r3, r3, r2
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	2164      	movs	r1, #100	@ 0x64
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	3332      	adds	r3, #50	@ 0x32
 8004256:	4a08      	ldr	r2, [pc, #32]	@ (8004278 <UART_SetConfig+0x4e4>)
 8004258:	fba2 2303 	umull	r2, r3, r2, r3
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	f003 020f 	and.w	r2, r3, #15
 8004262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4422      	add	r2, r4
 800426a:	609a      	str	r2, [r3, #8]
}
 800426c:	bf00      	nop
 800426e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004272:	46bd      	mov	sp, r7
 8004274:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004278:	51eb851f 	.word	0x51eb851f

0800427c <__NVIC_SetPriority>:
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	6039      	str	r1, [r7, #0]
 8004286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428c:	2b00      	cmp	r3, #0
 800428e:	db0a      	blt.n	80042a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	b2da      	uxtb	r2, r3
 8004294:	490c      	ldr	r1, [pc, #48]	@ (80042c8 <__NVIC_SetPriority+0x4c>)
 8004296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429a:	0112      	lsls	r2, r2, #4
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	440b      	add	r3, r1
 80042a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80042a4:	e00a      	b.n	80042bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	4908      	ldr	r1, [pc, #32]	@ (80042cc <__NVIC_SetPriority+0x50>)
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	3b04      	subs	r3, #4
 80042b4:	0112      	lsls	r2, r2, #4
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	440b      	add	r3, r1
 80042ba:	761a      	strb	r2, [r3, #24]
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	e000e100 	.word	0xe000e100
 80042cc:	e000ed00 	.word	0xe000ed00

080042d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80042d4:	4b05      	ldr	r3, [pc, #20]	@ (80042ec <SysTick_Handler+0x1c>)
 80042d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80042d8:	f001 fd18 	bl	8005d0c <xTaskGetSchedulerState>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d001      	beq.n	80042e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80042e2:	f002 fb11 	bl	8006908 <xPortSysTickHandler>
  }
}
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	e000e010 	.word	0xe000e010

080042f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80042f4:	2100      	movs	r1, #0
 80042f6:	f06f 0004 	mvn.w	r0, #4
 80042fa:	f7ff ffbf 	bl	800427c <__NVIC_SetPriority>
#endif
}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800430a:	f3ef 8305 	mrs	r3, IPSR
 800430e:	603b      	str	r3, [r7, #0]
  return(result);
 8004310:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004316:	f06f 0305 	mvn.w	r3, #5
 800431a:	607b      	str	r3, [r7, #4]
 800431c:	e00c      	b.n	8004338 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800431e:	4b0a      	ldr	r3, [pc, #40]	@ (8004348 <osKernelInitialize+0x44>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d105      	bne.n	8004332 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004326:	4b08      	ldr	r3, [pc, #32]	@ (8004348 <osKernelInitialize+0x44>)
 8004328:	2201      	movs	r2, #1
 800432a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800432c:	2300      	movs	r3, #0
 800432e:	607b      	str	r3, [r7, #4]
 8004330:	e002      	b.n	8004338 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004332:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004336:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004338:	687b      	ldr	r3, [r7, #4]
}
 800433a:	4618      	mov	r0, r3
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	200005c4 	.word	0x200005c4

0800434c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004352:	f3ef 8305 	mrs	r3, IPSR
 8004356:	603b      	str	r3, [r7, #0]
  return(result);
 8004358:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <osKernelStart+0x1a>
    stat = osErrorISR;
 800435e:	f06f 0305 	mvn.w	r3, #5
 8004362:	607b      	str	r3, [r7, #4]
 8004364:	e010      	b.n	8004388 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004366:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <osKernelStart+0x48>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d109      	bne.n	8004382 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800436e:	f7ff ffbf 	bl	80042f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004372:	4b08      	ldr	r3, [pc, #32]	@ (8004394 <osKernelStart+0x48>)
 8004374:	2202      	movs	r2, #2
 8004376:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004378:	f001 f87a 	bl	8005470 <vTaskStartScheduler>
      stat = osOK;
 800437c:	2300      	movs	r3, #0
 800437e:	607b      	str	r3, [r7, #4]
 8004380:	e002      	b.n	8004388 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004382:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004386:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004388:	687b      	ldr	r3, [r7, #4]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	200005c4 	.word	0x200005c4

08004398 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004398:	b580      	push	{r7, lr}
 800439a:	b08e      	sub	sp, #56	@ 0x38
 800439c:	af04      	add	r7, sp, #16
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043a8:	f3ef 8305 	mrs	r3, IPSR
 80043ac:	617b      	str	r3, [r7, #20]
  return(result);
 80043ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d17e      	bne.n	80044b2 <osThreadNew+0x11a>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d07b      	beq.n	80044b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80043ba:	2380      	movs	r3, #128	@ 0x80
 80043bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80043be:	2318      	movs	r3, #24
 80043c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80043ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d045      	beq.n	800445e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <osThreadNew+0x48>
        name = attr->name;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <osThreadNew+0x6e>
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	2b38      	cmp	r3, #56	@ 0x38
 80043f8:	d805      	bhi.n	8004406 <osThreadNew+0x6e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <osThreadNew+0x72>
        return (NULL);
 8004406:	2300      	movs	r3, #0
 8004408:	e054      	b.n	80044b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	089b      	lsrs	r3, r3, #2
 8004418:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00e      	beq.n	8004440 <osThreadNew+0xa8>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	2b5b      	cmp	r3, #91	@ 0x5b
 8004428:	d90a      	bls.n	8004440 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800442e:	2b00      	cmp	r3, #0
 8004430:	d006      	beq.n	8004440 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <osThreadNew+0xa8>
        mem = 1;
 800443a:	2301      	movs	r3, #1
 800443c:	61bb      	str	r3, [r7, #24]
 800443e:	e010      	b.n	8004462 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10c      	bne.n	8004462 <osThreadNew+0xca>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d108      	bne.n	8004462 <osThreadNew+0xca>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d104      	bne.n	8004462 <osThreadNew+0xca>
          mem = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	61bb      	str	r3, [r7, #24]
 800445c:	e001      	b.n	8004462 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800445e:	2300      	movs	r3, #0
 8004460:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d110      	bne.n	800448a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004470:	9202      	str	r2, [sp, #8]
 8004472:	9301      	str	r3, [sp, #4]
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	6a3a      	ldr	r2, [r7, #32]
 800447c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 fe1a 	bl	80050b8 <xTaskCreateStatic>
 8004484:	4603      	mov	r3, r0
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	e013      	b.n	80044b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d110      	bne.n	80044b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	b29a      	uxth	r2, r3
 8004494:	f107 0310 	add.w	r3, r7, #16
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 fe68 	bl	8005178 <xTaskCreate>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d001      	beq.n	80044b2 <osThreadNew+0x11a>
            hTask = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80044b2:	693b      	ldr	r3, [r7, #16]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3728      	adds	r7, #40	@ 0x28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044c4:	f3ef 8305 	mrs	r3, IPSR
 80044c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80044ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <osDelay+0x1c>
    stat = osErrorISR;
 80044d0:	f06f 0305 	mvn.w	r3, #5
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	e007      	b.n	80044e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 ff8e 	bl	8005404 <vTaskDelay>
    }
  }

  return (stat);
 80044e8:	68fb      	ldr	r3, [r7, #12]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4a07      	ldr	r2, [pc, #28]	@ (8004520 <vApplicationGetIdleTaskMemory+0x2c>)
 8004504:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	4a06      	ldr	r2, [pc, #24]	@ (8004524 <vApplicationGetIdleTaskMemory+0x30>)
 800450a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2280      	movs	r2, #128	@ 0x80
 8004510:	601a      	str	r2, [r3, #0]
}
 8004512:	bf00      	nop
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	200005c8 	.word	0x200005c8
 8004524:	20000624 	.word	0x20000624

08004528 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4a07      	ldr	r2, [pc, #28]	@ (8004554 <vApplicationGetTimerTaskMemory+0x2c>)
 8004538:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	4a06      	ldr	r2, [pc, #24]	@ (8004558 <vApplicationGetTimerTaskMemory+0x30>)
 800453e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004546:	601a      	str	r2, [r3, #0]
}
 8004548:	bf00      	nop
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	20000824 	.word	0x20000824
 8004558:	20000880 	.word	0x20000880

0800455c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f103 0208 	add.w	r2, r3, #8
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004574:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f103 0208 	add.w	r2, r3, #8
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f103 0208 	add.w	r2, r3, #8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045b6:	b480      	push	{r7}
 80045b8:	b085      	sub	sp, #20
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	601a      	str	r2, [r3, #0]
}
 80045f2:	bf00      	nop
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045fe:	b480      	push	{r7}
 8004600:	b085      	sub	sp, #20
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004614:	d103      	bne.n	800461e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	e00c      	b.n	8004638 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3308      	adds	r3, #8
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	e002      	b.n	800462c <vListInsert+0x2e>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	429a      	cmp	r2, r3
 8004636:	d2f6      	bcs.n	8004626 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	601a      	str	r2, [r3, #0]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6892      	ldr	r2, [r2, #8]
 8004686:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6852      	ldr	r2, [r2, #4]
 8004690:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	d103      	bne.n	80046a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	1e5a      	subs	r2, r3, #1
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046ea:	bf00      	nop
 80046ec:	bf00      	nop
 80046ee:	e7fd      	b.n	80046ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80046f0:	f002 f87a 	bl	80067e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fc:	68f9      	ldr	r1, [r7, #12]
 80046fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004700:	fb01 f303 	mul.w	r3, r1, r3
 8004704:	441a      	add	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004720:	3b01      	subs	r3, #1
 8004722:	68f9      	ldr	r1, [r7, #12]
 8004724:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004726:	fb01 f303 	mul.w	r3, r1, r3
 800472a:	441a      	add	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	22ff      	movs	r2, #255	@ 0xff
 8004734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	22ff      	movs	r2, #255	@ 0xff
 800473c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d114      	bne.n	8004770 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d01a      	beq.n	8004784 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3310      	adds	r3, #16
 8004752:	4618      	mov	r0, r3
 8004754:	f001 f91a 	bl	800598c <xTaskRemoveFromEventList>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d012      	beq.n	8004784 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800475e:	4b0d      	ldr	r3, [pc, #52]	@ (8004794 <xQueueGenericReset+0xd0>)
 8004760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	e009      	b.n	8004784 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3310      	adds	r3, #16
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff fef1 	bl	800455c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3324      	adds	r3, #36	@ 0x24
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff feec 	bl	800455c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004784:	f002 f862 	bl	800684c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004788:	2301      	movs	r3, #1
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	e000ed04 	.word	0xe000ed04

08004798 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08e      	sub	sp, #56	@ 0x38
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10b      	bne.n	80047c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	e7fd      	b.n	80047c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10b      	bne.n	80047e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	e7fd      	b.n	80047de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <xQueueGenericCreateStatic+0x56>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <xQueueGenericCreateStatic+0x5a>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <xQueueGenericCreateStatic+0x5c>
 80047f2:	2300      	movs	r3, #0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10b      	bne.n	8004810 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80047f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	623b      	str	r3, [r7, #32]
}
 800480a:	bf00      	nop
 800480c:	bf00      	nop
 800480e:	e7fd      	b.n	800480c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d102      	bne.n	800481c <xQueueGenericCreateStatic+0x84>
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <xQueueGenericCreateStatic+0x88>
 800481c:	2301      	movs	r3, #1
 800481e:	e000      	b.n	8004822 <xQueueGenericCreateStatic+0x8a>
 8004820:	2300      	movs	r3, #0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10b      	bne.n	800483e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	61fb      	str	r3, [r7, #28]
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	e7fd      	b.n	800483a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800483e:	2350      	movs	r3, #80	@ 0x50
 8004840:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b50      	cmp	r3, #80	@ 0x50
 8004846:	d00b      	beq.n	8004860 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	61bb      	str	r3, [r7, #24]
}
 800485a:	bf00      	nop
 800485c:	bf00      	nop
 800485e:	e7fd      	b.n	800485c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004860:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00d      	beq.n	8004888 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800486c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004874:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	68b9      	ldr	r1, [r7, #8]
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 f805 	bl	8004892 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800488a:	4618      	mov	r0, r3
 800488c:	3730      	adds	r7, #48	@ 0x30
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b084      	sub	sp, #16
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
 800489e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d103      	bne.n	80048ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e002      	b.n	80048b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048c0:	2101      	movs	r1, #1
 80048c2:	69b8      	ldr	r0, [r7, #24]
 80048c4:	f7ff fefe 	bl	80046c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	78fa      	ldrb	r2, [r7, #3]
 80048cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08e      	sub	sp, #56	@ 0x38
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048e6:	2300      	movs	r3, #0
 80048e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80048ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10b      	bne.n	800490c <xQueueGenericSend+0x34>
	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	e7fd      	b.n	8004908 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d103      	bne.n	800491a <xQueueGenericSend+0x42>
 8004912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <xQueueGenericSend+0x46>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <xQueueGenericSend+0x48>
 800491e:	2300      	movs	r3, #0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10b      	bne.n	800493c <xQueueGenericSend+0x64>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004936:	bf00      	nop
 8004938:	bf00      	nop
 800493a:	e7fd      	b.n	8004938 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d103      	bne.n	800494a <xQueueGenericSend+0x72>
 8004942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <xQueueGenericSend+0x76>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <xQueueGenericSend+0x78>
 800494e:	2300      	movs	r3, #0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10b      	bne.n	800496c <xQueueGenericSend+0x94>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	623b      	str	r3, [r7, #32]
}
 8004966:	bf00      	nop
 8004968:	bf00      	nop
 800496a:	e7fd      	b.n	8004968 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800496c:	f001 f9ce 	bl	8005d0c <xTaskGetSchedulerState>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <xQueueGenericSend+0xa4>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <xQueueGenericSend+0xa8>
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <xQueueGenericSend+0xaa>
 8004980:	2300      	movs	r3, #0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10b      	bne.n	800499e <xQueueGenericSend+0xc6>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	61fb      	str	r3, [r7, #28]
}
 8004998:	bf00      	nop
 800499a:	bf00      	nop
 800499c:	e7fd      	b.n	800499a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800499e:	f001 ff23 	bl	80067e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d302      	bcc.n	80049b4 <xQueueGenericSend+0xdc>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d129      	bne.n	8004a08 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049ba:	f000 fa0f 	bl	8004ddc <prvCopyDataToQueue>
 80049be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d010      	beq.n	80049ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ca:	3324      	adds	r3, #36	@ 0x24
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 ffdd 	bl	800598c <xTaskRemoveFromEventList>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d013      	beq.n	8004a00 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049d8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ad8 <xQueueGenericSend+0x200>)
 80049da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	e00a      	b.n	8004a00 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049f0:	4b39      	ldr	r3, [pc, #228]	@ (8004ad8 <xQueueGenericSend+0x200>)
 80049f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a00:	f001 ff24 	bl	800684c <vPortExitCritical>
				return pdPASS;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e063      	b.n	8004ad0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d103      	bne.n	8004a16 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a0e:	f001 ff1d 	bl	800684c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	e05c      	b.n	8004ad0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d106      	bne.n	8004a2a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a1c:	f107 0314 	add.w	r3, r7, #20
 8004a20:	4618      	mov	r0, r3
 8004a22:	f001 f817 	bl	8005a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a26:	2301      	movs	r3, #1
 8004a28:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a2a:	f001 ff0f 	bl	800684c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a2e:	f000 fd87 	bl	8005540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a32:	f001 fed9 	bl	80067e8 <vPortEnterCritical>
 8004a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a3c:	b25b      	sxtb	r3, r3
 8004a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a42:	d103      	bne.n	8004a4c <xQueueGenericSend+0x174>
 8004a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a52:	b25b      	sxtb	r3, r3
 8004a54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a58:	d103      	bne.n	8004a62 <xQueueGenericSend+0x18a>
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a62:	f001 fef3 	bl	800684c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a66:	1d3a      	adds	r2, r7, #4
 8004a68:	f107 0314 	add.w	r3, r7, #20
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 f806 	bl	8005a80 <xTaskCheckForTimeOut>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d124      	bne.n	8004ac4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a7c:	f000 faa6 	bl	8004fcc <prvIsQueueFull>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d018      	beq.n	8004ab8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a88:	3310      	adds	r3, #16
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 ff2a 	bl	80058e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a96:	f000 fa31 	bl	8004efc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a9a:	f000 fd5f 	bl	800555c <xTaskResumeAll>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f47f af7c 	bne.w	800499e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad8 <xQueueGenericSend+0x200>)
 8004aa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	e772      	b.n	800499e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ab8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004aba:	f000 fa1f 	bl	8004efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004abe:	f000 fd4d 	bl	800555c <xTaskResumeAll>
 8004ac2:	e76c      	b.n	800499e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ac6:	f000 fa19 	bl	8004efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004aca:	f000 fd47 	bl	800555c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ace:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3738      	adds	r7, #56	@ 0x38
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	e000ed04 	.word	0xe000ed04

08004adc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b090      	sub	sp, #64	@ 0x40
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10b      	bne.n	8004b0c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b06:	bf00      	nop
 8004b08:	bf00      	nop
 8004b0a:	e7fd      	b.n	8004b08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d103      	bne.n	8004b1a <xQueueGenericSendFromISR+0x3e>
 8004b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <xQueueGenericSendFromISR+0x42>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <xQueueGenericSendFromISR+0x44>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10b      	bne.n	8004b3c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b36:	bf00      	nop
 8004b38:	bf00      	nop
 8004b3a:	e7fd      	b.n	8004b38 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d103      	bne.n	8004b4a <xQueueGenericSendFromISR+0x6e>
 8004b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <xQueueGenericSendFromISR+0x72>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <xQueueGenericSendFromISR+0x74>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10b      	bne.n	8004b6c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	623b      	str	r3, [r7, #32]
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	e7fd      	b.n	8004b68 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b6c:	f001 ff1c 	bl	80069a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b70:	f3ef 8211 	mrs	r2, BASEPRI
 8004b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	61fa      	str	r2, [r7, #28]
 8004b86:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b88:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b8a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d302      	bcc.n	8004b9e <xQueueGenericSendFromISR+0xc2>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d12f      	bne.n	8004bfe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ba4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	68b9      	ldr	r1, [r7, #8]
 8004bb2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004bb4:	f000 f912 	bl	8004ddc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004bb8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bc0:	d112      	bne.n	8004be8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d016      	beq.n	8004bf8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bcc:	3324      	adds	r3, #36	@ 0x24
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fedc 	bl	800598c <xTaskRemoveFromEventList>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00e      	beq.n	8004bf8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00b      	beq.n	8004bf8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	e007      	b.n	8004bf8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004be8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004bec:	3301      	adds	r3, #1
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	b25a      	sxtb	r2, r3
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004bfc:	e001      	b.n	8004c02 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c04:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3740      	adds	r7, #64	@ 0x40
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08c      	sub	sp, #48	@ 0x30
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c24:	2300      	movs	r3, #0
 8004c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10b      	bne.n	8004c4a <xQueueReceive+0x32>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	623b      	str	r3, [r7, #32]
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop
 8004c48:	e7fd      	b.n	8004c46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d103      	bne.n	8004c58 <xQueueReceive+0x40>
 8004c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <xQueueReceive+0x44>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <xQueueReceive+0x46>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10b      	bne.n	8004c7a <xQueueReceive+0x62>
	__asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	61fb      	str	r3, [r7, #28]
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop
 8004c78:	e7fd      	b.n	8004c76 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c7a:	f001 f847 	bl	8005d0c <xTaskGetSchedulerState>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d102      	bne.n	8004c8a <xQueueReceive+0x72>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <xQueueReceive+0x76>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <xQueueReceive+0x78>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <xQueueReceive+0x94>
	__asm volatile
 8004c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	61bb      	str	r3, [r7, #24]
}
 8004ca6:	bf00      	nop
 8004ca8:	bf00      	nop
 8004caa:	e7fd      	b.n	8004ca8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cac:	f001 fd9c 	bl	80067e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01f      	beq.n	8004cfc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cbc:	68b9      	ldr	r1, [r7, #8]
 8004cbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cc0:	f000 f8f6 	bl	8004eb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	1e5a      	subs	r2, r3, #1
 8004cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00f      	beq.n	8004cf4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd6:	3310      	adds	r3, #16
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fe57 	bl	800598c <xTaskRemoveFromEventList>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d007      	beq.n	8004cf4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ce4:	4b3c      	ldr	r3, [pc, #240]	@ (8004dd8 <xQueueReceive+0x1c0>)
 8004ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cf4:	f001 fdaa 	bl	800684c <vPortExitCritical>
				return pdPASS;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e069      	b.n	8004dd0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d103      	bne.n	8004d0a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d02:	f001 fda3 	bl	800684c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d06:	2300      	movs	r3, #0
 8004d08:	e062      	b.n	8004dd0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d106      	bne.n	8004d1e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d10:	f107 0310 	add.w	r3, r7, #16
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 fe9d 	bl	8005a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d1e:	f001 fd95 	bl	800684c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d22:	f000 fc0d 	bl	8005540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d26:	f001 fd5f 	bl	80067e8 <vPortEnterCritical>
 8004d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d30:	b25b      	sxtb	r3, r3
 8004d32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d36:	d103      	bne.n	8004d40 <xQueueReceive+0x128>
 8004d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d46:	b25b      	sxtb	r3, r3
 8004d48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d4c:	d103      	bne.n	8004d56 <xQueueReceive+0x13e>
 8004d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d56:	f001 fd79 	bl	800684c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d5a:	1d3a      	adds	r2, r7, #4
 8004d5c:	f107 0310 	add.w	r3, r7, #16
 8004d60:	4611      	mov	r1, r2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fe8c 	bl	8005a80 <xTaskCheckForTimeOut>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d123      	bne.n	8004db6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d70:	f000 f916 	bl	8004fa0 <prvIsQueueEmpty>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d017      	beq.n	8004daa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7c:	3324      	adds	r3, #36	@ 0x24
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	4611      	mov	r1, r2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fdb0 	bl	80058e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d8a:	f000 f8b7 	bl	8004efc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d8e:	f000 fbe5 	bl	800555c <xTaskResumeAll>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d189      	bne.n	8004cac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004d98:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd8 <xQueueReceive+0x1c0>)
 8004d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	e780      	b.n	8004cac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004daa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dac:	f000 f8a6 	bl	8004efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004db0:	f000 fbd4 	bl	800555c <xTaskResumeAll>
 8004db4:	e77a      	b.n	8004cac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004db6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004db8:	f000 f8a0 	bl	8004efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dbc:	f000 fbce 	bl	800555c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dc2:	f000 f8ed 	bl	8004fa0 <prvIsQueueEmpty>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f43f af6f 	beq.w	8004cac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004dce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3730      	adds	r7, #48	@ 0x30
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	e000ed04 	.word	0xe000ed04

08004ddc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10d      	bne.n	8004e16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d14d      	bne.n	8004e9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 ff9e 	bl	8005d48 <xTaskPriorityDisinherit>
 8004e0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	609a      	str	r2, [r3, #8]
 8004e14:	e043      	b.n	8004e9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d119      	bne.n	8004e50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6858      	ldr	r0, [r3, #4]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e24:	461a      	mov	r2, r3
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	f002 f842 	bl	8006eb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e34:	441a      	add	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d32b      	bcc.n	8004e9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	605a      	str	r2, [r3, #4]
 8004e4e:	e026      	b.n	8004e9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	68d8      	ldr	r0, [r3, #12]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	461a      	mov	r2, r3
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	f002 f828 	bl	8006eb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e68:	425b      	negs	r3, r3
 8004e6a:	441a      	add	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d207      	bcs.n	8004e8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e84:	425b      	negs	r3, r3
 8004e86:	441a      	add	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d105      	bne.n	8004e9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004ea6:	697b      	ldr	r3, [r7, #20]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d018      	beq.n	8004ef4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eca:	441a      	add	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d303      	bcc.n	8004ee4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68d9      	ldr	r1, [r3, #12]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eec:	461a      	mov	r2, r3
 8004eee:	6838      	ldr	r0, [r7, #0]
 8004ef0:	f001 ffde 	bl	8006eb0 <memcpy>
	}
}
 8004ef4:	bf00      	nop
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f04:	f001 fc70 	bl	80067e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f10:	e011      	b.n	8004f36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d012      	beq.n	8004f40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3324      	adds	r3, #36	@ 0x24
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fd34 	bl	800598c <xTaskRemoveFromEventList>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f2a:	f000 fe0d 	bl	8005b48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	dce9      	bgt.n	8004f12 <prvUnlockQueue+0x16>
 8004f3e:	e000      	b.n	8004f42 <prvUnlockQueue+0x46>
					break;
 8004f40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	22ff      	movs	r2, #255	@ 0xff
 8004f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004f4a:	f001 fc7f 	bl	800684c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f4e:	f001 fc4b 	bl	80067e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f5a:	e011      	b.n	8004f80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d012      	beq.n	8004f8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3310      	adds	r3, #16
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fd0f 	bl	800598c <xTaskRemoveFromEventList>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f74:	f000 fde8 	bl	8005b48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f78:	7bbb      	ldrb	r3, [r7, #14]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	dce9      	bgt.n	8004f5c <prvUnlockQueue+0x60>
 8004f88:	e000      	b.n	8004f8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	22ff      	movs	r2, #255	@ 0xff
 8004f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f94:	f001 fc5a 	bl	800684c <vPortExitCritical>
}
 8004f98:	bf00      	nop
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fa8:	f001 fc1e 	bl	80067e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d102      	bne.n	8004fba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e001      	b.n	8004fbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fbe:	f001 fc45 	bl	800684c <vPortExitCritical>

	return xReturn;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fd4:	f001 fc08 	bl	80067e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d102      	bne.n	8004fea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e001      	b.n	8004fee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fee:	f001 fc2d 	bl	800684c <vPortExitCritical>

	return xReturn;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	e014      	b.n	8005036 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800500c:	4a0f      	ldr	r2, [pc, #60]	@ (800504c <vQueueAddToRegistry+0x50>)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005018:	490c      	ldr	r1, [pc, #48]	@ (800504c <vQueueAddToRegistry+0x50>)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005022:	4a0a      	ldr	r2, [pc, #40]	@ (800504c <vQueueAddToRegistry+0x50>)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	4413      	add	r3, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800502e:	e006      	b.n	800503e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3301      	adds	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b07      	cmp	r3, #7
 800503a:	d9e7      	bls.n	800500c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	20000c80 	.word	0x20000c80

08005050 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005060:	f001 fbc2 	bl	80067e8 <vPortEnterCritical>
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800506a:	b25b      	sxtb	r3, r3
 800506c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005070:	d103      	bne.n	800507a <vQueueWaitForMessageRestricted+0x2a>
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005080:	b25b      	sxtb	r3, r3
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005086:	d103      	bne.n	8005090 <vQueueWaitForMessageRestricted+0x40>
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005090:	f001 fbdc 	bl	800684c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005098:	2b00      	cmp	r3, #0
 800509a:	d106      	bne.n	80050aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	3324      	adds	r3, #36	@ 0x24
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fc45 	bl	8005934 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050aa:	6978      	ldr	r0, [r7, #20]
 80050ac:	f7ff ff26 	bl	8004efc <prvUnlockQueue>
	}
 80050b0:	bf00      	nop
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08e      	sub	sp, #56	@ 0x38
 80050bc:	af04      	add	r7, sp, #16
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10b      	bne.n	80050e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	623b      	str	r3, [r7, #32]
}
 80050de:	bf00      	nop
 80050e0:	bf00      	nop
 80050e2:	e7fd      	b.n	80050e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10b      	bne.n	8005102 <xTaskCreateStatic+0x4a>
	__asm volatile
 80050ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	61fb      	str	r3, [r7, #28]
}
 80050fc:	bf00      	nop
 80050fe:	bf00      	nop
 8005100:	e7fd      	b.n	80050fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005102:	235c      	movs	r3, #92	@ 0x5c
 8005104:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b5c      	cmp	r3, #92	@ 0x5c
 800510a:	d00b      	beq.n	8005124 <xTaskCreateStatic+0x6c>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	61bb      	str	r3, [r7, #24]
}
 800511e:	bf00      	nop
 8005120:	bf00      	nop
 8005122:	e7fd      	b.n	8005120 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005124:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01e      	beq.n	800516a <xTaskCreateStatic+0xb2>
 800512c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800512e:	2b00      	cmp	r3, #0
 8005130:	d01b      	beq.n	800516a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005134:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800513a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	2202      	movs	r2, #2
 8005140:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005144:	2300      	movs	r3, #0
 8005146:	9303      	str	r3, [sp, #12]
 8005148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514a:	9302      	str	r3, [sp, #8]
 800514c:	f107 0314 	add.w	r3, r7, #20
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	68b9      	ldr	r1, [r7, #8]
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f850 	bl	8005202 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005162:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005164:	f000 f8de 	bl	8005324 <prvAddNewTaskToReadyList>
 8005168:	e001      	b.n	800516e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800516e:	697b      	ldr	r3, [r7, #20]
	}
 8005170:	4618      	mov	r0, r3
 8005172:	3728      	adds	r7, #40	@ 0x28
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08c      	sub	sp, #48	@ 0x30
 800517c:	af04      	add	r7, sp, #16
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005188:	88fb      	ldrh	r3, [r7, #6]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4618      	mov	r0, r3
 800518e:	f001 fc4d 	bl	8006a2c <pvPortMalloc>
 8005192:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00e      	beq.n	80051b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800519a:	205c      	movs	r0, #92	@ 0x5c
 800519c:	f001 fc46 	bl	8006a2c <pvPortMalloc>
 80051a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80051ae:	e005      	b.n	80051bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051b0:	6978      	ldr	r0, [r7, #20]
 80051b2:	f001 fd09 	bl	8006bc8 <vPortFree>
 80051b6:	e001      	b.n	80051bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051b8:	2300      	movs	r3, #0
 80051ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d017      	beq.n	80051f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051ca:	88fa      	ldrh	r2, [r7, #6]
 80051cc:	2300      	movs	r3, #0
 80051ce:	9303      	str	r3, [sp, #12]
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	9302      	str	r3, [sp, #8]
 80051d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d6:	9301      	str	r3, [sp, #4]
 80051d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	68b9      	ldr	r1, [r7, #8]
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f80e 	bl	8005202 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051e6:	69f8      	ldr	r0, [r7, #28]
 80051e8:	f000 f89c 	bl	8005324 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051ec:	2301      	movs	r3, #1
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	e002      	b.n	80051f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80051f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051f8:	69bb      	ldr	r3, [r7, #24]
	}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3720      	adds	r7, #32
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b088      	sub	sp, #32
 8005206:	af00      	add	r7, sp, #0
 8005208:	60f8      	str	r0, [r7, #12]
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	607a      	str	r2, [r7, #4]
 800520e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005212:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	461a      	mov	r2, r3
 800521a:	21a5      	movs	r1, #165	@ 0xa5
 800521c:	f001 fe14 	bl	8006e48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005222:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800522a:	3b01      	subs	r3, #1
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	f023 0307 	bic.w	r3, r3, #7
 8005238:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00b      	beq.n	800525c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	617b      	str	r3, [r7, #20]
}
 8005256:	bf00      	nop
 8005258:	bf00      	nop
 800525a:	e7fd      	b.n	8005258 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d01f      	beq.n	80052a2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005262:	2300      	movs	r3, #0
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	e012      	b.n	800528e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	7819      	ldrb	r1, [r3, #0]
 8005270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	3334      	adds	r3, #52	@ 0x34
 8005278:	460a      	mov	r2, r1
 800527a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d006      	beq.n	8005296 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	3301      	adds	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	2b0f      	cmp	r3, #15
 8005292:	d9e9      	bls.n	8005268 <prvInitialiseNewTask+0x66>
 8005294:	e000      	b.n	8005298 <prvInitialiseNewTask+0x96>
			{
				break;
 8005296:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052a0:	e003      	b.n	80052aa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ac:	2b37      	cmp	r3, #55	@ 0x37
 80052ae:	d901      	bls.n	80052b4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052b0:	2337      	movs	r3, #55	@ 0x37
 80052b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052b8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052be:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c2:	2200      	movs	r2, #0
 80052c4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c8:	3304      	adds	r3, #4
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff f966 	bl	800459c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d2:	3318      	adds	r3, #24
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff f961 	bl	800459c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80052e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f2:	2200      	movs	r2, #0
 80052f4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	68f9      	ldr	r1, [r7, #12]
 8005302:	69b8      	ldr	r0, [r7, #24]
 8005304:	f001 f93e 	bl	8006584 <pxPortInitialiseStack>
 8005308:	4602      	mov	r2, r0
 800530a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800530e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005318:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800531a:	bf00      	nop
 800531c:	3720      	adds	r7, #32
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800532c:	f001 fa5c 	bl	80067e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005330:	4b2d      	ldr	r3, [pc, #180]	@ (80053e8 <prvAddNewTaskToReadyList+0xc4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	4a2c      	ldr	r2, [pc, #176]	@ (80053e8 <prvAddNewTaskToReadyList+0xc4>)
 8005338:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800533a:	4b2c      	ldr	r3, [pc, #176]	@ (80053ec <prvAddNewTaskToReadyList+0xc8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d109      	bne.n	8005356 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005342:	4a2a      	ldr	r2, [pc, #168]	@ (80053ec <prvAddNewTaskToReadyList+0xc8>)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005348:	4b27      	ldr	r3, [pc, #156]	@ (80053e8 <prvAddNewTaskToReadyList+0xc4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d110      	bne.n	8005372 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005350:	f000 fc1e 	bl	8005b90 <prvInitialiseTaskLists>
 8005354:	e00d      	b.n	8005372 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005356:	4b26      	ldr	r3, [pc, #152]	@ (80053f0 <prvAddNewTaskToReadyList+0xcc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d109      	bne.n	8005372 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800535e:	4b23      	ldr	r3, [pc, #140]	@ (80053ec <prvAddNewTaskToReadyList+0xc8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005368:	429a      	cmp	r2, r3
 800536a:	d802      	bhi.n	8005372 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800536c:	4a1f      	ldr	r2, [pc, #124]	@ (80053ec <prvAddNewTaskToReadyList+0xc8>)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005372:	4b20      	ldr	r3, [pc, #128]	@ (80053f4 <prvAddNewTaskToReadyList+0xd0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3301      	adds	r3, #1
 8005378:	4a1e      	ldr	r2, [pc, #120]	@ (80053f4 <prvAddNewTaskToReadyList+0xd0>)
 800537a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800537c:	4b1d      	ldr	r3, [pc, #116]	@ (80053f4 <prvAddNewTaskToReadyList+0xd0>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005388:	4b1b      	ldr	r3, [pc, #108]	@ (80053f8 <prvAddNewTaskToReadyList+0xd4>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d903      	bls.n	8005398 <prvAddNewTaskToReadyList+0x74>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005394:	4a18      	ldr	r2, [pc, #96]	@ (80053f8 <prvAddNewTaskToReadyList+0xd4>)
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4a15      	ldr	r2, [pc, #84]	@ (80053fc <prvAddNewTaskToReadyList+0xd8>)
 80053a6:	441a      	add	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4619      	mov	r1, r3
 80053ae:	4610      	mov	r0, r2
 80053b0:	f7ff f901 	bl	80045b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053b4:	f001 fa4a 	bl	800684c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053b8:	4b0d      	ldr	r3, [pc, #52]	@ (80053f0 <prvAddNewTaskToReadyList+0xcc>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00e      	beq.n	80053de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053c0:	4b0a      	ldr	r3, [pc, #40]	@ (80053ec <prvAddNewTaskToReadyList+0xc8>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d207      	bcs.n	80053de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005400 <prvAddNewTaskToReadyList+0xdc>)
 80053d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20001194 	.word	0x20001194
 80053ec:	20000cc0 	.word	0x20000cc0
 80053f0:	200011a0 	.word	0x200011a0
 80053f4:	200011b0 	.word	0x200011b0
 80053f8:	2000119c 	.word	0x2000119c
 80053fc:	20000cc4 	.word	0x20000cc4
 8005400:	e000ed04 	.word	0xe000ed04

08005404 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800540c:	2300      	movs	r3, #0
 800540e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d018      	beq.n	8005448 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005416:	4b14      	ldr	r3, [pc, #80]	@ (8005468 <vTaskDelay+0x64>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00b      	beq.n	8005436 <vTaskDelay+0x32>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	60bb      	str	r3, [r7, #8]
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	e7fd      	b.n	8005432 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005436:	f000 f883 	bl	8005540 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800543a:	2100      	movs	r1, #0
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fcf3 	bl	8005e28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005442:	f000 f88b 	bl	800555c <xTaskResumeAll>
 8005446:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d107      	bne.n	800545e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800544e:	4b07      	ldr	r3, [pc, #28]	@ (800546c <vTaskDelay+0x68>)
 8005450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800545e:	bf00      	nop
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	200011bc 	.word	0x200011bc
 800546c:	e000ed04 	.word	0xe000ed04

08005470 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08a      	sub	sp, #40	@ 0x28
 8005474:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005476:	2300      	movs	r3, #0
 8005478:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800547a:	2300      	movs	r3, #0
 800547c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800547e:	463a      	mov	r2, r7
 8005480:	1d39      	adds	r1, r7, #4
 8005482:	f107 0308 	add.w	r3, r7, #8
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff f834 	bl	80044f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800548c:	6839      	ldr	r1, [r7, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	9202      	str	r2, [sp, #8]
 8005494:	9301      	str	r3, [sp, #4]
 8005496:	2300      	movs	r3, #0
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	2300      	movs	r3, #0
 800549c:	460a      	mov	r2, r1
 800549e:	4922      	ldr	r1, [pc, #136]	@ (8005528 <vTaskStartScheduler+0xb8>)
 80054a0:	4822      	ldr	r0, [pc, #136]	@ (800552c <vTaskStartScheduler+0xbc>)
 80054a2:	f7ff fe09 	bl	80050b8 <xTaskCreateStatic>
 80054a6:	4603      	mov	r3, r0
 80054a8:	4a21      	ldr	r2, [pc, #132]	@ (8005530 <vTaskStartScheduler+0xc0>)
 80054aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054ac:	4b20      	ldr	r3, [pc, #128]	@ (8005530 <vTaskStartScheduler+0xc0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054b4:	2301      	movs	r3, #1
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	e001      	b.n	80054be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d102      	bne.n	80054ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054c4:	f000 fd04 	bl	8005ed0 <xTimerCreateTimerTask>
 80054c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d116      	bne.n	80054fe <vTaskStartScheduler+0x8e>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	613b      	str	r3, [r7, #16]
}
 80054e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054e4:	4b13      	ldr	r3, [pc, #76]	@ (8005534 <vTaskStartScheduler+0xc4>)
 80054e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054ec:	4b12      	ldr	r3, [pc, #72]	@ (8005538 <vTaskStartScheduler+0xc8>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054f2:	4b12      	ldr	r3, [pc, #72]	@ (800553c <vTaskStartScheduler+0xcc>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054f8:	f001 f8d2 	bl	80066a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054fc:	e00f      	b.n	800551e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005504:	d10b      	bne.n	800551e <vTaskStartScheduler+0xae>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	60fb      	str	r3, [r7, #12]
}
 8005518:	bf00      	nop
 800551a:	bf00      	nop
 800551c:	e7fd      	b.n	800551a <vTaskStartScheduler+0xaa>
}
 800551e:	bf00      	nop
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	080077b0 	.word	0x080077b0
 800552c:	08005b61 	.word	0x08005b61
 8005530:	200011b8 	.word	0x200011b8
 8005534:	200011b4 	.word	0x200011b4
 8005538:	200011a0 	.word	0x200011a0
 800553c:	20001198 	.word	0x20001198

08005540 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005544:	4b04      	ldr	r3, [pc, #16]	@ (8005558 <vTaskSuspendAll+0x18>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3301      	adds	r3, #1
 800554a:	4a03      	ldr	r2, [pc, #12]	@ (8005558 <vTaskSuspendAll+0x18>)
 800554c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800554e:	bf00      	nop
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	200011bc 	.word	0x200011bc

0800555c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005566:	2300      	movs	r3, #0
 8005568:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800556a:	4b42      	ldr	r3, [pc, #264]	@ (8005674 <xTaskResumeAll+0x118>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10b      	bne.n	800558a <xTaskResumeAll+0x2e>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	603b      	str	r3, [r7, #0]
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	e7fd      	b.n	8005586 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800558a:	f001 f92d 	bl	80067e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800558e:	4b39      	ldr	r3, [pc, #228]	@ (8005674 <xTaskResumeAll+0x118>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3b01      	subs	r3, #1
 8005594:	4a37      	ldr	r2, [pc, #220]	@ (8005674 <xTaskResumeAll+0x118>)
 8005596:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005598:	4b36      	ldr	r3, [pc, #216]	@ (8005674 <xTaskResumeAll+0x118>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d162      	bne.n	8005666 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055a0:	4b35      	ldr	r3, [pc, #212]	@ (8005678 <xTaskResumeAll+0x11c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d05e      	beq.n	8005666 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055a8:	e02f      	b.n	800560a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055aa:	4b34      	ldr	r3, [pc, #208]	@ (800567c <xTaskResumeAll+0x120>)
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3318      	adds	r3, #24
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff f85a 	bl	8004670 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3304      	adds	r3, #4
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff f855 	bl	8004670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005680 <xTaskResumeAll+0x124>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d903      	bls.n	80055da <xTaskResumeAll+0x7e>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d6:	4a2a      	ldr	r2, [pc, #168]	@ (8005680 <xTaskResumeAll+0x124>)
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4a27      	ldr	r2, [pc, #156]	@ (8005684 <xTaskResumeAll+0x128>)
 80055e8:	441a      	add	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3304      	adds	r3, #4
 80055ee:	4619      	mov	r1, r3
 80055f0:	4610      	mov	r0, r2
 80055f2:	f7fe ffe0 	bl	80045b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055fa:	4b23      	ldr	r3, [pc, #140]	@ (8005688 <xTaskResumeAll+0x12c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005600:	429a      	cmp	r2, r3
 8005602:	d302      	bcc.n	800560a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005604:	4b21      	ldr	r3, [pc, #132]	@ (800568c <xTaskResumeAll+0x130>)
 8005606:	2201      	movs	r2, #1
 8005608:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800560a:	4b1c      	ldr	r3, [pc, #112]	@ (800567c <xTaskResumeAll+0x120>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1cb      	bne.n	80055aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005618:	f000 fb58 	bl	8005ccc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800561c:	4b1c      	ldr	r3, [pc, #112]	@ (8005690 <xTaskResumeAll+0x134>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d010      	beq.n	800564a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005628:	f000 f846 	bl	80056b8 <xTaskIncrementTick>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005632:	4b16      	ldr	r3, [pc, #88]	@ (800568c <xTaskResumeAll+0x130>)
 8005634:	2201      	movs	r2, #1
 8005636:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3b01      	subs	r3, #1
 800563c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1f1      	bne.n	8005628 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005644:	4b12      	ldr	r3, [pc, #72]	@ (8005690 <xTaskResumeAll+0x134>)
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800564a:	4b10      	ldr	r3, [pc, #64]	@ (800568c <xTaskResumeAll+0x130>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d009      	beq.n	8005666 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005652:	2301      	movs	r3, #1
 8005654:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005656:	4b0f      	ldr	r3, [pc, #60]	@ (8005694 <xTaskResumeAll+0x138>)
 8005658:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005666:	f001 f8f1 	bl	800684c <vPortExitCritical>

	return xAlreadyYielded;
 800566a:	68bb      	ldr	r3, [r7, #8]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	200011bc 	.word	0x200011bc
 8005678:	20001194 	.word	0x20001194
 800567c:	20001154 	.word	0x20001154
 8005680:	2000119c 	.word	0x2000119c
 8005684:	20000cc4 	.word	0x20000cc4
 8005688:	20000cc0 	.word	0x20000cc0
 800568c:	200011a8 	.word	0x200011a8
 8005690:	200011a4 	.word	0x200011a4
 8005694:	e000ed04 	.word	0xe000ed04

08005698 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800569e:	4b05      	ldr	r3, [pc, #20]	@ (80056b4 <xTaskGetTickCount+0x1c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056a4:	687b      	ldr	r3, [r7, #4]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	20001198 	.word	0x20001198

080056b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056c2:	4b4f      	ldr	r3, [pc, #316]	@ (8005800 <xTaskIncrementTick+0x148>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f040 8090 	bne.w	80057ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056cc:	4b4d      	ldr	r3, [pc, #308]	@ (8005804 <xTaskIncrementTick+0x14c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3301      	adds	r3, #1
 80056d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056d4:	4a4b      	ldr	r2, [pc, #300]	@ (8005804 <xTaskIncrementTick+0x14c>)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d121      	bne.n	8005724 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80056e0:	4b49      	ldr	r3, [pc, #292]	@ (8005808 <xTaskIncrementTick+0x150>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00b      	beq.n	8005702 <xTaskIncrementTick+0x4a>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	603b      	str	r3, [r7, #0]
}
 80056fc:	bf00      	nop
 80056fe:	bf00      	nop
 8005700:	e7fd      	b.n	80056fe <xTaskIncrementTick+0x46>
 8005702:	4b41      	ldr	r3, [pc, #260]	@ (8005808 <xTaskIncrementTick+0x150>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	4b40      	ldr	r3, [pc, #256]	@ (800580c <xTaskIncrementTick+0x154>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a3e      	ldr	r2, [pc, #248]	@ (8005808 <xTaskIncrementTick+0x150>)
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	4a3e      	ldr	r2, [pc, #248]	@ (800580c <xTaskIncrementTick+0x154>)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	4b3e      	ldr	r3, [pc, #248]	@ (8005810 <xTaskIncrementTick+0x158>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3301      	adds	r3, #1
 800571c:	4a3c      	ldr	r2, [pc, #240]	@ (8005810 <xTaskIncrementTick+0x158>)
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	f000 fad4 	bl	8005ccc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005724:	4b3b      	ldr	r3, [pc, #236]	@ (8005814 <xTaskIncrementTick+0x15c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	429a      	cmp	r2, r3
 800572c:	d349      	bcc.n	80057c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800572e:	4b36      	ldr	r3, [pc, #216]	@ (8005808 <xTaskIncrementTick+0x150>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d104      	bne.n	8005742 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005738:	4b36      	ldr	r3, [pc, #216]	@ (8005814 <xTaskIncrementTick+0x15c>)
 800573a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800573e:	601a      	str	r2, [r3, #0]
					break;
 8005740:	e03f      	b.n	80057c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005742:	4b31      	ldr	r3, [pc, #196]	@ (8005808 <xTaskIncrementTick+0x150>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	429a      	cmp	r2, r3
 8005758:	d203      	bcs.n	8005762 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800575a:	4a2e      	ldr	r2, [pc, #184]	@ (8005814 <xTaskIncrementTick+0x15c>)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005760:	e02f      	b.n	80057c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	3304      	adds	r3, #4
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe ff82 	bl	8004670 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005770:	2b00      	cmp	r3, #0
 8005772:	d004      	beq.n	800577e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	3318      	adds	r3, #24
 8005778:	4618      	mov	r0, r3
 800577a:	f7fe ff79 	bl	8004670 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005782:	4b25      	ldr	r3, [pc, #148]	@ (8005818 <xTaskIncrementTick+0x160>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d903      	bls.n	8005792 <xTaskIncrementTick+0xda>
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578e:	4a22      	ldr	r2, [pc, #136]	@ (8005818 <xTaskIncrementTick+0x160>)
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4a1f      	ldr	r2, [pc, #124]	@ (800581c <xTaskIncrementTick+0x164>)
 80057a0:	441a      	add	r2, r3
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	3304      	adds	r3, #4
 80057a6:	4619      	mov	r1, r3
 80057a8:	4610      	mov	r0, r2
 80057aa:	f7fe ff04 	bl	80045b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005820 <xTaskIncrementTick+0x168>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d3b8      	bcc.n	800572e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80057bc:	2301      	movs	r3, #1
 80057be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057c0:	e7b5      	b.n	800572e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057c2:	4b17      	ldr	r3, [pc, #92]	@ (8005820 <xTaskIncrementTick+0x168>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c8:	4914      	ldr	r1, [pc, #80]	@ (800581c <xTaskIncrementTick+0x164>)
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d901      	bls.n	80057de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80057da:	2301      	movs	r3, #1
 80057dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80057de:	4b11      	ldr	r3, [pc, #68]	@ (8005824 <xTaskIncrementTick+0x16c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d007      	beq.n	80057f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80057e6:	2301      	movs	r3, #1
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	e004      	b.n	80057f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005828 <xTaskIncrementTick+0x170>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3301      	adds	r3, #1
 80057f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005828 <xTaskIncrementTick+0x170>)
 80057f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057f6:	697b      	ldr	r3, [r7, #20]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	200011bc 	.word	0x200011bc
 8005804:	20001198 	.word	0x20001198
 8005808:	2000114c 	.word	0x2000114c
 800580c:	20001150 	.word	0x20001150
 8005810:	200011ac 	.word	0x200011ac
 8005814:	200011b4 	.word	0x200011b4
 8005818:	2000119c 	.word	0x2000119c
 800581c:	20000cc4 	.word	0x20000cc4
 8005820:	20000cc0 	.word	0x20000cc0
 8005824:	200011a8 	.word	0x200011a8
 8005828:	200011a4 	.word	0x200011a4

0800582c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005832:	4b28      	ldr	r3, [pc, #160]	@ (80058d4 <vTaskSwitchContext+0xa8>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800583a:	4b27      	ldr	r3, [pc, #156]	@ (80058d8 <vTaskSwitchContext+0xac>)
 800583c:	2201      	movs	r2, #1
 800583e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005840:	e042      	b.n	80058c8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005842:	4b25      	ldr	r3, [pc, #148]	@ (80058d8 <vTaskSwitchContext+0xac>)
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005848:	4b24      	ldr	r3, [pc, #144]	@ (80058dc <vTaskSwitchContext+0xb0>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	e011      	b.n	8005874 <vTaskSwitchContext+0x48>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <vTaskSwitchContext+0x42>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	607b      	str	r3, [r7, #4]
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	e7fd      	b.n	800586a <vTaskSwitchContext+0x3e>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	3b01      	subs	r3, #1
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	491a      	ldr	r1, [pc, #104]	@ (80058e0 <vTaskSwitchContext+0xb4>)
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4613      	mov	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0e3      	beq.n	8005850 <vTaskSwitchContext+0x24>
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4a13      	ldr	r2, [pc, #76]	@ (80058e0 <vTaskSwitchContext+0xb4>)
 8005894:	4413      	add	r3, r2
 8005896:	60bb      	str	r3, [r7, #8]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	605a      	str	r2, [r3, #4]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	3308      	adds	r3, #8
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d104      	bne.n	80058b8 <vTaskSwitchContext+0x8c>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	605a      	str	r2, [r3, #4]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	4a09      	ldr	r2, [pc, #36]	@ (80058e4 <vTaskSwitchContext+0xb8>)
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	4a06      	ldr	r2, [pc, #24]	@ (80058dc <vTaskSwitchContext+0xb0>)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6013      	str	r3, [r2, #0]
}
 80058c8:	bf00      	nop
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	200011bc 	.word	0x200011bc
 80058d8:	200011a8 	.word	0x200011a8
 80058dc:	2000119c 	.word	0x2000119c
 80058e0:	20000cc4 	.word	0x20000cc4
 80058e4:	20000cc0 	.word	0x20000cc0

080058e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10b      	bne.n	8005910 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80058f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	60fb      	str	r3, [r7, #12]
}
 800590a:	bf00      	nop
 800590c:	bf00      	nop
 800590e:	e7fd      	b.n	800590c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005910:	4b07      	ldr	r3, [pc, #28]	@ (8005930 <vTaskPlaceOnEventList+0x48>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3318      	adds	r3, #24
 8005916:	4619      	mov	r1, r3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7fe fe70 	bl	80045fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800591e:	2101      	movs	r1, #1
 8005920:	6838      	ldr	r0, [r7, #0]
 8005922:	f000 fa81 	bl	8005e28 <prvAddCurrentTaskToDelayedList>
}
 8005926:	bf00      	nop
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000cc0 	.word	0x20000cc0

08005934 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10b      	bne.n	800595e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	617b      	str	r3, [r7, #20]
}
 8005958:	bf00      	nop
 800595a:	bf00      	nop
 800595c:	e7fd      	b.n	800595a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800595e:	4b0a      	ldr	r3, [pc, #40]	@ (8005988 <vTaskPlaceOnEventListRestricted+0x54>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3318      	adds	r3, #24
 8005964:	4619      	mov	r1, r3
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f7fe fe25 	bl	80045b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005972:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005976:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	68b8      	ldr	r0, [r7, #8]
 800597c:	f000 fa54 	bl	8005e28 <prvAddCurrentTaskToDelayedList>
	}
 8005980:	bf00      	nop
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	20000cc0 	.word	0x20000cc0

0800598c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10b      	bne.n	80059ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	60fb      	str	r3, [r7, #12]
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	e7fd      	b.n	80059b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	3318      	adds	r3, #24
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fe fe56 	bl	8004670 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059c4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a3c <xTaskRemoveFromEventList+0xb0>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d11d      	bne.n	8005a08 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fe fe4d 	bl	8004670 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059da:	4b19      	ldr	r3, [pc, #100]	@ (8005a40 <xTaskRemoveFromEventList+0xb4>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d903      	bls.n	80059ea <xTaskRemoveFromEventList+0x5e>
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e6:	4a16      	ldr	r2, [pc, #88]	@ (8005a40 <xTaskRemoveFromEventList+0xb4>)
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4a13      	ldr	r2, [pc, #76]	@ (8005a44 <xTaskRemoveFromEventList+0xb8>)
 80059f8:	441a      	add	r2, r3
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	3304      	adds	r3, #4
 80059fe:	4619      	mov	r1, r3
 8005a00:	4610      	mov	r0, r2
 8005a02:	f7fe fdd8 	bl	80045b6 <vListInsertEnd>
 8005a06:	e005      	b.n	8005a14 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	3318      	adds	r3, #24
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	480e      	ldr	r0, [pc, #56]	@ (8005a48 <xTaskRemoveFromEventList+0xbc>)
 8005a10:	f7fe fdd1 	bl	80045b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a18:	4b0c      	ldr	r3, [pc, #48]	@ (8005a4c <xTaskRemoveFromEventList+0xc0>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d905      	bls.n	8005a2e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a22:	2301      	movs	r3, #1
 8005a24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a26:	4b0a      	ldr	r3, [pc, #40]	@ (8005a50 <xTaskRemoveFromEventList+0xc4>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	e001      	b.n	8005a32 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a32:	697b      	ldr	r3, [r7, #20]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	200011bc 	.word	0x200011bc
 8005a40:	2000119c 	.word	0x2000119c
 8005a44:	20000cc4 	.word	0x20000cc4
 8005a48:	20001154 	.word	0x20001154
 8005a4c:	20000cc0 	.word	0x20000cc0
 8005a50:	200011a8 	.word	0x200011a8

08005a54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a5c:	4b06      	ldr	r3, [pc, #24]	@ (8005a78 <vTaskInternalSetTimeOutState+0x24>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a64:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <vTaskInternalSetTimeOutState+0x28>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	605a      	str	r2, [r3, #4]
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	200011ac 	.word	0x200011ac
 8005a7c:	20001198 	.word	0x20001198

08005a80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10b      	bne.n	8005aa8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	613b      	str	r3, [r7, #16]
}
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
 8005aa6:	e7fd      	b.n	8005aa4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10b      	bne.n	8005ac6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	60fb      	str	r3, [r7, #12]
}
 8005ac0:	bf00      	nop
 8005ac2:	bf00      	nop
 8005ac4:	e7fd      	b.n	8005ac2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005ac6:	f000 fe8f 	bl	80067e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005aca:	4b1d      	ldr	r3, [pc, #116]	@ (8005b40 <xTaskCheckForTimeOut+0xc0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ae2:	d102      	bne.n	8005aea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	e023      	b.n	8005b32 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	4b15      	ldr	r3, [pc, #84]	@ (8005b44 <xTaskCheckForTimeOut+0xc4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d007      	beq.n	8005b06 <xTaskCheckForTimeOut+0x86>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d302      	bcc.n	8005b06 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b00:	2301      	movs	r3, #1
 8005b02:	61fb      	str	r3, [r7, #28]
 8005b04:	e015      	b.n	8005b32 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d20b      	bcs.n	8005b28 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	1ad2      	subs	r2, r2, r3
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff ff99 	bl	8005a54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b22:	2300      	movs	r3, #0
 8005b24:	61fb      	str	r3, [r7, #28]
 8005b26:	e004      	b.n	8005b32 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b32:	f000 fe8b 	bl	800684c <vPortExitCritical>

	return xReturn;
 8005b36:	69fb      	ldr	r3, [r7, #28]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3720      	adds	r7, #32
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20001198 	.word	0x20001198
 8005b44:	200011ac 	.word	0x200011ac

08005b48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b4c:	4b03      	ldr	r3, [pc, #12]	@ (8005b5c <vTaskMissedYield+0x14>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	601a      	str	r2, [r3, #0]
}
 8005b52:	bf00      	nop
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	200011a8 	.word	0x200011a8

08005b60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b68:	f000 f852 	bl	8005c10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b6c:	4b06      	ldr	r3, [pc, #24]	@ (8005b88 <prvIdleTask+0x28>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d9f9      	bls.n	8005b68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b74:	4b05      	ldr	r3, [pc, #20]	@ (8005b8c <prvIdleTask+0x2c>)
 8005b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b84:	e7f0      	b.n	8005b68 <prvIdleTask+0x8>
 8005b86:	bf00      	nop
 8005b88:	20000cc4 	.word	0x20000cc4
 8005b8c:	e000ed04 	.word	0xe000ed04

08005b90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b96:	2300      	movs	r3, #0
 8005b98:	607b      	str	r3, [r7, #4]
 8005b9a:	e00c      	b.n	8005bb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4a12      	ldr	r2, [pc, #72]	@ (8005bf0 <prvInitialiseTaskLists+0x60>)
 8005ba8:	4413      	add	r3, r2
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fe fcd6 	bl	800455c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	607b      	str	r3, [r7, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b37      	cmp	r3, #55	@ 0x37
 8005bba:	d9ef      	bls.n	8005b9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bbc:	480d      	ldr	r0, [pc, #52]	@ (8005bf4 <prvInitialiseTaskLists+0x64>)
 8005bbe:	f7fe fccd 	bl	800455c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bc2:	480d      	ldr	r0, [pc, #52]	@ (8005bf8 <prvInitialiseTaskLists+0x68>)
 8005bc4:	f7fe fcca 	bl	800455c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bc8:	480c      	ldr	r0, [pc, #48]	@ (8005bfc <prvInitialiseTaskLists+0x6c>)
 8005bca:	f7fe fcc7 	bl	800455c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bce:	480c      	ldr	r0, [pc, #48]	@ (8005c00 <prvInitialiseTaskLists+0x70>)
 8005bd0:	f7fe fcc4 	bl	800455c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bd4:	480b      	ldr	r0, [pc, #44]	@ (8005c04 <prvInitialiseTaskLists+0x74>)
 8005bd6:	f7fe fcc1 	bl	800455c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bda:	4b0b      	ldr	r3, [pc, #44]	@ (8005c08 <prvInitialiseTaskLists+0x78>)
 8005bdc:	4a05      	ldr	r2, [pc, #20]	@ (8005bf4 <prvInitialiseTaskLists+0x64>)
 8005bde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005be0:	4b0a      	ldr	r3, [pc, #40]	@ (8005c0c <prvInitialiseTaskLists+0x7c>)
 8005be2:	4a05      	ldr	r2, [pc, #20]	@ (8005bf8 <prvInitialiseTaskLists+0x68>)
 8005be4:	601a      	str	r2, [r3, #0]
}
 8005be6:	bf00      	nop
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000cc4 	.word	0x20000cc4
 8005bf4:	20001124 	.word	0x20001124
 8005bf8:	20001138 	.word	0x20001138
 8005bfc:	20001154 	.word	0x20001154
 8005c00:	20001168 	.word	0x20001168
 8005c04:	20001180 	.word	0x20001180
 8005c08:	2000114c 	.word	0x2000114c
 8005c0c:	20001150 	.word	0x20001150

08005c10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c16:	e019      	b.n	8005c4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c18:	f000 fde6 	bl	80067e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c1c:	4b10      	ldr	r3, [pc, #64]	@ (8005c60 <prvCheckTasksWaitingTermination+0x50>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3304      	adds	r3, #4
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fe fd21 	bl	8004670 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c64 <prvCheckTasksWaitingTermination+0x54>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	4a0b      	ldr	r2, [pc, #44]	@ (8005c64 <prvCheckTasksWaitingTermination+0x54>)
 8005c36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c38:	4b0b      	ldr	r3, [pc, #44]	@ (8005c68 <prvCheckTasksWaitingTermination+0x58>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c68 <prvCheckTasksWaitingTermination+0x58>)
 8005c40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c42:	f000 fe03 	bl	800684c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f810 	bl	8005c6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c4c:	4b06      	ldr	r3, [pc, #24]	@ (8005c68 <prvCheckTasksWaitingTermination+0x58>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1e1      	bne.n	8005c18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c54:	bf00      	nop
 8005c56:	bf00      	nop
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	20001168 	.word	0x20001168
 8005c64:	20001194 	.word	0x20001194
 8005c68:	2000117c 	.word	0x2000117c

08005c6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d108      	bne.n	8005c90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 ffa0 	bl	8006bc8 <vPortFree>
				vPortFree( pxTCB );
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 ff9d 	bl	8006bc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c8e:	e019      	b.n	8005cc4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d103      	bne.n	8005ca2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 ff94 	bl	8006bc8 <vPortFree>
	}
 8005ca0:	e010      	b.n	8005cc4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d00b      	beq.n	8005cc4 <prvDeleteTCB+0x58>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	60fb      	str	r3, [r7, #12]
}
 8005cbe:	bf00      	nop
 8005cc0:	bf00      	nop
 8005cc2:	e7fd      	b.n	8005cc0 <prvDeleteTCB+0x54>
	}
 8005cc4:	bf00      	nop
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005d04 <prvResetNextTaskUnblockTime+0x38>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d104      	bne.n	8005ce6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005d08 <prvResetNextTaskUnblockTime+0x3c>)
 8005cde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ce2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ce4:	e008      	b.n	8005cf8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ce6:	4b07      	ldr	r3, [pc, #28]	@ (8005d04 <prvResetNextTaskUnblockTime+0x38>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	4a04      	ldr	r2, [pc, #16]	@ (8005d08 <prvResetNextTaskUnblockTime+0x3c>)
 8005cf6:	6013      	str	r3, [r2, #0]
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	2000114c 	.word	0x2000114c
 8005d08:	200011b4 	.word	0x200011b4

08005d0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d12:	4b0b      	ldr	r3, [pc, #44]	@ (8005d40 <xTaskGetSchedulerState+0x34>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d102      	bne.n	8005d20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	607b      	str	r3, [r7, #4]
 8005d1e:	e008      	b.n	8005d32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d20:	4b08      	ldr	r3, [pc, #32]	@ (8005d44 <xTaskGetSchedulerState+0x38>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d102      	bne.n	8005d2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d28:	2302      	movs	r3, #2
 8005d2a:	607b      	str	r3, [r7, #4]
 8005d2c:	e001      	b.n	8005d32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d32:	687b      	ldr	r3, [r7, #4]
	}
 8005d34:	4618      	mov	r0, r3
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	200011a0 	.word	0x200011a0
 8005d44:	200011bc 	.word	0x200011bc

08005d48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d058      	beq.n	8005e10 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8005e1c <xTaskPriorityDisinherit+0xd4>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d00b      	beq.n	8005d80 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	60fb      	str	r3, [r7, #12]
}
 8005d7a:	bf00      	nop
 8005d7c:	bf00      	nop
 8005d7e:	e7fd      	b.n	8005d7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10b      	bne.n	8005da0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	60bb      	str	r3, [r7, #8]
}
 8005d9a:	bf00      	nop
 8005d9c:	bf00      	nop
 8005d9e:	e7fd      	b.n	8005d9c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005da4:	1e5a      	subs	r2, r3, #1
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d02c      	beq.n	8005e10 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d128      	bne.n	8005e10 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fe fc54 	bl	8004670 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de0:	4b0f      	ldr	r3, [pc, #60]	@ (8005e20 <xTaskPriorityDisinherit+0xd8>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d903      	bls.n	8005df0 <xTaskPriorityDisinherit+0xa8>
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dec:	4a0c      	ldr	r2, [pc, #48]	@ (8005e20 <xTaskPriorityDisinherit+0xd8>)
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4a09      	ldr	r2, [pc, #36]	@ (8005e24 <xTaskPriorityDisinherit+0xdc>)
 8005dfe:	441a      	add	r2, r3
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	3304      	adds	r3, #4
 8005e04:	4619      	mov	r1, r3
 8005e06:	4610      	mov	r0, r2
 8005e08:	f7fe fbd5 	bl	80045b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e10:	697b      	ldr	r3, [r7, #20]
	}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000cc0 	.word	0x20000cc0
 8005e20:	2000119c 	.word	0x2000119c
 8005e24:	20000cc4 	.word	0x20000cc4

08005e28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e32:	4b21      	ldr	r3, [pc, #132]	@ (8005eb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e38:	4b20      	ldr	r3, [pc, #128]	@ (8005ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fe fc16 	bl	8004670 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e4a:	d10a      	bne.n	8005e62 <prvAddCurrentTaskToDelayedList+0x3a>
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d007      	beq.n	8005e62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e52:	4b1a      	ldr	r3, [pc, #104]	@ (8005ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3304      	adds	r3, #4
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4819      	ldr	r0, [pc, #100]	@ (8005ec0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e5c:	f7fe fbab 	bl	80045b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e60:	e026      	b.n	8005eb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4413      	add	r3, r2
 8005e68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e6a:	4b14      	ldr	r3, [pc, #80]	@ (8005ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d209      	bcs.n	8005e8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e7a:	4b12      	ldr	r3, [pc, #72]	@ (8005ec4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8005ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3304      	adds	r3, #4
 8005e84:	4619      	mov	r1, r3
 8005e86:	4610      	mov	r0, r2
 8005e88:	f7fe fbb9 	bl	80045fe <vListInsert>
}
 8005e8c:	e010      	b.n	8005eb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ec8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b0a      	ldr	r3, [pc, #40]	@ (8005ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3304      	adds	r3, #4
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	f7fe fbaf 	bl	80045fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d202      	bcs.n	8005eb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005eaa:	4a08      	ldr	r2, [pc, #32]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	6013      	str	r3, [r2, #0]
}
 8005eb0:	bf00      	nop
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	20001198 	.word	0x20001198
 8005ebc:	20000cc0 	.word	0x20000cc0
 8005ec0:	20001180 	.word	0x20001180
 8005ec4:	20001150 	.word	0x20001150
 8005ec8:	2000114c 	.word	0x2000114c
 8005ecc:	200011b4 	.word	0x200011b4

08005ed0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08a      	sub	sp, #40	@ 0x28
 8005ed4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005eda:	f000 fb13 	bl	8006504 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ede:	4b1d      	ldr	r3, [pc, #116]	@ (8005f54 <xTimerCreateTimerTask+0x84>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d021      	beq.n	8005f2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005eee:	1d3a      	adds	r2, r7, #4
 8005ef0:	f107 0108 	add.w	r1, r7, #8
 8005ef4:	f107 030c 	add.w	r3, r7, #12
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fe fb15 	bl	8004528 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	9202      	str	r2, [sp, #8]
 8005f06:	9301      	str	r3, [sp, #4]
 8005f08:	2302      	movs	r3, #2
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	460a      	mov	r2, r1
 8005f10:	4911      	ldr	r1, [pc, #68]	@ (8005f58 <xTimerCreateTimerTask+0x88>)
 8005f12:	4812      	ldr	r0, [pc, #72]	@ (8005f5c <xTimerCreateTimerTask+0x8c>)
 8005f14:	f7ff f8d0 	bl	80050b8 <xTaskCreateStatic>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	4a11      	ldr	r2, [pc, #68]	@ (8005f60 <xTimerCreateTimerTask+0x90>)
 8005f1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f1e:	4b10      	ldr	r3, [pc, #64]	@ (8005f60 <xTimerCreateTimerTask+0x90>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f26:	2301      	movs	r3, #1
 8005f28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10b      	bne.n	8005f48 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	613b      	str	r3, [r7, #16]
}
 8005f42:	bf00      	nop
 8005f44:	bf00      	nop
 8005f46:	e7fd      	b.n	8005f44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f48:	697b      	ldr	r3, [r7, #20]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	200011f0 	.word	0x200011f0
 8005f58:	080077b8 	.word	0x080077b8
 8005f5c:	0800609d 	.word	0x0800609d
 8005f60:	200011f4 	.word	0x200011f4

08005f64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b08a      	sub	sp, #40	@ 0x28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10b      	bne.n	8005f94 <xTimerGenericCommand+0x30>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	623b      	str	r3, [r7, #32]
}
 8005f8e:	bf00      	nop
 8005f90:	bf00      	nop
 8005f92:	e7fd      	b.n	8005f90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f94:	4b19      	ldr	r3, [pc, #100]	@ (8005ffc <xTimerGenericCommand+0x98>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d02a      	beq.n	8005ff2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b05      	cmp	r3, #5
 8005fac:	dc18      	bgt.n	8005fe0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005fae:	f7ff fead 	bl	8005d0c <xTaskGetSchedulerState>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d109      	bne.n	8005fcc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005fb8:	4b10      	ldr	r3, [pc, #64]	@ (8005ffc <xTimerGenericCommand+0x98>)
 8005fba:	6818      	ldr	r0, [r3, #0]
 8005fbc:	f107 0110 	add.w	r1, r7, #16
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fc4:	f7fe fc88 	bl	80048d8 <xQueueGenericSend>
 8005fc8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005fca:	e012      	b.n	8005ff2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8005ffc <xTimerGenericCommand+0x98>)
 8005fce:	6818      	ldr	r0, [r3, #0]
 8005fd0:	f107 0110 	add.w	r1, r7, #16
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f7fe fc7e 	bl	80048d8 <xQueueGenericSend>
 8005fdc:	6278      	str	r0, [r7, #36]	@ 0x24
 8005fde:	e008      	b.n	8005ff2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005fe0:	4b06      	ldr	r3, [pc, #24]	@ (8005ffc <xTimerGenericCommand+0x98>)
 8005fe2:	6818      	ldr	r0, [r3, #0]
 8005fe4:	f107 0110 	add.w	r1, r7, #16
 8005fe8:	2300      	movs	r3, #0
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	f7fe fd76 	bl	8004adc <xQueueGenericSendFromISR>
 8005ff0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3728      	adds	r7, #40	@ 0x28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	200011f0 	.word	0x200011f0

08006000 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af02      	add	r7, sp, #8
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800600a:	4b23      	ldr	r3, [pc, #140]	@ (8006098 <prvProcessExpiredTimer+0x98>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	3304      	adds	r3, #4
 8006018:	4618      	mov	r0, r3
 800601a:	f7fe fb29 	bl	8004670 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d023      	beq.n	8006074 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	699a      	ldr	r2, [r3, #24]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	18d1      	adds	r1, r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	6978      	ldr	r0, [r7, #20]
 800603a:	f000 f8d5 	bl	80061e8 <prvInsertTimerInActiveList>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d020      	beq.n	8006086 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006044:	2300      	movs	r3, #0
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	2300      	movs	r3, #0
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	2100      	movs	r1, #0
 800604e:	6978      	ldr	r0, [r7, #20]
 8006050:	f7ff ff88 	bl	8005f64 <xTimerGenericCommand>
 8006054:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d114      	bne.n	8006086 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	60fb      	str	r3, [r7, #12]
}
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	e7fd      	b.n	8006070 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800607a:	f023 0301 	bic.w	r3, r3, #1
 800607e:	b2da      	uxtb	r2, r3
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	6978      	ldr	r0, [r7, #20]
 800608c:	4798      	blx	r3
}
 800608e:	bf00      	nop
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	200011e8 	.word	0x200011e8

0800609c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060a4:	f107 0308 	add.w	r3, r7, #8
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 f859 	bl	8006160 <prvGetNextExpireTime>
 80060ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4619      	mov	r1, r3
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 f805 	bl	80060c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80060ba:	f000 f8d7 	bl	800626c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060be:	bf00      	nop
 80060c0:	e7f0      	b.n	80060a4 <prvTimerTask+0x8>
	...

080060c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80060ce:	f7ff fa37 	bl	8005540 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060d2:	f107 0308 	add.w	r3, r7, #8
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 f866 	bl	80061a8 <prvSampleTimeNow>
 80060dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d130      	bne.n	8006146 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10a      	bne.n	8006100 <prvProcessTimerOrBlockTask+0x3c>
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d806      	bhi.n	8006100 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80060f2:	f7ff fa33 	bl	800555c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80060f6:	68f9      	ldr	r1, [r7, #12]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7ff ff81 	bl	8006000 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80060fe:	e024      	b.n	800614a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d008      	beq.n	8006118 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006106:	4b13      	ldr	r3, [pc, #76]	@ (8006154 <prvProcessTimerOrBlockTask+0x90>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <prvProcessTimerOrBlockTask+0x50>
 8006110:	2301      	movs	r3, #1
 8006112:	e000      	b.n	8006116 <prvProcessTimerOrBlockTask+0x52>
 8006114:	2300      	movs	r3, #0
 8006116:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006118:	4b0f      	ldr	r3, [pc, #60]	@ (8006158 <prvProcessTimerOrBlockTask+0x94>)
 800611a:	6818      	ldr	r0, [r3, #0]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	4619      	mov	r1, r3
 8006126:	f7fe ff93 	bl	8005050 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800612a:	f7ff fa17 	bl	800555c <xTaskResumeAll>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006134:	4b09      	ldr	r3, [pc, #36]	@ (800615c <prvProcessTimerOrBlockTask+0x98>)
 8006136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	f3bf 8f6f 	isb	sy
}
 8006144:	e001      	b.n	800614a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006146:	f7ff fa09 	bl	800555c <xTaskResumeAll>
}
 800614a:	bf00      	nop
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	200011ec 	.word	0x200011ec
 8006158:	200011f0 	.word	0x200011f0
 800615c:	e000ed04 	.word	0xe000ed04

08006160 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006168:	4b0e      	ldr	r3, [pc, #56]	@ (80061a4 <prvGetNextExpireTime+0x44>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <prvGetNextExpireTime+0x16>
 8006172:	2201      	movs	r2, #1
 8006174:	e000      	b.n	8006178 <prvGetNextExpireTime+0x18>
 8006176:	2200      	movs	r2, #0
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d105      	bne.n	8006190 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006184:	4b07      	ldr	r3, [pc, #28]	@ (80061a4 <prvGetNextExpireTime+0x44>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	e001      	b.n	8006194 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006194:	68fb      	ldr	r3, [r7, #12]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	200011e8 	.word	0x200011e8

080061a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80061b0:	f7ff fa72 	bl	8005698 <xTaskGetTickCount>
 80061b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061b6:	4b0b      	ldr	r3, [pc, #44]	@ (80061e4 <prvSampleTimeNow+0x3c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d205      	bcs.n	80061cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80061c0:	f000 f93a 	bl	8006438 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e002      	b.n	80061d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80061d2:	4a04      	ldr	r2, [pc, #16]	@ (80061e4 <prvSampleTimeNow+0x3c>)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80061d8:	68fb      	ldr	r3, [r7, #12]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	200011f8 	.word	0x200011f8

080061e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80061f6:	2300      	movs	r3, #0
 80061f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	429a      	cmp	r2, r3
 800620c:	d812      	bhi.n	8006234 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	1ad2      	subs	r2, r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	429a      	cmp	r2, r3
 800621a:	d302      	bcc.n	8006222 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800621c:	2301      	movs	r3, #1
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	e01b      	b.n	800625a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006222:	4b10      	ldr	r3, [pc, #64]	@ (8006264 <prvInsertTimerInActiveList+0x7c>)
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3304      	adds	r3, #4
 800622a:	4619      	mov	r1, r3
 800622c:	4610      	mov	r0, r2
 800622e:	f7fe f9e6 	bl	80045fe <vListInsert>
 8006232:	e012      	b.n	800625a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	429a      	cmp	r2, r3
 800623a:	d206      	bcs.n	800624a <prvInsertTimerInActiveList+0x62>
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d302      	bcc.n	800624a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006244:	2301      	movs	r3, #1
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	e007      	b.n	800625a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800624a:	4b07      	ldr	r3, [pc, #28]	@ (8006268 <prvInsertTimerInActiveList+0x80>)
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3304      	adds	r3, #4
 8006252:	4619      	mov	r1, r3
 8006254:	4610      	mov	r0, r2
 8006256:	f7fe f9d2 	bl	80045fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800625a:	697b      	ldr	r3, [r7, #20]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	200011ec 	.word	0x200011ec
 8006268:	200011e8 	.word	0x200011e8

0800626c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08e      	sub	sp, #56	@ 0x38
 8006270:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006272:	e0ce      	b.n	8006412 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	da19      	bge.n	80062ae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800627a:	1d3b      	adds	r3, r7, #4
 800627c:	3304      	adds	r3, #4
 800627e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10b      	bne.n	800629e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	61fb      	str	r3, [r7, #28]
}
 8006298:	bf00      	nop
 800629a:	bf00      	nop
 800629c:	e7fd      	b.n	800629a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800629e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062a4:	6850      	ldr	r0, [r2, #4]
 80062a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062a8:	6892      	ldr	r2, [r2, #8]
 80062aa:	4611      	mov	r1, r2
 80062ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f2c0 80ae 	blt.w	8006412 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d004      	beq.n	80062cc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c4:	3304      	adds	r3, #4
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fe f9d2 	bl	8004670 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062cc:	463b      	mov	r3, r7
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff ff6a 	bl	80061a8 <prvSampleTimeNow>
 80062d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b09      	cmp	r3, #9
 80062da:	f200 8097 	bhi.w	800640c <prvProcessReceivedCommands+0x1a0>
 80062de:	a201      	add	r2, pc, #4	@ (adr r2, 80062e4 <prvProcessReceivedCommands+0x78>)
 80062e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e4:	0800630d 	.word	0x0800630d
 80062e8:	0800630d 	.word	0x0800630d
 80062ec:	0800630d 	.word	0x0800630d
 80062f0:	08006383 	.word	0x08006383
 80062f4:	08006397 	.word	0x08006397
 80062f8:	080063e3 	.word	0x080063e3
 80062fc:	0800630d 	.word	0x0800630d
 8006300:	0800630d 	.word	0x0800630d
 8006304:	08006383 	.word	0x08006383
 8006308:	08006397 	.word	0x08006397
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800630c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006312:	f043 0301 	orr.w	r3, r3, #1
 8006316:	b2da      	uxtb	r2, r3
 8006318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	18d1      	adds	r1, r2, r3
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800632a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800632c:	f7ff ff5c 	bl	80061e8 <prvInsertTimerInActiveList>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d06c      	beq.n	8006410 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800633c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d061      	beq.n	8006410 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	441a      	add	r2, r3
 8006354:	2300      	movs	r3, #0
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	2300      	movs	r3, #0
 800635a:	2100      	movs	r1, #0
 800635c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800635e:	f7ff fe01 	bl	8005f64 <xTimerGenericCommand>
 8006362:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d152      	bne.n	8006410 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	61bb      	str	r3, [r7, #24]
}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	e7fd      	b.n	800637e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006384:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006388:	f023 0301 	bic.w	r3, r3, #1
 800638c:	b2da      	uxtb	r2, r3
 800638e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006390:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006394:	e03d      	b.n	8006412 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006398:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800639c:	f043 0301 	orr.w	r3, r3, #1
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10b      	bne.n	80063ce <prvProcessReceivedCommands+0x162>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	617b      	str	r3, [r7, #20]
}
 80063c8:	bf00      	nop
 80063ca:	bf00      	nop
 80063cc:	e7fd      	b.n	80063ca <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80063ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d4:	18d1      	adds	r1, r2, r3
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063dc:	f7ff ff04 	bl	80061e8 <prvInsertTimerInActiveList>
					break;
 80063e0:	e017      	b.n	8006412 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80063e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d103      	bne.n	80063f8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80063f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063f2:	f000 fbe9 	bl	8006bc8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80063f6:	e00c      	b.n	8006412 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063fe:	f023 0301 	bic.w	r3, r3, #1
 8006402:	b2da      	uxtb	r2, r3
 8006404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006406:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800640a:	e002      	b.n	8006412 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800640c:	bf00      	nop
 800640e:	e000      	b.n	8006412 <prvProcessReceivedCommands+0x1a6>
					break;
 8006410:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006412:	4b08      	ldr	r3, [pc, #32]	@ (8006434 <prvProcessReceivedCommands+0x1c8>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	1d39      	adds	r1, r7, #4
 8006418:	2200      	movs	r2, #0
 800641a:	4618      	mov	r0, r3
 800641c:	f7fe fbfc 	bl	8004c18 <xQueueReceive>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	f47f af26 	bne.w	8006274 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006428:	bf00      	nop
 800642a:	bf00      	nop
 800642c:	3730      	adds	r7, #48	@ 0x30
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	200011f0 	.word	0x200011f0

08006438 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800643e:	e049      	b.n	80064d4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006440:	4b2e      	ldr	r3, [pc, #184]	@ (80064fc <prvSwitchTimerLists+0xc4>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800644a:	4b2c      	ldr	r3, [pc, #176]	@ (80064fc <prvSwitchTimerLists+0xc4>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3304      	adds	r3, #4
 8006458:	4618      	mov	r0, r3
 800645a:	f7fe f909 	bl	8004670 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b00      	cmp	r3, #0
 8006472:	d02f      	beq.n	80064d4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4413      	add	r3, r2
 800647c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	429a      	cmp	r2, r3
 8006484:	d90e      	bls.n	80064a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006492:	4b1a      	ldr	r3, [pc, #104]	@ (80064fc <prvSwitchTimerLists+0xc4>)
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3304      	adds	r3, #4
 800649a:	4619      	mov	r1, r3
 800649c:	4610      	mov	r0, r2
 800649e:	f7fe f8ae 	bl	80045fe <vListInsert>
 80064a2:	e017      	b.n	80064d4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064a4:	2300      	movs	r3, #0
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	2300      	movs	r3, #0
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	2100      	movs	r1, #0
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f7ff fd58 	bl	8005f64 <xTimerGenericCommand>
 80064b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10b      	bne.n	80064d4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	603b      	str	r3, [r7, #0]
}
 80064ce:	bf00      	nop
 80064d0:	bf00      	nop
 80064d2:	e7fd      	b.n	80064d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064d4:	4b09      	ldr	r3, [pc, #36]	@ (80064fc <prvSwitchTimerLists+0xc4>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1b0      	bne.n	8006440 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80064de:	4b07      	ldr	r3, [pc, #28]	@ (80064fc <prvSwitchTimerLists+0xc4>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80064e4:	4b06      	ldr	r3, [pc, #24]	@ (8006500 <prvSwitchTimerLists+0xc8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a04      	ldr	r2, [pc, #16]	@ (80064fc <prvSwitchTimerLists+0xc4>)
 80064ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80064ec:	4a04      	ldr	r2, [pc, #16]	@ (8006500 <prvSwitchTimerLists+0xc8>)
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	6013      	str	r3, [r2, #0]
}
 80064f2:	bf00      	nop
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	200011e8 	.word	0x200011e8
 8006500:	200011ec 	.word	0x200011ec

08006504 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800650a:	f000 f96d 	bl	80067e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800650e:	4b15      	ldr	r3, [pc, #84]	@ (8006564 <prvCheckForValidListAndQueue+0x60>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d120      	bne.n	8006558 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006516:	4814      	ldr	r0, [pc, #80]	@ (8006568 <prvCheckForValidListAndQueue+0x64>)
 8006518:	f7fe f820 	bl	800455c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800651c:	4813      	ldr	r0, [pc, #76]	@ (800656c <prvCheckForValidListAndQueue+0x68>)
 800651e:	f7fe f81d 	bl	800455c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006522:	4b13      	ldr	r3, [pc, #76]	@ (8006570 <prvCheckForValidListAndQueue+0x6c>)
 8006524:	4a10      	ldr	r2, [pc, #64]	@ (8006568 <prvCheckForValidListAndQueue+0x64>)
 8006526:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006528:	4b12      	ldr	r3, [pc, #72]	@ (8006574 <prvCheckForValidListAndQueue+0x70>)
 800652a:	4a10      	ldr	r2, [pc, #64]	@ (800656c <prvCheckForValidListAndQueue+0x68>)
 800652c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800652e:	2300      	movs	r3, #0
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	4b11      	ldr	r3, [pc, #68]	@ (8006578 <prvCheckForValidListAndQueue+0x74>)
 8006534:	4a11      	ldr	r2, [pc, #68]	@ (800657c <prvCheckForValidListAndQueue+0x78>)
 8006536:	2110      	movs	r1, #16
 8006538:	200a      	movs	r0, #10
 800653a:	f7fe f92d 	bl	8004798 <xQueueGenericCreateStatic>
 800653e:	4603      	mov	r3, r0
 8006540:	4a08      	ldr	r2, [pc, #32]	@ (8006564 <prvCheckForValidListAndQueue+0x60>)
 8006542:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006544:	4b07      	ldr	r3, [pc, #28]	@ (8006564 <prvCheckForValidListAndQueue+0x60>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d005      	beq.n	8006558 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800654c:	4b05      	ldr	r3, [pc, #20]	@ (8006564 <prvCheckForValidListAndQueue+0x60>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	490b      	ldr	r1, [pc, #44]	@ (8006580 <prvCheckForValidListAndQueue+0x7c>)
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe fd52 	bl	8004ffc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006558:	f000 f978 	bl	800684c <vPortExitCritical>
}
 800655c:	bf00      	nop
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	200011f0 	.word	0x200011f0
 8006568:	200011c0 	.word	0x200011c0
 800656c:	200011d4 	.word	0x200011d4
 8006570:	200011e8 	.word	0x200011e8
 8006574:	200011ec 	.word	0x200011ec
 8006578:	2000129c 	.word	0x2000129c
 800657c:	200011fc 	.word	0x200011fc
 8006580:	080077c0 	.word	0x080077c0

08006584 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3b04      	subs	r3, #4
 8006594:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800659c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	3b04      	subs	r3, #4
 80065a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f023 0201 	bic.w	r2, r3, #1
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3b04      	subs	r3, #4
 80065b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065b4:	4a0c      	ldr	r2, [pc, #48]	@ (80065e8 <pxPortInitialiseStack+0x64>)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3b14      	subs	r3, #20
 80065be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3b04      	subs	r3, #4
 80065ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f06f 0202 	mvn.w	r2, #2
 80065d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3b20      	subs	r3, #32
 80065d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065da:	68fb      	ldr	r3, [r7, #12]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	080065ed 	.word	0x080065ed

080065ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065f6:	4b13      	ldr	r3, [pc, #76]	@ (8006644 <prvTaskExitError+0x58>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065fe:	d00b      	beq.n	8006618 <prvTaskExitError+0x2c>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	60fb      	str	r3, [r7, #12]
}
 8006612:	bf00      	nop
 8006614:	bf00      	nop
 8006616:	e7fd      	b.n	8006614 <prvTaskExitError+0x28>
	__asm volatile
 8006618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	60bb      	str	r3, [r7, #8]
}
 800662a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800662c:	bf00      	nop
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0fc      	beq.n	800662e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	20000018 	.word	0x20000018
	...

08006650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006650:	4b07      	ldr	r3, [pc, #28]	@ (8006670 <pxCurrentTCBConst2>)
 8006652:	6819      	ldr	r1, [r3, #0]
 8006654:	6808      	ldr	r0, [r1, #0]
 8006656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665a:	f380 8809 	msr	PSP, r0
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f04f 0000 	mov.w	r0, #0
 8006666:	f380 8811 	msr	BASEPRI, r0
 800666a:	4770      	bx	lr
 800666c:	f3af 8000 	nop.w

08006670 <pxCurrentTCBConst2>:
 8006670:	20000cc0 	.word	0x20000cc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop

08006678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006678:	4808      	ldr	r0, [pc, #32]	@ (800669c <prvPortStartFirstTask+0x24>)
 800667a:	6800      	ldr	r0, [r0, #0]
 800667c:	6800      	ldr	r0, [r0, #0]
 800667e:	f380 8808 	msr	MSP, r0
 8006682:	f04f 0000 	mov.w	r0, #0
 8006686:	f380 8814 	msr	CONTROL, r0
 800668a:	b662      	cpsie	i
 800668c:	b661      	cpsie	f
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	df00      	svc	0
 8006698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800669a:	bf00      	nop
 800669c:	e000ed08 	.word	0xe000ed08

080066a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066a6:	4b47      	ldr	r3, [pc, #284]	@ (80067c4 <xPortStartScheduler+0x124>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a47      	ldr	r2, [pc, #284]	@ (80067c8 <xPortStartScheduler+0x128>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d10b      	bne.n	80066c8 <xPortStartScheduler+0x28>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	613b      	str	r3, [r7, #16]
}
 80066c2:	bf00      	nop
 80066c4:	bf00      	nop
 80066c6:	e7fd      	b.n	80066c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066c8:	4b3e      	ldr	r3, [pc, #248]	@ (80067c4 <xPortStartScheduler+0x124>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a3f      	ldr	r2, [pc, #252]	@ (80067cc <xPortStartScheduler+0x12c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d10b      	bne.n	80066ea <xPortStartScheduler+0x4a>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	60fb      	str	r3, [r7, #12]
}
 80066e4:	bf00      	nop
 80066e6:	bf00      	nop
 80066e8:	e7fd      	b.n	80066e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066ea:	4b39      	ldr	r3, [pc, #228]	@ (80067d0 <xPortStartScheduler+0x130>)
 80066ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	22ff      	movs	r2, #255	@ 0xff
 80066fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	b2db      	uxtb	r3, r3
 8006702:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006704:	78fb      	ldrb	r3, [r7, #3]
 8006706:	b2db      	uxtb	r3, r3
 8006708:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800670c:	b2da      	uxtb	r2, r3
 800670e:	4b31      	ldr	r3, [pc, #196]	@ (80067d4 <xPortStartScheduler+0x134>)
 8006710:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006712:	4b31      	ldr	r3, [pc, #196]	@ (80067d8 <xPortStartScheduler+0x138>)
 8006714:	2207      	movs	r2, #7
 8006716:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006718:	e009      	b.n	800672e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800671a:	4b2f      	ldr	r3, [pc, #188]	@ (80067d8 <xPortStartScheduler+0x138>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3b01      	subs	r3, #1
 8006720:	4a2d      	ldr	r2, [pc, #180]	@ (80067d8 <xPortStartScheduler+0x138>)
 8006722:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006724:	78fb      	ldrb	r3, [r7, #3]
 8006726:	b2db      	uxtb	r3, r3
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	b2db      	uxtb	r3, r3
 800672c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800672e:	78fb      	ldrb	r3, [r7, #3]
 8006730:	b2db      	uxtb	r3, r3
 8006732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006736:	2b80      	cmp	r3, #128	@ 0x80
 8006738:	d0ef      	beq.n	800671a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800673a:	4b27      	ldr	r3, [pc, #156]	@ (80067d8 <xPortStartScheduler+0x138>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f1c3 0307 	rsb	r3, r3, #7
 8006742:	2b04      	cmp	r3, #4
 8006744:	d00b      	beq.n	800675e <xPortStartScheduler+0xbe>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	60bb      	str	r3, [r7, #8]
}
 8006758:	bf00      	nop
 800675a:	bf00      	nop
 800675c:	e7fd      	b.n	800675a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800675e:	4b1e      	ldr	r3, [pc, #120]	@ (80067d8 <xPortStartScheduler+0x138>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	021b      	lsls	r3, r3, #8
 8006764:	4a1c      	ldr	r2, [pc, #112]	@ (80067d8 <xPortStartScheduler+0x138>)
 8006766:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006768:	4b1b      	ldr	r3, [pc, #108]	@ (80067d8 <xPortStartScheduler+0x138>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006770:	4a19      	ldr	r2, [pc, #100]	@ (80067d8 <xPortStartScheduler+0x138>)
 8006772:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	b2da      	uxtb	r2, r3
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800677c:	4b17      	ldr	r3, [pc, #92]	@ (80067dc <xPortStartScheduler+0x13c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a16      	ldr	r2, [pc, #88]	@ (80067dc <xPortStartScheduler+0x13c>)
 8006782:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006786:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006788:	4b14      	ldr	r3, [pc, #80]	@ (80067dc <xPortStartScheduler+0x13c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a13      	ldr	r2, [pc, #76]	@ (80067dc <xPortStartScheduler+0x13c>)
 800678e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006792:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006794:	f000 f8da 	bl	800694c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006798:	4b11      	ldr	r3, [pc, #68]	@ (80067e0 <xPortStartScheduler+0x140>)
 800679a:	2200      	movs	r2, #0
 800679c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800679e:	f000 f8f9 	bl	8006994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067a2:	4b10      	ldr	r3, [pc, #64]	@ (80067e4 <xPortStartScheduler+0x144>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a0f      	ldr	r2, [pc, #60]	@ (80067e4 <xPortStartScheduler+0x144>)
 80067a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80067ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067ae:	f7ff ff63 	bl	8006678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067b2:	f7ff f83b 	bl	800582c <vTaskSwitchContext>
	prvTaskExitError();
 80067b6:	f7ff ff19 	bl	80065ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	e000ed00 	.word	0xe000ed00
 80067c8:	410fc271 	.word	0x410fc271
 80067cc:	410fc270 	.word	0x410fc270
 80067d0:	e000e400 	.word	0xe000e400
 80067d4:	200012ec 	.word	0x200012ec
 80067d8:	200012f0 	.word	0x200012f0
 80067dc:	e000ed20 	.word	0xe000ed20
 80067e0:	20000018 	.word	0x20000018
 80067e4:	e000ef34 	.word	0xe000ef34

080067e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	607b      	str	r3, [r7, #4]
}
 8006800:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006802:	4b10      	ldr	r3, [pc, #64]	@ (8006844 <vPortEnterCritical+0x5c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3301      	adds	r3, #1
 8006808:	4a0e      	ldr	r2, [pc, #56]	@ (8006844 <vPortEnterCritical+0x5c>)
 800680a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800680c:	4b0d      	ldr	r3, [pc, #52]	@ (8006844 <vPortEnterCritical+0x5c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d110      	bne.n	8006836 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006814:	4b0c      	ldr	r3, [pc, #48]	@ (8006848 <vPortEnterCritical+0x60>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00b      	beq.n	8006836 <vPortEnterCritical+0x4e>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	603b      	str	r3, [r7, #0]
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	e7fd      	b.n	8006832 <vPortEnterCritical+0x4a>
	}
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20000018 	.word	0x20000018
 8006848:	e000ed04 	.word	0xe000ed04

0800684c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006852:	4b12      	ldr	r3, [pc, #72]	@ (800689c <vPortExitCritical+0x50>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10b      	bne.n	8006872 <vPortExitCritical+0x26>
	__asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	607b      	str	r3, [r7, #4]
}
 800686c:	bf00      	nop
 800686e:	bf00      	nop
 8006870:	e7fd      	b.n	800686e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006872:	4b0a      	ldr	r3, [pc, #40]	@ (800689c <vPortExitCritical+0x50>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3b01      	subs	r3, #1
 8006878:	4a08      	ldr	r2, [pc, #32]	@ (800689c <vPortExitCritical+0x50>)
 800687a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800687c:	4b07      	ldr	r3, [pc, #28]	@ (800689c <vPortExitCritical+0x50>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d105      	bne.n	8006890 <vPortExitCritical+0x44>
 8006884:	2300      	movs	r3, #0
 8006886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	f383 8811 	msr	BASEPRI, r3
}
 800688e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	20000018 	.word	0x20000018

080068a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068a0:	f3ef 8009 	mrs	r0, PSP
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	4b15      	ldr	r3, [pc, #84]	@ (8006900 <pxCurrentTCBConst>)
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	f01e 0f10 	tst.w	lr, #16
 80068b0:	bf08      	it	eq
 80068b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ba:	6010      	str	r0, [r2, #0]
 80068bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80068c4:	f380 8811 	msr	BASEPRI, r0
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f7fe ffac 	bl	800582c <vTaskSwitchContext>
 80068d4:	f04f 0000 	mov.w	r0, #0
 80068d8:	f380 8811 	msr	BASEPRI, r0
 80068dc:	bc09      	pop	{r0, r3}
 80068de:	6819      	ldr	r1, [r3, #0]
 80068e0:	6808      	ldr	r0, [r1, #0]
 80068e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e6:	f01e 0f10 	tst.w	lr, #16
 80068ea:	bf08      	it	eq
 80068ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068f0:	f380 8809 	msr	PSP, r0
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	f3af 8000 	nop.w

08006900 <pxCurrentTCBConst>:
 8006900:	20000cc0 	.word	0x20000cc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop

08006908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	607b      	str	r3, [r7, #4]
}
 8006920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006922:	f7fe fec9 	bl	80056b8 <xTaskIncrementTick>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800692c:	4b06      	ldr	r3, [pc, #24]	@ (8006948 <xPortSysTickHandler+0x40>)
 800692e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	2300      	movs	r3, #0
 8006936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	f383 8811 	msr	BASEPRI, r3
}
 800693e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	e000ed04 	.word	0xe000ed04

0800694c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006950:	4b0b      	ldr	r3, [pc, #44]	@ (8006980 <vPortSetupTimerInterrupt+0x34>)
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006956:	4b0b      	ldr	r3, [pc, #44]	@ (8006984 <vPortSetupTimerInterrupt+0x38>)
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800695c:	4b0a      	ldr	r3, [pc, #40]	@ (8006988 <vPortSetupTimerInterrupt+0x3c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a0a      	ldr	r2, [pc, #40]	@ (800698c <vPortSetupTimerInterrupt+0x40>)
 8006962:	fba2 2303 	umull	r2, r3, r2, r3
 8006966:	099b      	lsrs	r3, r3, #6
 8006968:	4a09      	ldr	r2, [pc, #36]	@ (8006990 <vPortSetupTimerInterrupt+0x44>)
 800696a:	3b01      	subs	r3, #1
 800696c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800696e:	4b04      	ldr	r3, [pc, #16]	@ (8006980 <vPortSetupTimerInterrupt+0x34>)
 8006970:	2207      	movs	r2, #7
 8006972:	601a      	str	r2, [r3, #0]
}
 8006974:	bf00      	nop
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	e000e010 	.word	0xe000e010
 8006984:	e000e018 	.word	0xe000e018
 8006988:	2000000c 	.word	0x2000000c
 800698c:	10624dd3 	.word	0x10624dd3
 8006990:	e000e014 	.word	0xe000e014

08006994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006994:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80069a4 <vPortEnableVFP+0x10>
 8006998:	6801      	ldr	r1, [r0, #0]
 800699a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800699e:	6001      	str	r1, [r0, #0]
 80069a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069a2:	bf00      	nop
 80069a4:	e000ed88 	.word	0xe000ed88

080069a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069ae:	f3ef 8305 	mrs	r3, IPSR
 80069b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b0f      	cmp	r3, #15
 80069b8:	d915      	bls.n	80069e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069ba:	4a18      	ldr	r2, [pc, #96]	@ (8006a1c <vPortValidateInterruptPriority+0x74>)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069c4:	4b16      	ldr	r3, [pc, #88]	@ (8006a20 <vPortValidateInterruptPriority+0x78>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	7afa      	ldrb	r2, [r7, #11]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d20b      	bcs.n	80069e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	607b      	str	r3, [r7, #4]
}
 80069e0:	bf00      	nop
 80069e2:	bf00      	nop
 80069e4:	e7fd      	b.n	80069e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80069e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006a24 <vPortValidateInterruptPriority+0x7c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80069ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006a28 <vPortValidateInterruptPriority+0x80>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d90b      	bls.n	8006a0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	603b      	str	r3, [r7, #0]
}
 8006a08:	bf00      	nop
 8006a0a:	bf00      	nop
 8006a0c:	e7fd      	b.n	8006a0a <vPortValidateInterruptPriority+0x62>
	}
 8006a0e:	bf00      	nop
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	e000e3f0 	.word	0xe000e3f0
 8006a20:	200012ec 	.word	0x200012ec
 8006a24:	e000ed0c 	.word	0xe000ed0c
 8006a28:	200012f0 	.word	0x200012f0

08006a2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b08a      	sub	sp, #40	@ 0x28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a34:	2300      	movs	r3, #0
 8006a36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a38:	f7fe fd82 	bl	8005540 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a3c:	4b5c      	ldr	r3, [pc, #368]	@ (8006bb0 <pvPortMalloc+0x184>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a44:	f000 f924 	bl	8006c90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a48:	4b5a      	ldr	r3, [pc, #360]	@ (8006bb4 <pvPortMalloc+0x188>)
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f040 8095 	bne.w	8006b80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01e      	beq.n	8006a9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006a5c:	2208      	movs	r2, #8
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4413      	add	r3, r2
 8006a62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d015      	beq.n	8006a9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f023 0307 	bic.w	r3, r3, #7
 8006a74:	3308      	adds	r3, #8
 8006a76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f003 0307 	and.w	r3, r3, #7
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00b      	beq.n	8006a9a <pvPortMalloc+0x6e>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	617b      	str	r3, [r7, #20]
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	e7fd      	b.n	8006a96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d06f      	beq.n	8006b80 <pvPortMalloc+0x154>
 8006aa0:	4b45      	ldr	r3, [pc, #276]	@ (8006bb8 <pvPortMalloc+0x18c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d86a      	bhi.n	8006b80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006aaa:	4b44      	ldr	r3, [pc, #272]	@ (8006bbc <pvPortMalloc+0x190>)
 8006aac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006aae:	4b43      	ldr	r3, [pc, #268]	@ (8006bbc <pvPortMalloc+0x190>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ab4:	e004      	b.n	8006ac0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d903      	bls.n	8006ad2 <pvPortMalloc+0xa6>
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1f1      	bne.n	8006ab6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ad2:	4b37      	ldr	r3, [pc, #220]	@ (8006bb0 <pvPortMalloc+0x184>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d051      	beq.n	8006b80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2208      	movs	r2, #8
 8006ae2:	4413      	add	r3, r2
 8006ae4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	1ad2      	subs	r2, r2, r3
 8006af6:	2308      	movs	r3, #8
 8006af8:	005b      	lsls	r3, r3, #1
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d920      	bls.n	8006b40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4413      	add	r3, r2
 8006b04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00b      	beq.n	8006b28 <pvPortMalloc+0xfc>
	__asm volatile
 8006b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	613b      	str	r3, [r7, #16]
}
 8006b22:	bf00      	nop
 8006b24:	bf00      	nop
 8006b26:	e7fd      	b.n	8006b24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	1ad2      	subs	r2, r2, r3
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b3a:	69b8      	ldr	r0, [r7, #24]
 8006b3c:	f000 f90a 	bl	8006d54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b40:	4b1d      	ldr	r3, [pc, #116]	@ (8006bb8 <pvPortMalloc+0x18c>)
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006bb8 <pvPortMalloc+0x18c>)
 8006b4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006bb8 <pvPortMalloc+0x18c>)
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc0 <pvPortMalloc+0x194>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d203      	bcs.n	8006b62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b5a:	4b17      	ldr	r3, [pc, #92]	@ (8006bb8 <pvPortMalloc+0x18c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a18      	ldr	r2, [pc, #96]	@ (8006bc0 <pvPortMalloc+0x194>)
 8006b60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	4b13      	ldr	r3, [pc, #76]	@ (8006bb4 <pvPortMalloc+0x188>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b76:	4b13      	ldr	r3, [pc, #76]	@ (8006bc4 <pvPortMalloc+0x198>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	4a11      	ldr	r2, [pc, #68]	@ (8006bc4 <pvPortMalloc+0x198>)
 8006b7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b80:	f7fe fcec 	bl	800555c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00b      	beq.n	8006ba6 <pvPortMalloc+0x17a>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	60fb      	str	r3, [r7, #12]
}
 8006ba0:	bf00      	nop
 8006ba2:	bf00      	nop
 8006ba4:	e7fd      	b.n	8006ba2 <pvPortMalloc+0x176>
	return pvReturn;
 8006ba6:	69fb      	ldr	r3, [r7, #28]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3728      	adds	r7, #40	@ 0x28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	20004efc 	.word	0x20004efc
 8006bb4:	20004f10 	.word	0x20004f10
 8006bb8:	20004f00 	.word	0x20004f00
 8006bbc:	20004ef4 	.word	0x20004ef4
 8006bc0:	20004f04 	.word	0x20004f04
 8006bc4:	20004f08 	.word	0x20004f08

08006bc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d04f      	beq.n	8006c7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bda:	2308      	movs	r3, #8
 8006bdc:	425b      	negs	r3, r3
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4413      	add	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	4b25      	ldr	r3, [pc, #148]	@ (8006c84 <vPortFree+0xbc>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10b      	bne.n	8006c0e <vPortFree+0x46>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	60fb      	str	r3, [r7, #12]
}
 8006c08:	bf00      	nop
 8006c0a:	bf00      	nop
 8006c0c:	e7fd      	b.n	8006c0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00b      	beq.n	8006c2e <vPortFree+0x66>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	60bb      	str	r3, [r7, #8]
}
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop
 8006c2c:	e7fd      	b.n	8006c2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	4b14      	ldr	r3, [pc, #80]	@ (8006c84 <vPortFree+0xbc>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4013      	ands	r3, r2
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01e      	beq.n	8006c7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d11a      	bne.n	8006c7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	4b0e      	ldr	r3, [pc, #56]	@ (8006c84 <vPortFree+0xbc>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	43db      	mvns	r3, r3
 8006c4e:	401a      	ands	r2, r3
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c54:	f7fe fc74 	bl	8005540 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c88 <vPortFree+0xc0>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4413      	add	r3, r2
 8006c62:	4a09      	ldr	r2, [pc, #36]	@ (8006c88 <vPortFree+0xc0>)
 8006c64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c66:	6938      	ldr	r0, [r7, #16]
 8006c68:	f000 f874 	bl	8006d54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c6c:	4b07      	ldr	r3, [pc, #28]	@ (8006c8c <vPortFree+0xc4>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3301      	adds	r3, #1
 8006c72:	4a06      	ldr	r2, [pc, #24]	@ (8006c8c <vPortFree+0xc4>)
 8006c74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c76:	f7fe fc71 	bl	800555c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c7a:	bf00      	nop
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20004f10 	.word	0x20004f10
 8006c88:	20004f00 	.word	0x20004f00
 8006c8c:	20004f0c 	.word	0x20004f0c

08006c90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006c9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c9c:	4b27      	ldr	r3, [pc, #156]	@ (8006d3c <prvHeapInit+0xac>)
 8006c9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00c      	beq.n	8006cc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3307      	adds	r3, #7
 8006cae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 0307 	bic.w	r3, r3, #7
 8006cb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8006d3c <prvHeapInit+0xac>)
 8006cc0:	4413      	add	r3, r2
 8006cc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d40 <prvHeapInit+0xb0>)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cce:	4b1c      	ldr	r3, [pc, #112]	@ (8006d40 <prvHeapInit+0xb0>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	4413      	add	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cdc:	2208      	movs	r2, #8
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	1a9b      	subs	r3, r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0307 	bic.w	r3, r3, #7
 8006cea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4a15      	ldr	r2, [pc, #84]	@ (8006d44 <prvHeapInit+0xb4>)
 8006cf0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006cf2:	4b14      	ldr	r3, [pc, #80]	@ (8006d44 <prvHeapInit+0xb4>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006cfa:	4b12      	ldr	r3, [pc, #72]	@ (8006d44 <prvHeapInit+0xb4>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	1ad2      	subs	r2, r2, r3
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d10:	4b0c      	ldr	r3, [pc, #48]	@ (8006d44 <prvHeapInit+0xb4>)
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d48 <prvHeapInit+0xb8>)
 8006d1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	4a09      	ldr	r2, [pc, #36]	@ (8006d4c <prvHeapInit+0xbc>)
 8006d26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d28:	4b09      	ldr	r3, [pc, #36]	@ (8006d50 <prvHeapInit+0xc0>)
 8006d2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d2e:	601a      	str	r2, [r3, #0]
}
 8006d30:	bf00      	nop
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	200012f4 	.word	0x200012f4
 8006d40:	20004ef4 	.word	0x20004ef4
 8006d44:	20004efc 	.word	0x20004efc
 8006d48:	20004f04 	.word	0x20004f04
 8006d4c:	20004f00 	.word	0x20004f00
 8006d50:	20004f10 	.word	0x20004f10

08006d54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d5c:	4b28      	ldr	r3, [pc, #160]	@ (8006e00 <prvInsertBlockIntoFreeList+0xac>)
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	e002      	b.n	8006d68 <prvInsertBlockIntoFreeList+0x14>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d8f7      	bhi.n	8006d62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d108      	bne.n	8006d96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	441a      	add	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	441a      	add	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d118      	bne.n	8006ddc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	4b15      	ldr	r3, [pc, #84]	@ (8006e04 <prvInsertBlockIntoFreeList+0xb0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d00d      	beq.n	8006dd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	441a      	add	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	e008      	b.n	8006de4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e04 <prvInsertBlockIntoFreeList+0xb0>)
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	e003      	b.n	8006de4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d002      	beq.n	8006df2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006df2:	bf00      	nop
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	20004ef4 	.word	0x20004ef4
 8006e04:	20004efc 	.word	0x20004efc

08006e08 <siprintf>:
 8006e08:	b40e      	push	{r1, r2, r3}
 8006e0a:	b500      	push	{lr}
 8006e0c:	b09c      	sub	sp, #112	@ 0x70
 8006e0e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006e10:	9002      	str	r0, [sp, #8]
 8006e12:	9006      	str	r0, [sp, #24]
 8006e14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e18:	4809      	ldr	r0, [pc, #36]	@ (8006e40 <siprintf+0x38>)
 8006e1a:	9107      	str	r1, [sp, #28]
 8006e1c:	9104      	str	r1, [sp, #16]
 8006e1e:	4909      	ldr	r1, [pc, #36]	@ (8006e44 <siprintf+0x3c>)
 8006e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e24:	9105      	str	r1, [sp, #20]
 8006e26:	6800      	ldr	r0, [r0, #0]
 8006e28:	9301      	str	r3, [sp, #4]
 8006e2a:	a902      	add	r1, sp, #8
 8006e2c:	f000 f8aa 	bl	8006f84 <_svfiprintf_r>
 8006e30:	9b02      	ldr	r3, [sp, #8]
 8006e32:	2200      	movs	r2, #0
 8006e34:	701a      	strb	r2, [r3, #0]
 8006e36:	b01c      	add	sp, #112	@ 0x70
 8006e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e3c:	b003      	add	sp, #12
 8006e3e:	4770      	bx	lr
 8006e40:	2000001c 	.word	0x2000001c
 8006e44:	ffff0208 	.word	0xffff0208

08006e48 <memset>:
 8006e48:	4402      	add	r2, r0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d100      	bne.n	8006e52 <memset+0xa>
 8006e50:	4770      	bx	lr
 8006e52:	f803 1b01 	strb.w	r1, [r3], #1
 8006e56:	e7f9      	b.n	8006e4c <memset+0x4>

08006e58 <__errno>:
 8006e58:	4b01      	ldr	r3, [pc, #4]	@ (8006e60 <__errno+0x8>)
 8006e5a:	6818      	ldr	r0, [r3, #0]
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	2000001c 	.word	0x2000001c

08006e64 <__libc_init_array>:
 8006e64:	b570      	push	{r4, r5, r6, lr}
 8006e66:	4d0d      	ldr	r5, [pc, #52]	@ (8006e9c <__libc_init_array+0x38>)
 8006e68:	4c0d      	ldr	r4, [pc, #52]	@ (8006ea0 <__libc_init_array+0x3c>)
 8006e6a:	1b64      	subs	r4, r4, r5
 8006e6c:	10a4      	asrs	r4, r4, #2
 8006e6e:	2600      	movs	r6, #0
 8006e70:	42a6      	cmp	r6, r4
 8006e72:	d109      	bne.n	8006e88 <__libc_init_array+0x24>
 8006e74:	4d0b      	ldr	r5, [pc, #44]	@ (8006ea4 <__libc_init_array+0x40>)
 8006e76:	4c0c      	ldr	r4, [pc, #48]	@ (8006ea8 <__libc_init_array+0x44>)
 8006e78:	f000 fc66 	bl	8007748 <_init>
 8006e7c:	1b64      	subs	r4, r4, r5
 8006e7e:	10a4      	asrs	r4, r4, #2
 8006e80:	2600      	movs	r6, #0
 8006e82:	42a6      	cmp	r6, r4
 8006e84:	d105      	bne.n	8006e92 <__libc_init_array+0x2e>
 8006e86:	bd70      	pop	{r4, r5, r6, pc}
 8006e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e8c:	4798      	blx	r3
 8006e8e:	3601      	adds	r6, #1
 8006e90:	e7ee      	b.n	8006e70 <__libc_init_array+0xc>
 8006e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e96:	4798      	blx	r3
 8006e98:	3601      	adds	r6, #1
 8006e9a:	e7f2      	b.n	8006e82 <__libc_init_array+0x1e>
 8006e9c:	08008608 	.word	0x08008608
 8006ea0:	08008608 	.word	0x08008608
 8006ea4:	08008608 	.word	0x08008608
 8006ea8:	0800860c 	.word	0x0800860c

08006eac <__retarget_lock_acquire_recursive>:
 8006eac:	4770      	bx	lr

08006eae <__retarget_lock_release_recursive>:
 8006eae:	4770      	bx	lr

08006eb0 <memcpy>:
 8006eb0:	440a      	add	r2, r1
 8006eb2:	4291      	cmp	r1, r2
 8006eb4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006eb8:	d100      	bne.n	8006ebc <memcpy+0xc>
 8006eba:	4770      	bx	lr
 8006ebc:	b510      	push	{r4, lr}
 8006ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ec2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ec6:	4291      	cmp	r1, r2
 8006ec8:	d1f9      	bne.n	8006ebe <memcpy+0xe>
 8006eca:	bd10      	pop	{r4, pc}

08006ecc <__ssputs_r>:
 8006ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed0:	688e      	ldr	r6, [r1, #8]
 8006ed2:	461f      	mov	r7, r3
 8006ed4:	42be      	cmp	r6, r7
 8006ed6:	680b      	ldr	r3, [r1, #0]
 8006ed8:	4682      	mov	sl, r0
 8006eda:	460c      	mov	r4, r1
 8006edc:	4690      	mov	r8, r2
 8006ede:	d82d      	bhi.n	8006f3c <__ssputs_r+0x70>
 8006ee0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ee4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006ee8:	d026      	beq.n	8006f38 <__ssputs_r+0x6c>
 8006eea:	6965      	ldr	r5, [r4, #20]
 8006eec:	6909      	ldr	r1, [r1, #16]
 8006eee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ef2:	eba3 0901 	sub.w	r9, r3, r1
 8006ef6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006efa:	1c7b      	adds	r3, r7, #1
 8006efc:	444b      	add	r3, r9
 8006efe:	106d      	asrs	r5, r5, #1
 8006f00:	429d      	cmp	r5, r3
 8006f02:	bf38      	it	cc
 8006f04:	461d      	movcc	r5, r3
 8006f06:	0553      	lsls	r3, r2, #21
 8006f08:	d527      	bpl.n	8006f5a <__ssputs_r+0x8e>
 8006f0a:	4629      	mov	r1, r5
 8006f0c:	f000 f958 	bl	80071c0 <_malloc_r>
 8006f10:	4606      	mov	r6, r0
 8006f12:	b360      	cbz	r0, 8006f6e <__ssputs_r+0xa2>
 8006f14:	6921      	ldr	r1, [r4, #16]
 8006f16:	464a      	mov	r2, r9
 8006f18:	f7ff ffca 	bl	8006eb0 <memcpy>
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f26:	81a3      	strh	r3, [r4, #12]
 8006f28:	6126      	str	r6, [r4, #16]
 8006f2a:	6165      	str	r5, [r4, #20]
 8006f2c:	444e      	add	r6, r9
 8006f2e:	eba5 0509 	sub.w	r5, r5, r9
 8006f32:	6026      	str	r6, [r4, #0]
 8006f34:	60a5      	str	r5, [r4, #8]
 8006f36:	463e      	mov	r6, r7
 8006f38:	42be      	cmp	r6, r7
 8006f3a:	d900      	bls.n	8006f3e <__ssputs_r+0x72>
 8006f3c:	463e      	mov	r6, r7
 8006f3e:	6820      	ldr	r0, [r4, #0]
 8006f40:	4632      	mov	r2, r6
 8006f42:	4641      	mov	r1, r8
 8006f44:	f000 fb84 	bl	8007650 <memmove>
 8006f48:	68a3      	ldr	r3, [r4, #8]
 8006f4a:	1b9b      	subs	r3, r3, r6
 8006f4c:	60a3      	str	r3, [r4, #8]
 8006f4e:	6823      	ldr	r3, [r4, #0]
 8006f50:	4433      	add	r3, r6
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	2000      	movs	r0, #0
 8006f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f5a:	462a      	mov	r2, r5
 8006f5c:	f000 fb4a 	bl	80075f4 <_realloc_r>
 8006f60:	4606      	mov	r6, r0
 8006f62:	2800      	cmp	r0, #0
 8006f64:	d1e0      	bne.n	8006f28 <__ssputs_r+0x5c>
 8006f66:	6921      	ldr	r1, [r4, #16]
 8006f68:	4650      	mov	r0, sl
 8006f6a:	f000 fb9b 	bl	80076a4 <_free_r>
 8006f6e:	230c      	movs	r3, #12
 8006f70:	f8ca 3000 	str.w	r3, [sl]
 8006f74:	89a3      	ldrh	r3, [r4, #12]
 8006f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f7a:	81a3      	strh	r3, [r4, #12]
 8006f7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f80:	e7e9      	b.n	8006f56 <__ssputs_r+0x8a>
	...

08006f84 <_svfiprintf_r>:
 8006f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f88:	4698      	mov	r8, r3
 8006f8a:	898b      	ldrh	r3, [r1, #12]
 8006f8c:	061b      	lsls	r3, r3, #24
 8006f8e:	b09d      	sub	sp, #116	@ 0x74
 8006f90:	4607      	mov	r7, r0
 8006f92:	460d      	mov	r5, r1
 8006f94:	4614      	mov	r4, r2
 8006f96:	d510      	bpl.n	8006fba <_svfiprintf_r+0x36>
 8006f98:	690b      	ldr	r3, [r1, #16]
 8006f9a:	b973      	cbnz	r3, 8006fba <_svfiprintf_r+0x36>
 8006f9c:	2140      	movs	r1, #64	@ 0x40
 8006f9e:	f000 f90f 	bl	80071c0 <_malloc_r>
 8006fa2:	6028      	str	r0, [r5, #0]
 8006fa4:	6128      	str	r0, [r5, #16]
 8006fa6:	b930      	cbnz	r0, 8006fb6 <_svfiprintf_r+0x32>
 8006fa8:	230c      	movs	r3, #12
 8006faa:	603b      	str	r3, [r7, #0]
 8006fac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006fb0:	b01d      	add	sp, #116	@ 0x74
 8006fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb6:	2340      	movs	r3, #64	@ 0x40
 8006fb8:	616b      	str	r3, [r5, #20]
 8006fba:	2300      	movs	r3, #0
 8006fbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fbe:	2320      	movs	r3, #32
 8006fc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006fc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fc8:	2330      	movs	r3, #48	@ 0x30
 8006fca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007168 <_svfiprintf_r+0x1e4>
 8006fce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006fd2:	f04f 0901 	mov.w	r9, #1
 8006fd6:	4623      	mov	r3, r4
 8006fd8:	469a      	mov	sl, r3
 8006fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fde:	b10a      	cbz	r2, 8006fe4 <_svfiprintf_r+0x60>
 8006fe0:	2a25      	cmp	r2, #37	@ 0x25
 8006fe2:	d1f9      	bne.n	8006fd8 <_svfiprintf_r+0x54>
 8006fe4:	ebba 0b04 	subs.w	fp, sl, r4
 8006fe8:	d00b      	beq.n	8007002 <_svfiprintf_r+0x7e>
 8006fea:	465b      	mov	r3, fp
 8006fec:	4622      	mov	r2, r4
 8006fee:	4629      	mov	r1, r5
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	f7ff ff6b 	bl	8006ecc <__ssputs_r>
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	f000 80a7 	beq.w	800714a <_svfiprintf_r+0x1c6>
 8006ffc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ffe:	445a      	add	r2, fp
 8007000:	9209      	str	r2, [sp, #36]	@ 0x24
 8007002:	f89a 3000 	ldrb.w	r3, [sl]
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 809f 	beq.w	800714a <_svfiprintf_r+0x1c6>
 800700c:	2300      	movs	r3, #0
 800700e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007016:	f10a 0a01 	add.w	sl, sl, #1
 800701a:	9304      	str	r3, [sp, #16]
 800701c:	9307      	str	r3, [sp, #28]
 800701e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007022:	931a      	str	r3, [sp, #104]	@ 0x68
 8007024:	4654      	mov	r4, sl
 8007026:	2205      	movs	r2, #5
 8007028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800702c:	484e      	ldr	r0, [pc, #312]	@ (8007168 <_svfiprintf_r+0x1e4>)
 800702e:	f7f9 f8ef 	bl	8000210 <memchr>
 8007032:	9a04      	ldr	r2, [sp, #16]
 8007034:	b9d8      	cbnz	r0, 800706e <_svfiprintf_r+0xea>
 8007036:	06d0      	lsls	r0, r2, #27
 8007038:	bf44      	itt	mi
 800703a:	2320      	movmi	r3, #32
 800703c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007040:	0711      	lsls	r1, r2, #28
 8007042:	bf44      	itt	mi
 8007044:	232b      	movmi	r3, #43	@ 0x2b
 8007046:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800704a:	f89a 3000 	ldrb.w	r3, [sl]
 800704e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007050:	d015      	beq.n	800707e <_svfiprintf_r+0xfa>
 8007052:	9a07      	ldr	r2, [sp, #28]
 8007054:	4654      	mov	r4, sl
 8007056:	2000      	movs	r0, #0
 8007058:	f04f 0c0a 	mov.w	ip, #10
 800705c:	4621      	mov	r1, r4
 800705e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007062:	3b30      	subs	r3, #48	@ 0x30
 8007064:	2b09      	cmp	r3, #9
 8007066:	d94b      	bls.n	8007100 <_svfiprintf_r+0x17c>
 8007068:	b1b0      	cbz	r0, 8007098 <_svfiprintf_r+0x114>
 800706a:	9207      	str	r2, [sp, #28]
 800706c:	e014      	b.n	8007098 <_svfiprintf_r+0x114>
 800706e:	eba0 0308 	sub.w	r3, r0, r8
 8007072:	fa09 f303 	lsl.w	r3, r9, r3
 8007076:	4313      	orrs	r3, r2
 8007078:	9304      	str	r3, [sp, #16]
 800707a:	46a2      	mov	sl, r4
 800707c:	e7d2      	b.n	8007024 <_svfiprintf_r+0xa0>
 800707e:	9b03      	ldr	r3, [sp, #12]
 8007080:	1d19      	adds	r1, r3, #4
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	9103      	str	r1, [sp, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	bfbb      	ittet	lt
 800708a:	425b      	neglt	r3, r3
 800708c:	f042 0202 	orrlt.w	r2, r2, #2
 8007090:	9307      	strge	r3, [sp, #28]
 8007092:	9307      	strlt	r3, [sp, #28]
 8007094:	bfb8      	it	lt
 8007096:	9204      	strlt	r2, [sp, #16]
 8007098:	7823      	ldrb	r3, [r4, #0]
 800709a:	2b2e      	cmp	r3, #46	@ 0x2e
 800709c:	d10a      	bne.n	80070b4 <_svfiprintf_r+0x130>
 800709e:	7863      	ldrb	r3, [r4, #1]
 80070a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80070a2:	d132      	bne.n	800710a <_svfiprintf_r+0x186>
 80070a4:	9b03      	ldr	r3, [sp, #12]
 80070a6:	1d1a      	adds	r2, r3, #4
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	9203      	str	r2, [sp, #12]
 80070ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80070b0:	3402      	adds	r4, #2
 80070b2:	9305      	str	r3, [sp, #20]
 80070b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007178 <_svfiprintf_r+0x1f4>
 80070b8:	7821      	ldrb	r1, [r4, #0]
 80070ba:	2203      	movs	r2, #3
 80070bc:	4650      	mov	r0, sl
 80070be:	f7f9 f8a7 	bl	8000210 <memchr>
 80070c2:	b138      	cbz	r0, 80070d4 <_svfiprintf_r+0x150>
 80070c4:	9b04      	ldr	r3, [sp, #16]
 80070c6:	eba0 000a 	sub.w	r0, r0, sl
 80070ca:	2240      	movs	r2, #64	@ 0x40
 80070cc:	4082      	lsls	r2, r0
 80070ce:	4313      	orrs	r3, r2
 80070d0:	3401      	adds	r4, #1
 80070d2:	9304      	str	r3, [sp, #16]
 80070d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d8:	4824      	ldr	r0, [pc, #144]	@ (800716c <_svfiprintf_r+0x1e8>)
 80070da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070de:	2206      	movs	r2, #6
 80070e0:	f7f9 f896 	bl	8000210 <memchr>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d036      	beq.n	8007156 <_svfiprintf_r+0x1d2>
 80070e8:	4b21      	ldr	r3, [pc, #132]	@ (8007170 <_svfiprintf_r+0x1ec>)
 80070ea:	bb1b      	cbnz	r3, 8007134 <_svfiprintf_r+0x1b0>
 80070ec:	9b03      	ldr	r3, [sp, #12]
 80070ee:	3307      	adds	r3, #7
 80070f0:	f023 0307 	bic.w	r3, r3, #7
 80070f4:	3308      	adds	r3, #8
 80070f6:	9303      	str	r3, [sp, #12]
 80070f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070fa:	4433      	add	r3, r6
 80070fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80070fe:	e76a      	b.n	8006fd6 <_svfiprintf_r+0x52>
 8007100:	fb0c 3202 	mla	r2, ip, r2, r3
 8007104:	460c      	mov	r4, r1
 8007106:	2001      	movs	r0, #1
 8007108:	e7a8      	b.n	800705c <_svfiprintf_r+0xd8>
 800710a:	2300      	movs	r3, #0
 800710c:	3401      	adds	r4, #1
 800710e:	9305      	str	r3, [sp, #20]
 8007110:	4619      	mov	r1, r3
 8007112:	f04f 0c0a 	mov.w	ip, #10
 8007116:	4620      	mov	r0, r4
 8007118:	f810 2b01 	ldrb.w	r2, [r0], #1
 800711c:	3a30      	subs	r2, #48	@ 0x30
 800711e:	2a09      	cmp	r2, #9
 8007120:	d903      	bls.n	800712a <_svfiprintf_r+0x1a6>
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0c6      	beq.n	80070b4 <_svfiprintf_r+0x130>
 8007126:	9105      	str	r1, [sp, #20]
 8007128:	e7c4      	b.n	80070b4 <_svfiprintf_r+0x130>
 800712a:	fb0c 2101 	mla	r1, ip, r1, r2
 800712e:	4604      	mov	r4, r0
 8007130:	2301      	movs	r3, #1
 8007132:	e7f0      	b.n	8007116 <_svfiprintf_r+0x192>
 8007134:	ab03      	add	r3, sp, #12
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	462a      	mov	r2, r5
 800713a:	4b0e      	ldr	r3, [pc, #56]	@ (8007174 <_svfiprintf_r+0x1f0>)
 800713c:	a904      	add	r1, sp, #16
 800713e:	4638      	mov	r0, r7
 8007140:	f3af 8000 	nop.w
 8007144:	1c42      	adds	r2, r0, #1
 8007146:	4606      	mov	r6, r0
 8007148:	d1d6      	bne.n	80070f8 <_svfiprintf_r+0x174>
 800714a:	89ab      	ldrh	r3, [r5, #12]
 800714c:	065b      	lsls	r3, r3, #25
 800714e:	f53f af2d 	bmi.w	8006fac <_svfiprintf_r+0x28>
 8007152:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007154:	e72c      	b.n	8006fb0 <_svfiprintf_r+0x2c>
 8007156:	ab03      	add	r3, sp, #12
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	462a      	mov	r2, r5
 800715c:	4b05      	ldr	r3, [pc, #20]	@ (8007174 <_svfiprintf_r+0x1f0>)
 800715e:	a904      	add	r1, sp, #16
 8007160:	4638      	mov	r0, r7
 8007162:	f000 f91b 	bl	800739c <_printf_i>
 8007166:	e7ed      	b.n	8007144 <_svfiprintf_r+0x1c0>
 8007168:	080085cc 	.word	0x080085cc
 800716c:	080085d6 	.word	0x080085d6
 8007170:	00000000 	.word	0x00000000
 8007174:	08006ecd 	.word	0x08006ecd
 8007178:	080085d2 	.word	0x080085d2

0800717c <sbrk_aligned>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	4e0f      	ldr	r6, [pc, #60]	@ (80071bc <sbrk_aligned+0x40>)
 8007180:	460c      	mov	r4, r1
 8007182:	6831      	ldr	r1, [r6, #0]
 8007184:	4605      	mov	r5, r0
 8007186:	b911      	cbnz	r1, 800718e <sbrk_aligned+0x12>
 8007188:	f000 fa7c 	bl	8007684 <_sbrk_r>
 800718c:	6030      	str	r0, [r6, #0]
 800718e:	4621      	mov	r1, r4
 8007190:	4628      	mov	r0, r5
 8007192:	f000 fa77 	bl	8007684 <_sbrk_r>
 8007196:	1c43      	adds	r3, r0, #1
 8007198:	d103      	bne.n	80071a2 <sbrk_aligned+0x26>
 800719a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800719e:	4620      	mov	r0, r4
 80071a0:	bd70      	pop	{r4, r5, r6, pc}
 80071a2:	1cc4      	adds	r4, r0, #3
 80071a4:	f024 0403 	bic.w	r4, r4, #3
 80071a8:	42a0      	cmp	r0, r4
 80071aa:	d0f8      	beq.n	800719e <sbrk_aligned+0x22>
 80071ac:	1a21      	subs	r1, r4, r0
 80071ae:	4628      	mov	r0, r5
 80071b0:	f000 fa68 	bl	8007684 <_sbrk_r>
 80071b4:	3001      	adds	r0, #1
 80071b6:	d1f2      	bne.n	800719e <sbrk_aligned+0x22>
 80071b8:	e7ef      	b.n	800719a <sbrk_aligned+0x1e>
 80071ba:	bf00      	nop
 80071bc:	20005050 	.word	0x20005050

080071c0 <_malloc_r>:
 80071c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c4:	1ccd      	adds	r5, r1, #3
 80071c6:	f025 0503 	bic.w	r5, r5, #3
 80071ca:	3508      	adds	r5, #8
 80071cc:	2d0c      	cmp	r5, #12
 80071ce:	bf38      	it	cc
 80071d0:	250c      	movcc	r5, #12
 80071d2:	2d00      	cmp	r5, #0
 80071d4:	4606      	mov	r6, r0
 80071d6:	db01      	blt.n	80071dc <_malloc_r+0x1c>
 80071d8:	42a9      	cmp	r1, r5
 80071da:	d904      	bls.n	80071e6 <_malloc_r+0x26>
 80071dc:	230c      	movs	r3, #12
 80071de:	6033      	str	r3, [r6, #0]
 80071e0:	2000      	movs	r0, #0
 80071e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072bc <_malloc_r+0xfc>
 80071ea:	f000 f9f7 	bl	80075dc <__malloc_lock>
 80071ee:	f8d8 3000 	ldr.w	r3, [r8]
 80071f2:	461c      	mov	r4, r3
 80071f4:	bb44      	cbnz	r4, 8007248 <_malloc_r+0x88>
 80071f6:	4629      	mov	r1, r5
 80071f8:	4630      	mov	r0, r6
 80071fa:	f7ff ffbf 	bl	800717c <sbrk_aligned>
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	4604      	mov	r4, r0
 8007202:	d158      	bne.n	80072b6 <_malloc_r+0xf6>
 8007204:	f8d8 4000 	ldr.w	r4, [r8]
 8007208:	4627      	mov	r7, r4
 800720a:	2f00      	cmp	r7, #0
 800720c:	d143      	bne.n	8007296 <_malloc_r+0xd6>
 800720e:	2c00      	cmp	r4, #0
 8007210:	d04b      	beq.n	80072aa <_malloc_r+0xea>
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	4639      	mov	r1, r7
 8007216:	4630      	mov	r0, r6
 8007218:	eb04 0903 	add.w	r9, r4, r3
 800721c:	f000 fa32 	bl	8007684 <_sbrk_r>
 8007220:	4581      	cmp	r9, r0
 8007222:	d142      	bne.n	80072aa <_malloc_r+0xea>
 8007224:	6821      	ldr	r1, [r4, #0]
 8007226:	1a6d      	subs	r5, r5, r1
 8007228:	4629      	mov	r1, r5
 800722a:	4630      	mov	r0, r6
 800722c:	f7ff ffa6 	bl	800717c <sbrk_aligned>
 8007230:	3001      	adds	r0, #1
 8007232:	d03a      	beq.n	80072aa <_malloc_r+0xea>
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	442b      	add	r3, r5
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	f8d8 3000 	ldr.w	r3, [r8]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	bb62      	cbnz	r2, 800729c <_malloc_r+0xdc>
 8007242:	f8c8 7000 	str.w	r7, [r8]
 8007246:	e00f      	b.n	8007268 <_malloc_r+0xa8>
 8007248:	6822      	ldr	r2, [r4, #0]
 800724a:	1b52      	subs	r2, r2, r5
 800724c:	d420      	bmi.n	8007290 <_malloc_r+0xd0>
 800724e:	2a0b      	cmp	r2, #11
 8007250:	d917      	bls.n	8007282 <_malloc_r+0xc2>
 8007252:	1961      	adds	r1, r4, r5
 8007254:	42a3      	cmp	r3, r4
 8007256:	6025      	str	r5, [r4, #0]
 8007258:	bf18      	it	ne
 800725a:	6059      	strne	r1, [r3, #4]
 800725c:	6863      	ldr	r3, [r4, #4]
 800725e:	bf08      	it	eq
 8007260:	f8c8 1000 	streq.w	r1, [r8]
 8007264:	5162      	str	r2, [r4, r5]
 8007266:	604b      	str	r3, [r1, #4]
 8007268:	4630      	mov	r0, r6
 800726a:	f000 f9bd 	bl	80075e8 <__malloc_unlock>
 800726e:	f104 000b 	add.w	r0, r4, #11
 8007272:	1d23      	adds	r3, r4, #4
 8007274:	f020 0007 	bic.w	r0, r0, #7
 8007278:	1ac2      	subs	r2, r0, r3
 800727a:	bf1c      	itt	ne
 800727c:	1a1b      	subne	r3, r3, r0
 800727e:	50a3      	strne	r3, [r4, r2]
 8007280:	e7af      	b.n	80071e2 <_malloc_r+0x22>
 8007282:	6862      	ldr	r2, [r4, #4]
 8007284:	42a3      	cmp	r3, r4
 8007286:	bf0c      	ite	eq
 8007288:	f8c8 2000 	streq.w	r2, [r8]
 800728c:	605a      	strne	r2, [r3, #4]
 800728e:	e7eb      	b.n	8007268 <_malloc_r+0xa8>
 8007290:	4623      	mov	r3, r4
 8007292:	6864      	ldr	r4, [r4, #4]
 8007294:	e7ae      	b.n	80071f4 <_malloc_r+0x34>
 8007296:	463c      	mov	r4, r7
 8007298:	687f      	ldr	r7, [r7, #4]
 800729a:	e7b6      	b.n	800720a <_malloc_r+0x4a>
 800729c:	461a      	mov	r2, r3
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	42a3      	cmp	r3, r4
 80072a2:	d1fb      	bne.n	800729c <_malloc_r+0xdc>
 80072a4:	2300      	movs	r3, #0
 80072a6:	6053      	str	r3, [r2, #4]
 80072a8:	e7de      	b.n	8007268 <_malloc_r+0xa8>
 80072aa:	230c      	movs	r3, #12
 80072ac:	6033      	str	r3, [r6, #0]
 80072ae:	4630      	mov	r0, r6
 80072b0:	f000 f99a 	bl	80075e8 <__malloc_unlock>
 80072b4:	e794      	b.n	80071e0 <_malloc_r+0x20>
 80072b6:	6005      	str	r5, [r0, #0]
 80072b8:	e7d6      	b.n	8007268 <_malloc_r+0xa8>
 80072ba:	bf00      	nop
 80072bc:	20005054 	.word	0x20005054

080072c0 <_printf_common>:
 80072c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c4:	4616      	mov	r6, r2
 80072c6:	4698      	mov	r8, r3
 80072c8:	688a      	ldr	r2, [r1, #8]
 80072ca:	690b      	ldr	r3, [r1, #16]
 80072cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80072d0:	4293      	cmp	r3, r2
 80072d2:	bfb8      	it	lt
 80072d4:	4613      	movlt	r3, r2
 80072d6:	6033      	str	r3, [r6, #0]
 80072d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80072dc:	4607      	mov	r7, r0
 80072de:	460c      	mov	r4, r1
 80072e0:	b10a      	cbz	r2, 80072e6 <_printf_common+0x26>
 80072e2:	3301      	adds	r3, #1
 80072e4:	6033      	str	r3, [r6, #0]
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	0699      	lsls	r1, r3, #26
 80072ea:	bf42      	ittt	mi
 80072ec:	6833      	ldrmi	r3, [r6, #0]
 80072ee:	3302      	addmi	r3, #2
 80072f0:	6033      	strmi	r3, [r6, #0]
 80072f2:	6825      	ldr	r5, [r4, #0]
 80072f4:	f015 0506 	ands.w	r5, r5, #6
 80072f8:	d106      	bne.n	8007308 <_printf_common+0x48>
 80072fa:	f104 0a19 	add.w	sl, r4, #25
 80072fe:	68e3      	ldr	r3, [r4, #12]
 8007300:	6832      	ldr	r2, [r6, #0]
 8007302:	1a9b      	subs	r3, r3, r2
 8007304:	42ab      	cmp	r3, r5
 8007306:	dc26      	bgt.n	8007356 <_printf_common+0x96>
 8007308:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800730c:	6822      	ldr	r2, [r4, #0]
 800730e:	3b00      	subs	r3, #0
 8007310:	bf18      	it	ne
 8007312:	2301      	movne	r3, #1
 8007314:	0692      	lsls	r2, r2, #26
 8007316:	d42b      	bmi.n	8007370 <_printf_common+0xb0>
 8007318:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800731c:	4641      	mov	r1, r8
 800731e:	4638      	mov	r0, r7
 8007320:	47c8      	blx	r9
 8007322:	3001      	adds	r0, #1
 8007324:	d01e      	beq.n	8007364 <_printf_common+0xa4>
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	6922      	ldr	r2, [r4, #16]
 800732a:	f003 0306 	and.w	r3, r3, #6
 800732e:	2b04      	cmp	r3, #4
 8007330:	bf02      	ittt	eq
 8007332:	68e5      	ldreq	r5, [r4, #12]
 8007334:	6833      	ldreq	r3, [r6, #0]
 8007336:	1aed      	subeq	r5, r5, r3
 8007338:	68a3      	ldr	r3, [r4, #8]
 800733a:	bf0c      	ite	eq
 800733c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007340:	2500      	movne	r5, #0
 8007342:	4293      	cmp	r3, r2
 8007344:	bfc4      	itt	gt
 8007346:	1a9b      	subgt	r3, r3, r2
 8007348:	18ed      	addgt	r5, r5, r3
 800734a:	2600      	movs	r6, #0
 800734c:	341a      	adds	r4, #26
 800734e:	42b5      	cmp	r5, r6
 8007350:	d11a      	bne.n	8007388 <_printf_common+0xc8>
 8007352:	2000      	movs	r0, #0
 8007354:	e008      	b.n	8007368 <_printf_common+0xa8>
 8007356:	2301      	movs	r3, #1
 8007358:	4652      	mov	r2, sl
 800735a:	4641      	mov	r1, r8
 800735c:	4638      	mov	r0, r7
 800735e:	47c8      	blx	r9
 8007360:	3001      	adds	r0, #1
 8007362:	d103      	bne.n	800736c <_printf_common+0xac>
 8007364:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800736c:	3501      	adds	r5, #1
 800736e:	e7c6      	b.n	80072fe <_printf_common+0x3e>
 8007370:	18e1      	adds	r1, r4, r3
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	2030      	movs	r0, #48	@ 0x30
 8007376:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800737a:	4422      	add	r2, r4
 800737c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007380:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007384:	3302      	adds	r3, #2
 8007386:	e7c7      	b.n	8007318 <_printf_common+0x58>
 8007388:	2301      	movs	r3, #1
 800738a:	4622      	mov	r2, r4
 800738c:	4641      	mov	r1, r8
 800738e:	4638      	mov	r0, r7
 8007390:	47c8      	blx	r9
 8007392:	3001      	adds	r0, #1
 8007394:	d0e6      	beq.n	8007364 <_printf_common+0xa4>
 8007396:	3601      	adds	r6, #1
 8007398:	e7d9      	b.n	800734e <_printf_common+0x8e>
	...

0800739c <_printf_i>:
 800739c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073a0:	7e0f      	ldrb	r7, [r1, #24]
 80073a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073a4:	2f78      	cmp	r7, #120	@ 0x78
 80073a6:	4691      	mov	r9, r2
 80073a8:	4680      	mov	r8, r0
 80073aa:	460c      	mov	r4, r1
 80073ac:	469a      	mov	sl, r3
 80073ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80073b2:	d807      	bhi.n	80073c4 <_printf_i+0x28>
 80073b4:	2f62      	cmp	r7, #98	@ 0x62
 80073b6:	d80a      	bhi.n	80073ce <_printf_i+0x32>
 80073b8:	2f00      	cmp	r7, #0
 80073ba:	f000 80d2 	beq.w	8007562 <_printf_i+0x1c6>
 80073be:	2f58      	cmp	r7, #88	@ 0x58
 80073c0:	f000 80b9 	beq.w	8007536 <_printf_i+0x19a>
 80073c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80073cc:	e03a      	b.n	8007444 <_printf_i+0xa8>
 80073ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80073d2:	2b15      	cmp	r3, #21
 80073d4:	d8f6      	bhi.n	80073c4 <_printf_i+0x28>
 80073d6:	a101      	add	r1, pc, #4	@ (adr r1, 80073dc <_printf_i+0x40>)
 80073d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073dc:	08007435 	.word	0x08007435
 80073e0:	08007449 	.word	0x08007449
 80073e4:	080073c5 	.word	0x080073c5
 80073e8:	080073c5 	.word	0x080073c5
 80073ec:	080073c5 	.word	0x080073c5
 80073f0:	080073c5 	.word	0x080073c5
 80073f4:	08007449 	.word	0x08007449
 80073f8:	080073c5 	.word	0x080073c5
 80073fc:	080073c5 	.word	0x080073c5
 8007400:	080073c5 	.word	0x080073c5
 8007404:	080073c5 	.word	0x080073c5
 8007408:	08007549 	.word	0x08007549
 800740c:	08007473 	.word	0x08007473
 8007410:	08007503 	.word	0x08007503
 8007414:	080073c5 	.word	0x080073c5
 8007418:	080073c5 	.word	0x080073c5
 800741c:	0800756b 	.word	0x0800756b
 8007420:	080073c5 	.word	0x080073c5
 8007424:	08007473 	.word	0x08007473
 8007428:	080073c5 	.word	0x080073c5
 800742c:	080073c5 	.word	0x080073c5
 8007430:	0800750b 	.word	0x0800750b
 8007434:	6833      	ldr	r3, [r6, #0]
 8007436:	1d1a      	adds	r2, r3, #4
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6032      	str	r2, [r6, #0]
 800743c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007440:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007444:	2301      	movs	r3, #1
 8007446:	e09d      	b.n	8007584 <_printf_i+0x1e8>
 8007448:	6833      	ldr	r3, [r6, #0]
 800744a:	6820      	ldr	r0, [r4, #0]
 800744c:	1d19      	adds	r1, r3, #4
 800744e:	6031      	str	r1, [r6, #0]
 8007450:	0606      	lsls	r6, r0, #24
 8007452:	d501      	bpl.n	8007458 <_printf_i+0xbc>
 8007454:	681d      	ldr	r5, [r3, #0]
 8007456:	e003      	b.n	8007460 <_printf_i+0xc4>
 8007458:	0645      	lsls	r5, r0, #25
 800745a:	d5fb      	bpl.n	8007454 <_printf_i+0xb8>
 800745c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007460:	2d00      	cmp	r5, #0
 8007462:	da03      	bge.n	800746c <_printf_i+0xd0>
 8007464:	232d      	movs	r3, #45	@ 0x2d
 8007466:	426d      	negs	r5, r5
 8007468:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800746c:	4859      	ldr	r0, [pc, #356]	@ (80075d4 <_printf_i+0x238>)
 800746e:	230a      	movs	r3, #10
 8007470:	e011      	b.n	8007496 <_printf_i+0xfa>
 8007472:	6821      	ldr	r1, [r4, #0]
 8007474:	6833      	ldr	r3, [r6, #0]
 8007476:	0608      	lsls	r0, r1, #24
 8007478:	f853 5b04 	ldr.w	r5, [r3], #4
 800747c:	d402      	bmi.n	8007484 <_printf_i+0xe8>
 800747e:	0649      	lsls	r1, r1, #25
 8007480:	bf48      	it	mi
 8007482:	b2ad      	uxthmi	r5, r5
 8007484:	2f6f      	cmp	r7, #111	@ 0x6f
 8007486:	4853      	ldr	r0, [pc, #332]	@ (80075d4 <_printf_i+0x238>)
 8007488:	6033      	str	r3, [r6, #0]
 800748a:	bf14      	ite	ne
 800748c:	230a      	movne	r3, #10
 800748e:	2308      	moveq	r3, #8
 8007490:	2100      	movs	r1, #0
 8007492:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007496:	6866      	ldr	r6, [r4, #4]
 8007498:	60a6      	str	r6, [r4, #8]
 800749a:	2e00      	cmp	r6, #0
 800749c:	bfa2      	ittt	ge
 800749e:	6821      	ldrge	r1, [r4, #0]
 80074a0:	f021 0104 	bicge.w	r1, r1, #4
 80074a4:	6021      	strge	r1, [r4, #0]
 80074a6:	b90d      	cbnz	r5, 80074ac <_printf_i+0x110>
 80074a8:	2e00      	cmp	r6, #0
 80074aa:	d04b      	beq.n	8007544 <_printf_i+0x1a8>
 80074ac:	4616      	mov	r6, r2
 80074ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80074b2:	fb03 5711 	mls	r7, r3, r1, r5
 80074b6:	5dc7      	ldrb	r7, [r0, r7]
 80074b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074bc:	462f      	mov	r7, r5
 80074be:	42bb      	cmp	r3, r7
 80074c0:	460d      	mov	r5, r1
 80074c2:	d9f4      	bls.n	80074ae <_printf_i+0x112>
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	d10b      	bne.n	80074e0 <_printf_i+0x144>
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	07df      	lsls	r7, r3, #31
 80074cc:	d508      	bpl.n	80074e0 <_printf_i+0x144>
 80074ce:	6923      	ldr	r3, [r4, #16]
 80074d0:	6861      	ldr	r1, [r4, #4]
 80074d2:	4299      	cmp	r1, r3
 80074d4:	bfde      	ittt	le
 80074d6:	2330      	movle	r3, #48	@ 0x30
 80074d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074dc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80074e0:	1b92      	subs	r2, r2, r6
 80074e2:	6122      	str	r2, [r4, #16]
 80074e4:	f8cd a000 	str.w	sl, [sp]
 80074e8:	464b      	mov	r3, r9
 80074ea:	aa03      	add	r2, sp, #12
 80074ec:	4621      	mov	r1, r4
 80074ee:	4640      	mov	r0, r8
 80074f0:	f7ff fee6 	bl	80072c0 <_printf_common>
 80074f4:	3001      	adds	r0, #1
 80074f6:	d14a      	bne.n	800758e <_printf_i+0x1f2>
 80074f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074fc:	b004      	add	sp, #16
 80074fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	f043 0320 	orr.w	r3, r3, #32
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	4833      	ldr	r0, [pc, #204]	@ (80075d8 <_printf_i+0x23c>)
 800750c:	2778      	movs	r7, #120	@ 0x78
 800750e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	6831      	ldr	r1, [r6, #0]
 8007516:	061f      	lsls	r7, r3, #24
 8007518:	f851 5b04 	ldr.w	r5, [r1], #4
 800751c:	d402      	bmi.n	8007524 <_printf_i+0x188>
 800751e:	065f      	lsls	r7, r3, #25
 8007520:	bf48      	it	mi
 8007522:	b2ad      	uxthmi	r5, r5
 8007524:	6031      	str	r1, [r6, #0]
 8007526:	07d9      	lsls	r1, r3, #31
 8007528:	bf44      	itt	mi
 800752a:	f043 0320 	orrmi.w	r3, r3, #32
 800752e:	6023      	strmi	r3, [r4, #0]
 8007530:	b11d      	cbz	r5, 800753a <_printf_i+0x19e>
 8007532:	2310      	movs	r3, #16
 8007534:	e7ac      	b.n	8007490 <_printf_i+0xf4>
 8007536:	4827      	ldr	r0, [pc, #156]	@ (80075d4 <_printf_i+0x238>)
 8007538:	e7e9      	b.n	800750e <_printf_i+0x172>
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	f023 0320 	bic.w	r3, r3, #32
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	e7f6      	b.n	8007532 <_printf_i+0x196>
 8007544:	4616      	mov	r6, r2
 8007546:	e7bd      	b.n	80074c4 <_printf_i+0x128>
 8007548:	6833      	ldr	r3, [r6, #0]
 800754a:	6825      	ldr	r5, [r4, #0]
 800754c:	6961      	ldr	r1, [r4, #20]
 800754e:	1d18      	adds	r0, r3, #4
 8007550:	6030      	str	r0, [r6, #0]
 8007552:	062e      	lsls	r6, r5, #24
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	d501      	bpl.n	800755c <_printf_i+0x1c0>
 8007558:	6019      	str	r1, [r3, #0]
 800755a:	e002      	b.n	8007562 <_printf_i+0x1c6>
 800755c:	0668      	lsls	r0, r5, #25
 800755e:	d5fb      	bpl.n	8007558 <_printf_i+0x1bc>
 8007560:	8019      	strh	r1, [r3, #0]
 8007562:	2300      	movs	r3, #0
 8007564:	6123      	str	r3, [r4, #16]
 8007566:	4616      	mov	r6, r2
 8007568:	e7bc      	b.n	80074e4 <_printf_i+0x148>
 800756a:	6833      	ldr	r3, [r6, #0]
 800756c:	1d1a      	adds	r2, r3, #4
 800756e:	6032      	str	r2, [r6, #0]
 8007570:	681e      	ldr	r6, [r3, #0]
 8007572:	6862      	ldr	r2, [r4, #4]
 8007574:	2100      	movs	r1, #0
 8007576:	4630      	mov	r0, r6
 8007578:	f7f8 fe4a 	bl	8000210 <memchr>
 800757c:	b108      	cbz	r0, 8007582 <_printf_i+0x1e6>
 800757e:	1b80      	subs	r0, r0, r6
 8007580:	6060      	str	r0, [r4, #4]
 8007582:	6863      	ldr	r3, [r4, #4]
 8007584:	6123      	str	r3, [r4, #16]
 8007586:	2300      	movs	r3, #0
 8007588:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800758c:	e7aa      	b.n	80074e4 <_printf_i+0x148>
 800758e:	6923      	ldr	r3, [r4, #16]
 8007590:	4632      	mov	r2, r6
 8007592:	4649      	mov	r1, r9
 8007594:	4640      	mov	r0, r8
 8007596:	47d0      	blx	sl
 8007598:	3001      	adds	r0, #1
 800759a:	d0ad      	beq.n	80074f8 <_printf_i+0x15c>
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	079b      	lsls	r3, r3, #30
 80075a0:	d413      	bmi.n	80075ca <_printf_i+0x22e>
 80075a2:	68e0      	ldr	r0, [r4, #12]
 80075a4:	9b03      	ldr	r3, [sp, #12]
 80075a6:	4298      	cmp	r0, r3
 80075a8:	bfb8      	it	lt
 80075aa:	4618      	movlt	r0, r3
 80075ac:	e7a6      	b.n	80074fc <_printf_i+0x160>
 80075ae:	2301      	movs	r3, #1
 80075b0:	4632      	mov	r2, r6
 80075b2:	4649      	mov	r1, r9
 80075b4:	4640      	mov	r0, r8
 80075b6:	47d0      	blx	sl
 80075b8:	3001      	adds	r0, #1
 80075ba:	d09d      	beq.n	80074f8 <_printf_i+0x15c>
 80075bc:	3501      	adds	r5, #1
 80075be:	68e3      	ldr	r3, [r4, #12]
 80075c0:	9903      	ldr	r1, [sp, #12]
 80075c2:	1a5b      	subs	r3, r3, r1
 80075c4:	42ab      	cmp	r3, r5
 80075c6:	dcf2      	bgt.n	80075ae <_printf_i+0x212>
 80075c8:	e7eb      	b.n	80075a2 <_printf_i+0x206>
 80075ca:	2500      	movs	r5, #0
 80075cc:	f104 0619 	add.w	r6, r4, #25
 80075d0:	e7f5      	b.n	80075be <_printf_i+0x222>
 80075d2:	bf00      	nop
 80075d4:	080085dd 	.word	0x080085dd
 80075d8:	080085ee 	.word	0x080085ee

080075dc <__malloc_lock>:
 80075dc:	4801      	ldr	r0, [pc, #4]	@ (80075e4 <__malloc_lock+0x8>)
 80075de:	f7ff bc65 	b.w	8006eac <__retarget_lock_acquire_recursive>
 80075e2:	bf00      	nop
 80075e4:	2000504c 	.word	0x2000504c

080075e8 <__malloc_unlock>:
 80075e8:	4801      	ldr	r0, [pc, #4]	@ (80075f0 <__malloc_unlock+0x8>)
 80075ea:	f7ff bc60 	b.w	8006eae <__retarget_lock_release_recursive>
 80075ee:	bf00      	nop
 80075f0:	2000504c 	.word	0x2000504c

080075f4 <_realloc_r>:
 80075f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f8:	4680      	mov	r8, r0
 80075fa:	4615      	mov	r5, r2
 80075fc:	460c      	mov	r4, r1
 80075fe:	b921      	cbnz	r1, 800760a <_realloc_r+0x16>
 8007600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007604:	4611      	mov	r1, r2
 8007606:	f7ff bddb 	b.w	80071c0 <_malloc_r>
 800760a:	b92a      	cbnz	r2, 8007618 <_realloc_r+0x24>
 800760c:	f000 f84a 	bl	80076a4 <_free_r>
 8007610:	2400      	movs	r4, #0
 8007612:	4620      	mov	r0, r4
 8007614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007618:	f000 f88e 	bl	8007738 <_malloc_usable_size_r>
 800761c:	4285      	cmp	r5, r0
 800761e:	4606      	mov	r6, r0
 8007620:	d802      	bhi.n	8007628 <_realloc_r+0x34>
 8007622:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007626:	d8f4      	bhi.n	8007612 <_realloc_r+0x1e>
 8007628:	4629      	mov	r1, r5
 800762a:	4640      	mov	r0, r8
 800762c:	f7ff fdc8 	bl	80071c0 <_malloc_r>
 8007630:	4607      	mov	r7, r0
 8007632:	2800      	cmp	r0, #0
 8007634:	d0ec      	beq.n	8007610 <_realloc_r+0x1c>
 8007636:	42b5      	cmp	r5, r6
 8007638:	462a      	mov	r2, r5
 800763a:	4621      	mov	r1, r4
 800763c:	bf28      	it	cs
 800763e:	4632      	movcs	r2, r6
 8007640:	f7ff fc36 	bl	8006eb0 <memcpy>
 8007644:	4621      	mov	r1, r4
 8007646:	4640      	mov	r0, r8
 8007648:	f000 f82c 	bl	80076a4 <_free_r>
 800764c:	463c      	mov	r4, r7
 800764e:	e7e0      	b.n	8007612 <_realloc_r+0x1e>

08007650 <memmove>:
 8007650:	4288      	cmp	r0, r1
 8007652:	b510      	push	{r4, lr}
 8007654:	eb01 0402 	add.w	r4, r1, r2
 8007658:	d902      	bls.n	8007660 <memmove+0x10>
 800765a:	4284      	cmp	r4, r0
 800765c:	4623      	mov	r3, r4
 800765e:	d807      	bhi.n	8007670 <memmove+0x20>
 8007660:	1e43      	subs	r3, r0, #1
 8007662:	42a1      	cmp	r1, r4
 8007664:	d008      	beq.n	8007678 <memmove+0x28>
 8007666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800766a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800766e:	e7f8      	b.n	8007662 <memmove+0x12>
 8007670:	4402      	add	r2, r0
 8007672:	4601      	mov	r1, r0
 8007674:	428a      	cmp	r2, r1
 8007676:	d100      	bne.n	800767a <memmove+0x2a>
 8007678:	bd10      	pop	{r4, pc}
 800767a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800767e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007682:	e7f7      	b.n	8007674 <memmove+0x24>

08007684 <_sbrk_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	4d06      	ldr	r5, [pc, #24]	@ (80076a0 <_sbrk_r+0x1c>)
 8007688:	2300      	movs	r3, #0
 800768a:	4604      	mov	r4, r0
 800768c:	4608      	mov	r0, r1
 800768e:	602b      	str	r3, [r5, #0]
 8007690:	f7fa f90e 	bl	80018b0 <_sbrk>
 8007694:	1c43      	adds	r3, r0, #1
 8007696:	d102      	bne.n	800769e <_sbrk_r+0x1a>
 8007698:	682b      	ldr	r3, [r5, #0]
 800769a:	b103      	cbz	r3, 800769e <_sbrk_r+0x1a>
 800769c:	6023      	str	r3, [r4, #0]
 800769e:	bd38      	pop	{r3, r4, r5, pc}
 80076a0:	20005058 	.word	0x20005058

080076a4 <_free_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4605      	mov	r5, r0
 80076a8:	2900      	cmp	r1, #0
 80076aa:	d041      	beq.n	8007730 <_free_r+0x8c>
 80076ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076b0:	1f0c      	subs	r4, r1, #4
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	bfb8      	it	lt
 80076b6:	18e4      	addlt	r4, r4, r3
 80076b8:	f7ff ff90 	bl	80075dc <__malloc_lock>
 80076bc:	4a1d      	ldr	r2, [pc, #116]	@ (8007734 <_free_r+0x90>)
 80076be:	6813      	ldr	r3, [r2, #0]
 80076c0:	b933      	cbnz	r3, 80076d0 <_free_r+0x2c>
 80076c2:	6063      	str	r3, [r4, #4]
 80076c4:	6014      	str	r4, [r2, #0]
 80076c6:	4628      	mov	r0, r5
 80076c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076cc:	f7ff bf8c 	b.w	80075e8 <__malloc_unlock>
 80076d0:	42a3      	cmp	r3, r4
 80076d2:	d908      	bls.n	80076e6 <_free_r+0x42>
 80076d4:	6820      	ldr	r0, [r4, #0]
 80076d6:	1821      	adds	r1, r4, r0
 80076d8:	428b      	cmp	r3, r1
 80076da:	bf01      	itttt	eq
 80076dc:	6819      	ldreq	r1, [r3, #0]
 80076de:	685b      	ldreq	r3, [r3, #4]
 80076e0:	1809      	addeq	r1, r1, r0
 80076e2:	6021      	streq	r1, [r4, #0]
 80076e4:	e7ed      	b.n	80076c2 <_free_r+0x1e>
 80076e6:	461a      	mov	r2, r3
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	b10b      	cbz	r3, 80076f0 <_free_r+0x4c>
 80076ec:	42a3      	cmp	r3, r4
 80076ee:	d9fa      	bls.n	80076e6 <_free_r+0x42>
 80076f0:	6811      	ldr	r1, [r2, #0]
 80076f2:	1850      	adds	r0, r2, r1
 80076f4:	42a0      	cmp	r0, r4
 80076f6:	d10b      	bne.n	8007710 <_free_r+0x6c>
 80076f8:	6820      	ldr	r0, [r4, #0]
 80076fa:	4401      	add	r1, r0
 80076fc:	1850      	adds	r0, r2, r1
 80076fe:	4283      	cmp	r3, r0
 8007700:	6011      	str	r1, [r2, #0]
 8007702:	d1e0      	bne.n	80076c6 <_free_r+0x22>
 8007704:	6818      	ldr	r0, [r3, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	6053      	str	r3, [r2, #4]
 800770a:	4408      	add	r0, r1
 800770c:	6010      	str	r0, [r2, #0]
 800770e:	e7da      	b.n	80076c6 <_free_r+0x22>
 8007710:	d902      	bls.n	8007718 <_free_r+0x74>
 8007712:	230c      	movs	r3, #12
 8007714:	602b      	str	r3, [r5, #0]
 8007716:	e7d6      	b.n	80076c6 <_free_r+0x22>
 8007718:	6820      	ldr	r0, [r4, #0]
 800771a:	1821      	adds	r1, r4, r0
 800771c:	428b      	cmp	r3, r1
 800771e:	bf04      	itt	eq
 8007720:	6819      	ldreq	r1, [r3, #0]
 8007722:	685b      	ldreq	r3, [r3, #4]
 8007724:	6063      	str	r3, [r4, #4]
 8007726:	bf04      	itt	eq
 8007728:	1809      	addeq	r1, r1, r0
 800772a:	6021      	streq	r1, [r4, #0]
 800772c:	6054      	str	r4, [r2, #4]
 800772e:	e7ca      	b.n	80076c6 <_free_r+0x22>
 8007730:	bd38      	pop	{r3, r4, r5, pc}
 8007732:	bf00      	nop
 8007734:	20005054 	.word	0x20005054

08007738 <_malloc_usable_size_r>:
 8007738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800773c:	1f18      	subs	r0, r3, #4
 800773e:	2b00      	cmp	r3, #0
 8007740:	bfbc      	itt	lt
 8007742:	580b      	ldrlt	r3, [r1, r0]
 8007744:	18c0      	addlt	r0, r0, r3
 8007746:	4770      	bx	lr

08007748 <_init>:
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774a:	bf00      	nop
 800774c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800774e:	bc08      	pop	{r3}
 8007750:	469e      	mov	lr, r3
 8007752:	4770      	bx	lr

08007754 <_fini>:
 8007754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007756:	bf00      	nop
 8007758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775a:	bc08      	pop	{r3}
 800775c:	469e      	mov	lr, r3
 800775e:	4770      	bx	lr
